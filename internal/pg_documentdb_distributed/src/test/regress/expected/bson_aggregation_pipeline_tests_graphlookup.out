SET search_path TO documentdb_core,documentdb_api,documentdb_api_catalog,documentdb_api_internal;
SET citus.next_shard_id TO 912000;
SET documentdb.next_collection_id TO 9120;
SET documentdb.next_collection_index_id TO 9120;
SELECT documentdb_api.insert_one('db', 'graphlookup_socialgroup', '{ "_id" : 1, "userName" : "Sam" }');
NOTICE:  creating collection
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db', 'graphlookup_socialgroup', '{ "_id" : 2, "userName" : "Alex", "friend" : "Sam" }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db', 'graphlookup_socialgroup', '{ "_id" : 3, "userName" : "Jamie", "friend" : "Alex" }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db', 'graphlookup_socialgroup', '{ "_id" : 4, "userName" : "Taylor", "friend" : "Alex" }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db', 'graphlookup_socialgroup', '{ "_id" : 5, "userName" : "Morgan", "friend" : "Jamie" }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db', 'graphlookup_socialgroup', '{ "_id" : 6, "userName" : "Jordan", "friend" : "Taylor" }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT document FROM documentdb_api_catalog.bson_aggregation_pipeline('db',
    '{ "aggregate": "graphlookup_socialgroup", "pipeline": [ { "$graphLookup": { "from": "graphlookup_socialgroup", "startWith": "$friend", "connectFromField": "friend", "connectToField": "userName", "as": "friendChain" } } ]}');
                                                                                                                                                      document                                                                                                                                                       
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "userName" : "Sam", "friendChain" : [  ] }
 { "_id" : { "$numberInt" : "2" }, "userName" : "Alex", "friend" : "Sam", "friendChain" : [ { "_id" : { "$numberInt" : "1" }, "userName" : "Sam" } ] }
 { "_id" : { "$numberInt" : "3" }, "userName" : "Jamie", "friend" : "Alex", "friendChain" : [ { "_id" : { "$numberInt" : "1" }, "userName" : "Sam" }, { "_id" : { "$numberInt" : "2" }, "userName" : "Alex", "friend" : "Sam" } ] }
 { "_id" : { "$numberInt" : "4" }, "userName" : "Taylor", "friend" : "Alex", "friendChain" : [ { "_id" : { "$numberInt" : "1" }, "userName" : "Sam" }, { "_id" : { "$numberInt" : "2" }, "userName" : "Alex", "friend" : "Sam" } ] }
 { "_id" : { "$numberInt" : "5" }, "userName" : "Morgan", "friend" : "Jamie", "friendChain" : [ { "_id" : { "$numberInt" : "1" }, "userName" : "Sam" }, { "_id" : { "$numberInt" : "2" }, "userName" : "Alex", "friend" : "Sam" }, { "_id" : { "$numberInt" : "3" }, "userName" : "Jamie", "friend" : "Alex" } ] }
 { "_id" : { "$numberInt" : "6" }, "userName" : "Jordan", "friend" : "Taylor", "friendChain" : [ { "_id" : { "$numberInt" : "1" }, "userName" : "Sam" }, { "_id" : { "$numberInt" : "2" }, "userName" : "Alex", "friend" : "Sam" }, { "_id" : { "$numberInt" : "4" }, "userName" : "Taylor", "friend" : "Alex" } ] }
(6 rows)

EXPLAIN (VERBOSE ON, COSTS OFF) SELECT document FROM documentdb_api_catalog.bson_aggregation_pipeline('db',
    '{ "aggregate": "graphlookup_socialgroup", "pipeline": [ { "$graphLookup": { "from": "graphlookup_socialgroup", "startWith": "$friend", "connectFromField": "friend", "connectToField": "userName", "as": "friendChain" } } ]}');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_dollar_merge_documents(document, "addFields", true) AS document FROM (SELECT "graphLookupBase_stage_1".document, COALESCE((SELECT COALESCE(documentdb_api_catalog.bson_array_agg(agg_stage_sub_1_0.document, 'friendChain'::text), '{ "friendChain" : [  ] }'::documentdb_core.bson) AS document FROM (WITH RECURSIVE "graphLookupRecurseStage" AS (SELECT "*TLOCRN*".document, "*TLOCRN*".depth, "*TLOCRN*"."baseDocId", false AS is_cycle, ARRAY[ROW("*TLOCRN*"."baseDocId")] AS path FROM (SELECT collection_0_2.document, '{ "depth" : { "$numberInt" : "0" } }'::documentdb_core.bson AS depth, documentdb_api_catalog.bson_expression_get(collection_0_2.document, '{ "_id" : "$_id" }'::documentdb_core.bson) AS "baseDocId" FROM documentdb_data.documents_9120_912000 collection_0_2 WHERE ((collection_0_2.shard_key_value OPERATOR(pg_catalog.=) '9120'::bigint) AND documentdb_api_internal.bson_dollar_lookup_join_filter(collection_0_2.document, "graphLookupBase_stage_1"."inputExpr", 'userName'::text))) "*TLOCRN*"(document, depth, "baseDocId") UNION ALL SELECT "*TROCRN*".document, "*TROCRN*".depth, "*TROCRN*"."baseDocId", CASE WHEN (ROW("*TROCRN*"."baseDocId") OPERATOR(pg_catalog.=) ANY ("*TROCRN*".path)) THEN true ELSE false END AS is_cycle, array_cat("*TROCRN*".path, ARRAY[ROW("*TROCRN*"."baseDocId")]) AS path FROM (SELECT collection_0_2.document, documentdb_api_catalog.bson_dollar_add_fields("lookupRecursive_stage_1".depth, '{ "depth" : { "$add" : [ "$depth", { "$numberInt" : "1" } ] } }'::documentdb_core.bson) AS depth, documentdb_api_catalog.bson_expression_get(collection_0_2.document, '{ "_id" : "$_id" }'::documentdb_core.bson) AS "baseDocId", "lookupRecursive_stage_1".is_cycle, "lookupRecursive_stage_1".path FROM documentdb_data.documents_9120_912000 collection_0_2, "graphLookupRecurseStage" "lookupRecursive_stage_1" WHERE ((collection_0_2.shard_key_value OPERATOR(pg_catalog.=) '9120'::bigint) AND documentdb_api_internal.bson_dollar_lookup_join_filter(collection_0_2.document, documentdb_api_internal.bson_expression_get("lookupRecursive_stage_1".document, '{ "userName" : { "$makeArray" : "$friend" } }'::documentdb_core.bson, false, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson), 'userName'::text))) "*TROCRN*"(document, depth, "baseDocId", is_cycle, path) WHERE ("*TROCRN*".is_cycle OPERATOR(pg_catalog.<>) true)) SELECT DISTINCT ON ("graphLookup_stage_2"."baseDocId") "graphLookup_stage_2".document FROM "graphLookupRecurseStage" "graphLookup_stage_2" ORDER BY "graphLookup_stage_2"."baseDocId", "graphLookup_stage_2".depth) agg_stage_sub_1_0), '{ "friendChain" : [  ] }'::documentdb_core.bson) AS "addFields" FROM (SELECT collection.document, documentdb_api_internal.bson_expression_get(collection.document, '{ "userName" : { "$makeArray" : "$friend" } }'::documentdb_core.bson, false, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson) AS "inputExpr" FROM documentdb_data.documents_9120_912000 collection WHERE (collection.shard_key_value OPERATOR(pg_catalog.=) '9120'::bigint)) "graphLookupBase_stage_1") "graphLookup_stage_1"
         Node: host=localhost port=58070 dbname=regression
         ->  Bitmap Heap Scan on documentdb_data.documents_9120_912000 collection
               Output: documentdb_api_internal.bson_dollar_merge_documents(collection.document, COALESCE((SubPlan 2), '{ "friendChain" : [  ] }'::documentdb_core.bson), true)
               Recheck Cond: (collection.shard_key_value = '9120'::bigint)
               ->  Bitmap Index Scan on _id_
                     Index Cond: (collection.shard_key_value = '9120'::bigint)
               SubPlan 2
                 ->  Aggregate
                       Output: COALESCE(documentdb_api_catalog.bson_array_agg("graphLookup_stage_2".document, 'friendChain'::text), '{ "friendChain" : [  ] }'::documentdb_core.bson)
                       ->  Unique
                             Output: "graphLookup_stage_2".document, "graphLookup_stage_2"."baseDocId", "graphLookup_stage_2".depth
                             CTE graphLookupRecurseStage
                               ->  Recursive Union
                                     ->  Bitmap Heap Scan on documentdb_data.documents_9120_912000 collection_0_2
                                           Output: collection_0_2.document, '{ "depth" : { "$numberInt" : "0" } }'::documentdb_core.bson, documentdb_api_catalog.bson_expression_get(collection_0_2.document, '{ "_id" : "$_id" }'::documentdb_core.bson, false), false, ARRAY[ROW(documentdb_api_catalog.bson_expression_get(collection_0_2.document, '{ "_id" : "$_id" }'::documentdb_core.bson, false))]
                                           Recheck Cond: (collection_0_2.shard_key_value = '9120'::bigint)
                                           Filter: documentdb_api_internal.bson_dollar_lookup_join_filter(collection_0_2.document, documentdb_api_internal.bson_expression_get(collection.document, '{ "userName" : { "$makeArray" : "$friend" } }'::documentdb_core.bson, false, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson), 'userName'::text)
                                           ->  Bitmap Index Scan on _id_
                                                 Index Cond: (collection_0_2.shard_key_value = '9120'::bigint)
                                     ->  Nested Loop
                                           Output: collection_0_2_1.document, documentdb_api_catalog.bson_dollar_add_fields("lookupRecursive_stage_1".depth, '{ "depth" : { "$add" : [ "$depth", { "$numberInt" : "1" } ] } }'::documentdb_core.bson), documentdb_api_catalog.bson_expression_get(collection_0_2_1.document, '{ "_id" : "$_id" }'::documentdb_core.bson, false), CASE WHEN (ROW(documentdb_api_catalog.bson_expression_get(collection_0_2_1.document, '{ "_id" : "$_id" }'::documentdb_core.bson, false)) = ANY ("lookupRecursive_stage_1".path)) THEN true ELSE false END, array_cat("lookupRecursive_stage_1".path, ARRAY[ROW(documentdb_api_catalog.bson_expression_get(collection_0_2_1.document, '{ "_id" : "$_id" }'::documentdb_core.bson, false))])
                                           Join Filter: documentdb_api_internal.bson_dollar_lookup_join_filter(collection_0_2_1.document, documentdb_api_internal.bson_expression_get("lookupRecursive_stage_1".document, '{ "userName" : { "$makeArray" : "$friend" } }'::documentdb_core.bson, false, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson), 'userName'::text)
                                           ->  WorkTable Scan on "graphLookupRecurseStage" "lookupRecursive_stage_1"
                                                 Output: "lookupRecursive_stage_1".document, "lookupRecursive_stage_1".depth, "lookupRecursive_stage_1"."baseDocId", "lookupRecursive_stage_1".is_cycle, "lookupRecursive_stage_1".path
                                                 Filter: (NOT "lookupRecursive_stage_1".is_cycle)
                                           ->  Materialize
                                                 Output: collection_0_2_1.document
                                                 ->  Bitmap Heap Scan on documentdb_data.documents_9120_912000 collection_0_2_1
                                                       Output: collection_0_2_1.document
                                                       Recheck Cond: (collection_0_2_1.shard_key_value = '9120'::bigint)
                                                       ->  Bitmap Index Scan on _id_
                                                             Index Cond: (collection_0_2_1.shard_key_value = '9120'::bigint)
                             ->  Sort
                                   Output: "graphLookup_stage_2".document, "graphLookup_stage_2"."baseDocId", "graphLookup_stage_2".depth
                                   Sort Key: "graphLookup_stage_2"."baseDocId", "graphLookup_stage_2".depth
                                   ->  CTE Scan on "graphLookupRecurseStage" "graphLookup_stage_2"
                                         Output: "graphLookup_stage_2".document, "graphLookup_stage_2"."baseDocId", "graphLookup_stage_2".depth
(43 rows)

SELECT documentdb_api.insert_one('db', 'graphlookup_places', '{ "_id" : 0, "placeCode" : "P1", "nearby" : [ "P2", "P3" ] }');
NOTICE:  creating collection
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db', 'graphlookup_places', '{ "_id" : 1, "placeCode" : "P2", "nearby" : [ "P1", "P4" ] }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db', 'graphlookup_places', '{ "_id" : 2, "placeCode" : "P3", "nearby" : [ "P1" ] }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db', 'graphlookup_places', '{ "_id" : 3, "placeCode" : "P4", "nearby" : [ "P2", "P5" ] }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db', 'graphlookup_places', '{ "_id" : 4, "placeCode" : "P5", "nearby" : [ "P4" ] }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db', 'graphlookup_visitors', '{ "_id" : 1, "userName" : "Sam", "homePlace" : "P1" }');
NOTICE:  creating collection
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db', 'graphlookup_visitors', '{ "_id" : 2, "userName" : "Alex", "homePlace" : "P1" }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db', 'graphlookup_visitors', '{ "_id" : 3, "userName" : "Jamie", "homePlace" : "P2" }');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT document FROM documentdb_api_catalog.bson_aggregation_pipeline('db',
    '{ "aggregate": "graphlookup_visitors", "pipeline": [ { "$graphLookup": { "from": "graphlookup_places", "startWith": "$homePlace", "connectFromField": "nearby", "connectToField": "placeCode", "as": "reachablePlaces", "maxDepth": 2 } } ]}');
                                                                                                                                                                                                                                                                     document                                                                                                                                                                                                                                                                     
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "userName" : "Sam", "homePlace" : "P1", "reachablePlaces" : [ { "_id" : { "$numberInt" : "0" }, "placeCode" : "P1", "nearby" : [ "P2", "P3" ] }, { "_id" : { "$numberInt" : "1" }, "placeCode" : "P2", "nearby" : [ "P1", "P4" ] }, { "_id" : { "$numberInt" : "2" }, "placeCode" : "P3", "nearby" : [ "P1" ] }, { "_id" : { "$numberInt" : "3" }, "placeCode" : "P4", "nearby" : [ "P2", "P5" ] } ] }
 { "_id" : { "$numberInt" : "2" }, "userName" : "Alex", "homePlace" : "P1", "reachablePlaces" : [ { "_id" : { "$numberInt" : "0" }, "placeCode" : "P1", "nearby" : [ "P2", "P3" ] }, { "_id" : { "$numberInt" : "1" }, "placeCode" : "P2", "nearby" : [ "P1", "P4" ] }, { "_id" : { "$numberInt" : "2" }, "placeCode" : "P3", "nearby" : [ "P1" ] }, { "_id" : { "$numberInt" : "3" }, "placeCode" : "P4", "nearby" : [ "P2", "P5" ] } ] }
 { "_id" : { "$numberInt" : "3" }, "userName" : "Jamie", "homePlace" : "P2", "reachablePlaces" : [ { "_id" : { "$numberInt" : "0" }, "placeCode" : "P1", "nearby" : [ "P2", "P3" ] }, { "_id" : { "$numberInt" : "1" }, "placeCode" : "P2", "nearby" : [ "P1", "P4" ] }, { "_id" : { "$numberInt" : "2" }, "placeCode" : "P3", "nearby" : [ "P1" ] }, { "_id" : { "$numberInt" : "3" }, "placeCode" : "P4", "nearby" : [ "P2", "P5" ] }, { "_id" : { "$numberInt" : "4" }, "placeCode" : "P5", "nearby" : [ "P4" ] } ] }
(3 rows)

EXPLAIN (VERBOSE ON, COSTS OFF) SELECT document FROM documentdb_api_catalog.bson_aggregation_pipeline('db',
    '{ "aggregate": "graphlookup_visitors", "pipeline": [ { "$graphLookup": { "from": "graphlookup_places", "startWith": "$homePlace", "connectFromField": "nearby", "connectToField": "placeCode", "as": "reachablePlaces", "maxDepth": 2 } } ]}');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_dollar_merge_documents(document, "addFields", true) AS document FROM (SELECT "graphLookupBase_stage_1".document, COALESCE((SELECT COALESCE(documentdb_api_catalog.bson_array_agg(agg_stage_sub_1_0.document, 'reachablePlaces'::text), '{ "reachablePlaces" : [  ] }'::documentdb_core.bson) AS document FROM (WITH RECURSIVE "graphLookupRecurseStage" AS (SELECT "*TLOCRN*".document, "*TLOCRN*".depth, "*TLOCRN*"."baseDocId", false AS is_cycle, ARRAY[ROW("*TLOCRN*"."baseDocId")] AS path FROM (SELECT collection_0_2.document, '{ "depth" : { "$numberInt" : "0" } }'::documentdb_core.bson AS depth, documentdb_api_catalog.bson_expression_get(collection_0_2.document, '{ "_id" : "$_id" }'::documentdb_core.bson) AS "baseDocId" FROM documentdb_data.documents_9121_912019 collection_0_2 WHERE ((collection_0_2.shard_key_value OPERATOR(pg_catalog.=) '9121'::bigint) AND documentdb_api_internal.bson_dollar_lookup_join_filter(collection_0_2.document, "graphLookupBase_stage_1"."inputExpr", 'placeCode'::text))) "*TLOCRN*"(document, depth, "baseDocId") UNION ALL SELECT "*TROCRN*".document, "*TROCRN*".depth, "*TROCRN*"."baseDocId", CASE WHEN (ROW("*TROCRN*"."baseDocId") OPERATOR(pg_catalog.=) ANY ("*TROCRN*".path)) THEN true ELSE false END AS is_cycle, array_cat("*TROCRN*".path, ARRAY[ROW("*TROCRN*"."baseDocId")]) AS path FROM (SELECT collection_0_2.document, documentdb_api_catalog.bson_dollar_add_fields("lookupRecursive_stage_1".depth, '{ "depth" : { "$add" : [ "$depth", { "$numberInt" : "1" } ] } }'::documentdb_core.bson) AS depth, documentdb_api_catalog.bson_expression_get(collection_0_2.document, '{ "_id" : "$_id" }'::documentdb_core.bson) AS "baseDocId", "lookupRecursive_stage_1".is_cycle, "lookupRecursive_stage_1".path FROM documentdb_data.documents_9121_912019 collection_0_2, "graphLookupRecurseStage" "lookupRecursive_stage_1" WHERE ((collection_0_2.shard_key_value OPERATOR(pg_catalog.=) '9121'::bigint) AND documentdb_api_internal.bson_dollar_lookup_join_filter(collection_0_2.document, documentdb_api_internal.bson_expression_get("lookupRecursive_stage_1".document, '{ "placeCode" : { "$makeArray" : "$nearby" } }'::documentdb_core.bson, false, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson), 'placeCode'::text) AND ("lookupRecursive_stage_1".depth OPERATOR(documentdb_api_catalog.#<) '{ "depth" : { "$numberInt" : "2" } }'::documentdb_core.bsonquery))) "*TROCRN*"(document, depth, "baseDocId", is_cycle, path) WHERE ("*TROCRN*".is_cycle OPERATOR(pg_catalog.<>) true)) SELECT DISTINCT ON ("graphLookup_stage_2"."baseDocId") "graphLookup_stage_2".document FROM "graphLookupRecurseStage" "graphLookup_stage_2" ORDER BY "graphLookup_stage_2"."baseDocId", "graphLookup_stage_2".depth) agg_stage_sub_1_0), '{ "reachablePlaces" : [  ] }'::documentdb_core.bson) AS "addFields" FROM (SELECT collection.document, documentdb_api_internal.bson_expression_get(collection.document, '{ "placeCode" : { "$makeArray" : "$homePlace" } }'::documentdb_core.bson, false, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson) AS "inputExpr" FROM documentdb_data.documents_9122_912038 collection WHERE (collection.shard_key_value OPERATOR(pg_catalog.=) '9122'::bigint)) "graphLookupBase_stage_1") "graphLookup_stage_1"
         Node: host=localhost port=58070 dbname=regression
         ->  Bitmap Heap Scan on documentdb_data.documents_9122_912038 collection
               Output: documentdb_api_internal.bson_dollar_merge_documents(collection.document, COALESCE((SubPlan 2), '{ "reachablePlaces" : [  ] }'::documentdb_core.bson), true)
               Recheck Cond: (collection.shard_key_value = '9122'::bigint)
               ->  Bitmap Index Scan on _id_
                     Index Cond: (collection.shard_key_value = '9122'::bigint)
               SubPlan 2
                 ->  Aggregate
                       Output: COALESCE(documentdb_api_catalog.bson_array_agg("graphLookup_stage_2".document, 'reachablePlaces'::text), '{ "reachablePlaces" : [  ] }'::documentdb_core.bson)
                       ->  Unique
                             Output: "graphLookup_stage_2".document, "graphLookup_stage_2"."baseDocId", "graphLookup_stage_2".depth
                             CTE graphLookupRecurseStage
                               ->  Recursive Union
                                     ->  Bitmap Heap Scan on documentdb_data.documents_9121_912019 collection_0_2
                                           Output: collection_0_2.document, '{ "depth" : { "$numberInt" : "0" } }'::documentdb_core.bson, documentdb_api_catalog.bson_expression_get(collection_0_2.document, '{ "_id" : "$_id" }'::documentdb_core.bson, false), false, ARRAY[ROW(documentdb_api_catalog.bson_expression_get(collection_0_2.document, '{ "_id" : "$_id" }'::documentdb_core.bson, false))]
                                           Recheck Cond: (collection_0_2.shard_key_value = '9121'::bigint)
                                           Filter: documentdb_api_internal.bson_dollar_lookup_join_filter(collection_0_2.document, documentdb_api_internal.bson_expression_get(collection.document, '{ "placeCode" : { "$makeArray" : "$homePlace" } }'::documentdb_core.bson, false, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson), 'placeCode'::text)
                                           ->  Bitmap Index Scan on _id_
                                                 Index Cond: (collection_0_2.shard_key_value = '9121'::bigint)
                                     ->  Nested Loop
                                           Output: collection_0_2_1.document, documentdb_api_catalog.bson_dollar_add_fields("lookupRecursive_stage_1".depth, '{ "depth" : { "$add" : [ "$depth", { "$numberInt" : "1" } ] } }'::documentdb_core.bson), documentdb_api_catalog.bson_expression_get(collection_0_2_1.document, '{ "_id" : "$_id" }'::documentdb_core.bson, false), CASE WHEN (ROW(documentdb_api_catalog.bson_expression_get(collection_0_2_1.document, '{ "_id" : "$_id" }'::documentdb_core.bson, false)) = ANY ("lookupRecursive_stage_1".path)) THEN true ELSE false END, array_cat("lookupRecursive_stage_1".path, ARRAY[ROW(documentdb_api_catalog.bson_expression_get(collection_0_2_1.document, '{ "_id" : "$_id" }'::documentdb_core.bson, false))])
                                           Join Filter: documentdb_api_internal.bson_dollar_lookup_join_filter(collection_0_2_1.document, documentdb_api_internal.bson_expression_get("lookupRecursive_stage_1".document, '{ "placeCode" : { "$makeArray" : "$nearby" } }'::documentdb_core.bson, false, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson), 'placeCode'::text)
                                           ->  WorkTable Scan on "graphLookupRecurseStage" "lookupRecursive_stage_1"
                                                 Output: "lookupRecursive_stage_1".document, "lookupRecursive_stage_1".depth, "lookupRecursive_stage_1"."baseDocId", "lookupRecursive_stage_1".is_cycle, "lookupRecursive_stage_1".path
                                                 Filter: ((NOT "lookupRecursive_stage_1".is_cycle) AND ("lookupRecursive_stage_1".depth OPERATOR(documentdb_api_catalog.#<) '{ "depth" : { "$numberInt" : "2" } }'::documentdb_core.bsonquery))
                                           ->  Materialize
                                                 Output: collection_0_2_1.document
                                                 ->  Bitmap Heap Scan on documentdb_data.documents_9121_912019 collection_0_2_1
                                                       Output: collection_0_2_1.document
                                                       Recheck Cond: (collection_0_2_1.shard_key_value = '9121'::bigint)
                                                       ->  Bitmap Index Scan on _id_
                                                             Index Cond: (collection_0_2_1.shard_key_value = '9121'::bigint)
                             ->  Sort
                                   Output: "graphLookup_stage_2".document, "graphLookup_stage_2"."baseDocId", "graphLookup_stage_2".depth
                                   Sort Key: "graphLookup_stage_2"."baseDocId", "graphLookup_stage_2".depth
                                   ->  CTE Scan on "graphLookupRecurseStage" "graphLookup_stage_2"
                                         Output: "graphLookup_stage_2".document, "graphLookup_stage_2"."baseDocId", "graphLookup_stage_2".depth
(43 rows)

SELECT document FROM documentdb_api_catalog.bson_aggregation_pipeline('db',
    '{ "aggregate": "graphlookup_visitors", "pipeline": [ { "$graphLookup": { "from": "graphlookup_places", "startWith": "$homePlace", "connectFromField": "nearby", "connectToField": "placeCode", "as": "reachablePlaces", "depthField": "stepsCount" } } ]}');
                                                                                                                                                                                                                                                                                                                                                                      document                                                                                                                                                                                                                                                                                                                                                                       
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "userName" : "Sam", "homePlace" : "P1", "reachablePlaces" : [ { "_id" : { "$numberInt" : "0" }, "placeCode" : "P1", "nearby" : [ "P2", "P3" ], "stepsCount" : { "$numberInt" : "0" } }, { "_id" : { "$numberInt" : "1" }, "placeCode" : "P2", "nearby" : [ "P1", "P4" ], "stepsCount" : { "$numberInt" : "1" } }, { "_id" : { "$numberInt" : "2" }, "placeCode" : "P3", "nearby" : [ "P1" ], "stepsCount" : { "$numberInt" : "1" } }, { "_id" : { "$numberInt" : "3" }, "placeCode" : "P4", "nearby" : [ "P2", "P5" ], "stepsCount" : { "$numberInt" : "2" } }, { "_id" : { "$numberInt" : "4" }, "placeCode" : "P5", "nearby" : [ "P4" ], "stepsCount" : { "$numberInt" : "3" } } ] }
 { "_id" : { "$numberInt" : "2" }, "userName" : "Alex", "homePlace" : "P1", "reachablePlaces" : [ { "_id" : { "$numberInt" : "0" }, "placeCode" : "P1", "nearby" : [ "P2", "P3" ], "stepsCount" : { "$numberInt" : "0" } }, { "_id" : { "$numberInt" : "1" }, "placeCode" : "P2", "nearby" : [ "P1", "P4" ], "stepsCount" : { "$numberInt" : "1" } }, { "_id" : { "$numberInt" : "2" }, "placeCode" : "P3", "nearby" : [ "P1" ], "stepsCount" : { "$numberInt" : "1" } }, { "_id" : { "$numberInt" : "3" }, "placeCode" : "P4", "nearby" : [ "P2", "P5" ], "stepsCount" : { "$numberInt" : "2" } }, { "_id" : { "$numberInt" : "4" }, "placeCode" : "P5", "nearby" : [ "P4" ], "stepsCount" : { "$numberInt" : "3" } } ] }
 { "_id" : { "$numberInt" : "3" }, "userName" : "Jamie", "homePlace" : "P2", "reachablePlaces" : [ { "_id" : { "$numberInt" : "0" }, "placeCode" : "P1", "nearby" : [ "P2", "P3" ], "stepsCount" : { "$numberInt" : "1" } }, { "_id" : { "$numberInt" : "1" }, "placeCode" : "P2", "nearby" : [ "P1", "P4" ], "stepsCount" : { "$numberInt" : "0" } }, { "_id" : { "$numberInt" : "2" }, "placeCode" : "P3", "nearby" : [ "P1" ], "stepsCount" : { "$numberInt" : "2" } }, { "_id" : { "$numberInt" : "3" }, "placeCode" : "P4", "nearby" : [ "P2", "P5" ], "stepsCount" : { "$numberInt" : "1" } }, { "_id" : { "$numberInt" : "4" }, "placeCode" : "P5", "nearby" : [ "P4" ], "stepsCount" : { "$numberInt" : "2" } } ] }
(3 rows)

EXPLAIN (VERBOSE ON, COSTS OFF) SELECT document FROM documentdb_api_catalog.bson_aggregation_pipeline('db',
    '{ "aggregate": "graphlookup_visitors", "pipeline": [ { "$graphLookup": { "from": "graphlookup_places", "startWith": "$homePlace", "connectFromField": "nearby", "connectToField": "placeCode", "as": "reachablePlaces", "depthField": "stepsCount" } } ]}');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_dollar_merge_documents(document, "addFields", true) AS document FROM (SELECT "graphLookupBase_stage_1".document, COALESCE((SELECT COALESCE(documentdb_api_catalog.bson_array_agg(agg_stage_sub_1_0.document, 'reachablePlaces'::text), '{ "reachablePlaces" : [  ] }'::documentdb_core.bson) AS document FROM (WITH RECURSIVE "graphLookupRecurseStage" AS (SELECT "*TLOCRN*".document, "*TLOCRN*".depth, "*TLOCRN*"."baseDocId", false AS is_cycle, ARRAY[ROW("*TLOCRN*"."baseDocId")] AS path FROM (SELECT collection_0_2.document, '{ "stepsCount" : { "$numberInt" : "0" } }'::documentdb_core.bson AS depth, documentdb_api_catalog.bson_expression_get(collection_0_2.document, '{ "_id" : "$_id" }'::documentdb_core.bson) AS "baseDocId" FROM documentdb_data.documents_9121_912019 collection_0_2 WHERE ((collection_0_2.shard_key_value OPERATOR(pg_catalog.=) '9121'::bigint) AND documentdb_api_internal.bson_dollar_lookup_join_filter(collection_0_2.document, "graphLookupBase_stage_1"."inputExpr", 'placeCode'::text))) "*TLOCRN*"(document, depth, "baseDocId") UNION ALL SELECT "*TROCRN*".document, "*TROCRN*".depth, "*TROCRN*"."baseDocId", CASE WHEN (ROW("*TROCRN*"."baseDocId") OPERATOR(pg_catalog.=) ANY ("*TROCRN*".path)) THEN true ELSE false END AS is_cycle, array_cat("*TROCRN*".path, ARRAY[ROW("*TROCRN*"."baseDocId")]) AS path FROM (SELECT collection_0_2.document, documentdb_api_catalog.bson_dollar_add_fields("lookupRecursive_stage_1".depth, '{ "stepsCount" : { "$add" : [ "$stepsCount", { "$numberInt" : "1" } ] } }'::documentdb_core.bson) AS depth, documentdb_api_catalog.bson_expression_get(collection_0_2.document, '{ "_id" : "$_id" }'::documentdb_core.bson) AS "baseDocId", "lookupRecursive_stage_1".is_cycle, "lookupRecursive_stage_1".path FROM documentdb_data.documents_9121_912019 collection_0_2, "graphLookupRecurseStage" "lookupRecursive_stage_1" WHERE ((collection_0_2.shard_key_value OPERATOR(pg_catalog.=) '9121'::bigint) AND documentdb_api_internal.bson_dollar_lookup_join_filter(collection_0_2.document, documentdb_api_internal.bson_expression_get("lookupRecursive_stage_1".document, '{ "placeCode" : { "$makeArray" : "$nearby" } }'::documentdb_core.bson, false, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson), 'placeCode'::text))) "*TROCRN*"(document, depth, "baseDocId", is_cycle, path) WHERE ("*TROCRN*".is_cycle OPERATOR(pg_catalog.<>) true)) SELECT DISTINCT ON ("graphLookup_stage_2"."baseDocId") documentdb_api_internal.bson_dollar_merge_documents("graphLookup_stage_2".document, "graphLookup_stage_2".depth, true) AS document FROM "graphLookupRecurseStage" "graphLookup_stage_2" ORDER BY "graphLookup_stage_2"."baseDocId", "graphLookup_stage_2".depth) agg_stage_sub_1_0), '{ "reachablePlaces" : [  ] }'::documentdb_core.bson) AS "addFields" FROM (SELECT collection.document, documentdb_api_internal.bson_expression_get(collection.document, '{ "placeCode" : { "$makeArray" : "$homePlace" } }'::documentdb_core.bson, false, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson) AS "inputExpr" FROM documentdb_data.documents_9122_912038 collection WHERE (collection.shard_key_value OPERATOR(pg_catalog.=) '9122'::bigint)) "graphLookupBase_stage_1") "graphLookup_stage_1"
         Node: host=localhost port=58070 dbname=regression
         ->  Bitmap Heap Scan on documentdb_data.documents_9122_912038 collection
               Output: documentdb_api_internal.bson_dollar_merge_documents(collection.document, COALESCE((SubPlan 2), '{ "reachablePlaces" : [  ] }'::documentdb_core.bson), true)
               Recheck Cond: (collection.shard_key_value = '9122'::bigint)
               ->  Bitmap Index Scan on _id_
                     Index Cond: (collection.shard_key_value = '9122'::bigint)
               SubPlan 2
                 ->  Aggregate
                       Output: COALESCE(documentdb_api_catalog.bson_array_agg((documentdb_api_internal.bson_dollar_merge_documents("graphLookup_stage_2".document, "graphLookup_stage_2".depth, true)), 'reachablePlaces'::text), '{ "reachablePlaces" : [  ] }'::documentdb_core.bson)
                       ->  Unique
                             Output: (documentdb_api_internal.bson_dollar_merge_documents("graphLookup_stage_2".document, "graphLookup_stage_2".depth, true)), "graphLookup_stage_2"."baseDocId", "graphLookup_stage_2".depth
                             CTE graphLookupRecurseStage
                               ->  Recursive Union
                                     ->  Bitmap Heap Scan on documentdb_data.documents_9121_912019 collection_0_2
                                           Output: collection_0_2.document, '{ "stepsCount" : { "$numberInt" : "0" } }'::documentdb_core.bson, documentdb_api_catalog.bson_expression_get(collection_0_2.document, '{ "_id" : "$_id" }'::documentdb_core.bson, false), false, ARRAY[ROW(documentdb_api_catalog.bson_expression_get(collection_0_2.document, '{ "_id" : "$_id" }'::documentdb_core.bson, false))]
                                           Recheck Cond: (collection_0_2.shard_key_value = '9121'::bigint)
                                           Filter: documentdb_api_internal.bson_dollar_lookup_join_filter(collection_0_2.document, documentdb_api_internal.bson_expression_get(collection.document, '{ "placeCode" : { "$makeArray" : "$homePlace" } }'::documentdb_core.bson, false, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson), 'placeCode'::text)
                                           ->  Bitmap Index Scan on _id_
                                                 Index Cond: (collection_0_2.shard_key_value = '9121'::bigint)
                                     ->  Nested Loop
                                           Output: collection_0_2_1.document, documentdb_api_catalog.bson_dollar_add_fields("lookupRecursive_stage_1".depth, '{ "stepsCount" : { "$add" : [ "$stepsCount", { "$numberInt" : "1" } ] } }'::documentdb_core.bson), documentdb_api_catalog.bson_expression_get(collection_0_2_1.document, '{ "_id" : "$_id" }'::documentdb_core.bson, false), CASE WHEN (ROW(documentdb_api_catalog.bson_expression_get(collection_0_2_1.document, '{ "_id" : "$_id" }'::documentdb_core.bson, false)) = ANY ("lookupRecursive_stage_1".path)) THEN true ELSE false END, array_cat("lookupRecursive_stage_1".path, ARRAY[ROW(documentdb_api_catalog.bson_expression_get(collection_0_2_1.document, '{ "_id" : "$_id" }'::documentdb_core.bson, false))])
                                           Join Filter: documentdb_api_internal.bson_dollar_lookup_join_filter(collection_0_2_1.document, documentdb_api_internal.bson_expression_get("lookupRecursive_stage_1".document, '{ "placeCode" : { "$makeArray" : "$nearby" } }'::documentdb_core.bson, false, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson), 'placeCode'::text)
                                           ->  WorkTable Scan on "graphLookupRecurseStage" "lookupRecursive_stage_1"
                                                 Output: "lookupRecursive_stage_1".document, "lookupRecursive_stage_1".depth, "lookupRecursive_stage_1"."baseDocId", "lookupRecursive_stage_1".is_cycle, "lookupRecursive_stage_1".path
                                                 Filter: (NOT "lookupRecursive_stage_1".is_cycle)
                                           ->  Materialize
                                                 Output: collection_0_2_1.document
                                                 ->  Bitmap Heap Scan on documentdb_data.documents_9121_912019 collection_0_2_1
                                                       Output: collection_0_2_1.document
                                                       Recheck Cond: (collection_0_2_1.shard_key_value = '9121'::bigint)
                                                       ->  Bitmap Index Scan on _id_
                                                             Index Cond: (collection_0_2_1.shard_key_value = '9121'::bigint)
                             ->  Sort
                                   Output: (documentdb_api_internal.bson_dollar_merge_documents("graphLookup_stage_2".document, "graphLookup_stage_2".depth, true)), "graphLookup_stage_2"."baseDocId", "graphLookup_stage_2".depth
                                   Sort Key: "graphLookup_stage_2"."baseDocId", "graphLookup_stage_2".depth
                                   ->  CTE Scan on "graphLookupRecurseStage" "graphLookup_stage_2"
                                         Output: documentdb_api_internal.bson_dollar_merge_documents("graphLookup_stage_2".document, "graphLookup_stage_2".depth, true), "graphLookup_stage_2"."baseDocId", "graphLookup_stage_2".depth
(43 rows)

-- $graphLookup inside $facet
SELECT document FROM documentdb_api_catalog.bson_aggregation_pipeline('db',
    '{ "aggregate": "graphlookup_socialgroup", "pipeline": [ { "$facet": { "inner": [ { "$graphLookup": { "from": "graphlookup_socialgroup", "startWith": "$friend", "connectFromField": "friend", "connectToField": "userName", "as": "friendChain" } } ] } } ]}');
document
---------------------------------------------------------------------
 { "inner" : [ { "_id" : { "$numberInt" : "1" }, "userName" : "Sam", "friendChain" : [  ] }, { "_id" : { "$numberInt" : "2" }, "userName" : "Alex", "friend" : "Sam", "friendChain" : [ { "_id" : { "$numberInt" : "1" }, "userName" : "Sam" } ] }, { "_id" : { "$numberInt" : "3" }, "userName" : "Jamie", "friend" : "Alex", "friendChain" : [ { "_id" : { "$numberInt" : "1" }, "userName" : "Sam" }, { "_id" : { "$numberInt" : "2" }, "userName" : "Alex", "friend" : "Sam" } ] }, { "_id" : { "$numberInt" : "4" }, "userName" : "Taylor", "friend" : "Alex", "friendChain" : [ { "_id" : { "$numberInt" : "1" }, "userName" : "Sam" }, { "_id" : { "$numberInt" : "2" }, "userName" : "Alex", "friend" : "Sam" } ] }, { "_id" : { "$numberInt" : "5" }, "userName" : "Morgan", "friend" : "Jamie", "friendChain" : [ { "_id" : { "$numberInt" : "1" }, "userName" : "Sam" }, { "_id" : { "$numberInt" : "2" }, "userName" : "Alex", "friend" : "Sam" }, { "_id" : { "$numberInt" : "3" }, "userName" : "Jamie", "friend" : "Alex" } ] }, { "_id" : { "$numberInt" : "6" }, "userName" : "Jordan", "friend" : "Taylor", "friendChain" : [ { "_id" : { "$numberInt" : "1" }, "userName" : "Sam" }, { "_id" : { "$numberInt" : "2" }, "userName" : "Alex", "friend" : "Sam" }, { "_id" : { "$numberInt" : "4" }, "userName" : "Taylor", "friend" : "Alex" } ] } ] }
(1 row)

-- $graphLookup inside $lookup
SELECT document FROM documentdb_api_catalog.bson_aggregation_pipeline('db',
    '{ "aggregate": "graphlookup_visitors", "pipeline": [ { "$lookup": { "from": "graphlookup_socialgroup", "as": "inner", "pipeline": [ { "$graphLookup": { "from": "graphlookup_socialgroup", "startWith": "$friend", "connectFromField": "friend", "connectToField": "userName", "as": "friendChain" } } ] } } ]}');
document
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "userName" : "Sam", "homePlace" : "P1", "inner" : [ { "_id" : { "$numberInt" : "1" }, "userName" : "Sam", "friendChain" : [  ] }, { "_id" : { "$numberInt" : "2" }, "userName" : "Alex", "friend" : "Sam", "friendChain" : [ { "_id" : { "$numberInt" : "1" }, "userName" : "Sam" } ] }, { "_id" : { "$numberInt" : "3" }, "userName" : "Jamie", "friend" : "Alex", "friendChain" : [ { "_id" : { "$numberInt" : "1" }, "userName" : "Sam" }, { "_id" : { "$numberInt" : "2" }, "userName" : "Alex", "friend" : "Sam" } ] }, { "_id" : { "$numberInt" : "4" }, "userName" : "Taylor", "friend" : "Alex", "friendChain" : [ { "_id" : { "$numberInt" : "1" }, "userName" : "Sam" }, { "_id" : { "$numberInt" : "2" }, "userName" : "Alex", "friend" : "Sam" } ] }, { "_id" : { "$numberInt" : "5" }, "userName" : "Morgan", "friend" : "Jamie", "friendChain" : [ { "_id" : { "$numberInt" : "1" }, "userName" : "Sam" }, { "_id" : { "$numberInt" : "2" }, "userName" : "Alex", "friend" : "Sam" }, { "_id" : { "$numberInt" : "3" }, "userName" : "Jamie", "friend" : "Alex" } ] }, { "_id" : { "$numberInt" : "6" }, "userName" : "Jordan", "friend" : "Taylor", "friendChain" : [ { "_id" : { "$numberInt" : "1" }, "userName" : "Sam" }, { "_id" : { "$numberInt" : "2" }, "userName" : "Alex", "friend" : "Sam" }, { "_id" : { "$numberInt" : "4" }, "userName" : "Taylor", "friend" : "Alex" } ] } ] }
 { "_id" : { "$numberInt" : "2" }, "userName" : "Alex", "homePlace" : "P1", "inner" : [ { "_id" : { "$numberInt" : "1" }, "userName" : "Sam", "friendChain" : [  ] }, { "_id" : { "$numberInt" : "2" }, "userName" : "Alex", "friend" : "Sam", "friendChain" : [ { "_id" : { "$numberInt" : "1" }, "userName" : "Sam" } ] }, { "_id" : { "$numberInt" : "3" }, "userName" : "Jamie", "friend" : "Alex", "friendChain" : [ { "_id" : { "$numberInt" : "1" }, "userName" : "Sam" }, { "_id" : { "$numberInt" : "2" }, "userName" : "Alex", "friend" : "Sam" } ] }, { "_id" : { "$numberInt" : "4" }, "userName" : "Taylor", "friend" : "Alex", "friendChain" : [ { "_id" : { "$numberInt" : "1" }, "userName" : "Sam" }, { "_id" : { "$numberInt" : "2" }, "userName" : "Alex", "friend" : "Sam" } ] }, { "_id" : { "$numberInt" : "5" }, "userName" : "Morgan", "friend" : "Jamie", "friendChain" : [ { "_id" : { "$numberInt" : "1" }, "userName" : "Sam" }, { "_id" : { "$numberInt" : "2" }, "userName" : "Alex", "friend" : "Sam" }, { "_id" : { "$numberInt" : "3" }, "userName" : "Jamie", "friend" : "Alex" } ] }, { "_id" : { "$numberInt" : "6" }, "userName" : "Jordan", "friend" : "Taylor", "friendChain" : [ { "_id" : { "$numberInt" : "1" }, "userName" : "Sam" }, { "_id" : { "$numberInt" : "2" }, "userName" : "Alex", "friend" : "Sam" }, { "_id" : { "$numberInt" : "4" }, "userName" : "Taylor", "friend" : "Alex" } ] } ] }
 { "_id" : { "$numberInt" : "3" }, "userName" : "Jamie", "homePlace" : "P2", "inner" : [ { "_id" : { "$numberInt" : "1" }, "userName" : "Sam", "friendChain" : [  ] }, { "_id" : { "$numberInt" : "2" }, "userName" : "Alex", "friend" : "Sam", "friendChain" : [ { "_id" : { "$numberInt" : "1" }, "userName" : "Sam" } ] }, { "_id" : { "$numberInt" : "3" }, "userName" : "Jamie", "friend" : "Alex", "friendChain" : [ { "_id" : { "$numberInt" : "1" }, "userName" : "Sam" }, { "_id" : { "$numberInt" : "2" }, "userName" : "Alex", "friend" : "Sam" } ] }, { "_id" : { "$numberInt" : "4" }, "userName" : "Taylor", "friend" : "Alex", "friendChain" : [ { "_id" : { "$numberInt" : "1" }, "userName" : "Sam" }, { "_id" : { "$numberInt" : "2" }, "userName" : "Alex", "friend" : "Sam" } ] }, { "_id" : { "$numberInt" : "5" }, "userName" : "Morgan", "friend" : "Jamie", "friendChain" : [ { "_id" : { "$numberInt" : "1" }, "userName" : "Sam" }, { "_id" : { "$numberInt" : "2" }, "userName" : "Alex", "friend" : "Sam" }, { "_id" : { "$numberInt" : "3" }, "userName" : "Jamie", "friend" : "Alex" } ] }, { "_id" : { "$numberInt" : "6" }, "userName" : "Jordan", "friend" : "Taylor", "friendChain" : [ { "_id" : { "$numberInt" : "1" }, "userName" : "Sam" }, { "_id" : { "$numberInt" : "2" }, "userName" : "Alex", "friend" : "Sam" }, { "_id" : { "$numberInt" : "4" }, "userName" : "Taylor", "friend" : "Alex" } ] } ] }
(3 rows)

-- source can be sharded
SELECT documentdb_api.shard_collection('db', 'graphlookup_visitors', '{ "_id": "hashed" }', false);
 shard_collection 
---------------------------------------------------------------------
 
(1 row)

SELECT document FROM documentdb_api_catalog.bson_aggregation_pipeline('db',
    '{ "aggregate": "graphlookup_visitors", "pipeline": [ { "$graphLookup": { "from": "graphlookup_places", "startWith": "$homePlace", "connectFromField": "nearby", "connectToField": "placeCode", "as": "reachablePlaces", "maxDepth": 2 } } ]}');
                                                                                                                                                                                                                                                                     document                                                                                                                                                                                                                                                                     
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "2" }, "userName" : "Alex", "homePlace" : "P1", "reachablePlaces" : [ { "_id" : { "$numberInt" : "0" }, "placeCode" : "P1", "nearby" : [ "P2", "P3" ] }, { "_id" : { "$numberInt" : "1" }, "placeCode" : "P2", "nearby" : [ "P1", "P4" ] }, { "_id" : { "$numberInt" : "2" }, "placeCode" : "P3", "nearby" : [ "P1" ] }, { "_id" : { "$numberInt" : "3" }, "placeCode" : "P4", "nearby" : [ "P2", "P5" ] } ] }
 { "_id" : { "$numberInt" : "3" }, "userName" : "Jamie", "homePlace" : "P2", "reachablePlaces" : [ { "_id" : { "$numberInt" : "0" }, "placeCode" : "P1", "nearby" : [ "P2", "P3" ] }, { "_id" : { "$numberInt" : "1" }, "placeCode" : "P2", "nearby" : [ "P1", "P4" ] }, { "_id" : { "$numberInt" : "2" }, "placeCode" : "P3", "nearby" : [ "P1" ] }, { "_id" : { "$numberInt" : "3" }, "placeCode" : "P4", "nearby" : [ "P2", "P5" ] }, { "_id" : { "$numberInt" : "4" }, "placeCode" : "P5", "nearby" : [ "P4" ] } ] }
 { "_id" : { "$numberInt" : "1" }, "userName" : "Sam", "homePlace" : "P1", "reachablePlaces" : [ { "_id" : { "$numberInt" : "0" }, "placeCode" : "P1", "nearby" : [ "P2", "P3" ] }, { "_id" : { "$numberInt" : "1" }, "placeCode" : "P2", "nearby" : [ "P1", "P4" ] }, { "_id" : { "$numberInt" : "2" }, "placeCode" : "P3", "nearby" : [ "P1" ] }, { "_id" : { "$numberInt" : "3" }, "placeCode" : "P4", "nearby" : [ "P2", "P5" ] } ] }
(3 rows)

-- target cannot be sharded
SELECT documentdb_api.shard_collection('db', 'graphlookup_places', '{ "_id": "hashed" }', false);
 shard_collection 
---------------------------------------------------------------------
 
(1 row)

SELECT documentdb_api.shard_collection('db', 'graphlookup_socialgroup', '{ "_id": "hashed" }', false);
 shard_collection 
---------------------------------------------------------------------
 
(1 row)

SELECT document FROM documentdb_api_catalog.bson_aggregation_pipeline('db',
    '{ "aggregate": "graphlookup_socialgroup", "pipeline": [ { "$graphLookup": { "from": "graphlookup_socialgroup", "startWith": "$friend", "connectFromField": "friend", "connectToField": "userName", "as": "friendChain" } } ]}');
ERROR:  $graphLookup using 'from' on a sharded collection is currently unsupported
SELECT document FROM documentdb_api_catalog.bson_aggregation_pipeline('db',
    '{ "aggregate": "graphlookup_visitors", "pipeline": [ { "$graphLookup": { "from": "graphlookup_places", "startWith": "$homePlace", "connectFromField": "nearby", "connectToField": "placeCode", "as": "reachablePlaces", "maxDepth": 2 } } ]}');
ERROR:  $graphLookup using 'from' on a sharded collection is currently unsupported
-- Construct random numeric relationship between 1000 users and 5 interests
DO $$
DECLARE i int;
BEGIN
FOR i IN 1..1000 LOOP
PERFORM documentdb_api.insert_one('db', 'graphlookup_members', FORMAT('{ "_id": %s, "userName": %s, "links": [ %s, %s, %s ], "interests": [ %s, %s, %s ] }',  i, i, FLOOR(RANDOM() * 10) + 1 , FLOOR(RANDOM() * 10) + 1, FLOOR(RANDOM() * 10) + 1, FLOOR(RANDOM() * 5) + 1, FLOOR(RANDOM() * 5) + 1, FLOOR(RANDOM() * 5) + 1 )::documentdb_core.bson);
END LOOP;
END;
$$;
NOTICE:  creating collection
-- $graphlookup with restrictSearchWithMatch
SELECT documentdb_api_internal.create_indexes_non_concurrently('db', '{"createIndexes": "graphlookup_members", "indexes": [{"key": {"userName": 1, "interests": 1}, "name": "userName_1_interests_1" }]}', true);
                                                                                                   create_indexes_non_concurrently                                                                                                    
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "1" }, "numIndexesAfter" : { "$numberInt" : "2" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } }
(1 row)

\d+ documentdb_data.documents_9123;
                              Table "documentdb_data.documents_9123"
     Column      |  Type  | Collation | Nullable | Default | Storage  | Stats target | Description 
---------------------------------------------------------------------
 shard_key_value | bigint |           | not null |         | plain    |              | 
 object_id       | bson   |           | not null |         | extended |              | 
 document        | bson   |           | not null |         | extended |              | 
Indexes:
    "collection_pk_9123" PRIMARY KEY, btree (shard_key_value, object_id)
    "documents_rum_index_9127" documentdb_rum (document bson_rum_single_path_ops (path='userName', tl='2691'), document bson_rum_single_path_ops (path=interests, tl='2691'))
Check constraints:
    "shard_key_value_check" CHECK (shard_key_value = '9123'::bigint)

ANALYZE documentdb_data.documents_9123;
BEGIN;
SET enable_seqscan TO off;
EXPLAIN (VERBOSE ON, COSTS OFF) SELECT document FROM documentdb_api_catalog.bson_aggregation_pipeline('db',
    '{ "aggregate": "graphlookup_members", "pipeline": [ { "$match": { "userName": { "$lte": 50 } } }, { "$graphLookup": { "from": "graphlookup_members", "startWith": "$links", "connectFromField": "links", "connectToField": "userName", "as": "interestFriends", "restrictSearchWithMatch": { "interests" : { "$lte": 3 } } } }]}');

---------------------------------------------------------------------
 Custom Scan (Citus Adaptive)
   Output: remote_scan.document
   Task Count: 1
   Tasks Shown: All
   ->  Task
         Query: SELECT documentdb_api_internal.bson_dollar_merge_documents(document, "addFields", true) AS document FROM (SELECT "graphLookupBase_stage_1".document, COALESCE((SELECT COALESCE(documentdb_api_catalog.bson_array_agg(agg_stage_sub_1_0.document, 'interestFriends'::text), '{ "interestFriends" : [  ] }'::documentdb_core.bson) AS document FROM (WITH RECURSIVE "graphLookupRecurseStage" AS (SELECT "*TLOCRN*".document, "*TLOCRN*".depth, "*TLOCRN*"."baseDocId", false AS is_cycle, ARRAY[ROW("*TLOCRN*"."baseDocId")] AS path FROM (SELECT collection_0_2.document, '{ "depth" : { "$numberInt" : "0" } }'::documentdb_core.bson AS depth, documentdb_api_catalog.bson_expression_get(collection_0_2.document, '{ "_id" : "$_id" }'::documentdb_core.bson) AS "baseDocId" FROM documentdb_data.documents_9123_912079 collection_0_2 WHERE ((collection_0_2.document OPERATOR(documentdb_api_catalog.#<=) '{ "interests" : { "$numberInt" : "3" } }'::documentdb_core.bsonquery) AND (collection_0_2.shard_key_value OPERATOR(pg_catalog.=) '9123'::bigint) AND documentdb_api_internal.bson_dollar_lookup_join_filter(collection_0_2.document, "graphLookupBase_stage_1"."inputExpr", 'userName'::text))) "*TLOCRN*"(document, depth, "baseDocId") UNION ALL SELECT "*TROCRN*".document, "*TROCRN*".depth, "*TROCRN*"."baseDocId", CASE WHEN (ROW("*TROCRN*"."baseDocId") OPERATOR(pg_catalog.=) ANY ("*TROCRN*".path)) THEN true ELSE false END AS is_cycle, array_cat("*TROCRN*".path, ARRAY[ROW("*TROCRN*"."baseDocId")]) AS path FROM (SELECT collection_0_2.document, documentdb_api_catalog.bson_dollar_add_fields("lookupRecursive_stage_1".depth, '{ "depth" : { "$add" : [ "$depth", { "$numberInt" : "1" } ] } }'::documentdb_core.bson) AS depth, documentdb_api_catalog.bson_expression_get(collection_0_2.document, '{ "_id" : "$_id" }'::documentdb_core.bson) AS "baseDocId", "lookupRecursive_stage_1".is_cycle, "lookupRecursive_stage_1".path FROM documentdb_data.documents_9123_912079 collection_0_2, "graphLookupRecurseStage" "lookupRecursive_stage_1" WHERE ((collection_0_2.document OPERATOR(documentdb_api_catalog.#<=) '{ "interests" : { "$numberInt" : "3" } }'::documentdb_core.bsonquery) AND (collection_0_2.shard_key_value OPERATOR(pg_catalog.=) '9123'::bigint) AND documentdb_api_internal.bson_dollar_lookup_join_filter(collection_0_2.document, documentdb_api_internal.bson_expression_get("lookupRecursive_stage_1".document, '{ "userName" : { "$makeArray" : "$links" } }'::documentdb_core.bson, false, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson), 'userName'::text))) "*TROCRN*"(document, depth, "baseDocId", is_cycle, path) WHERE ("*TROCRN*".is_cycle OPERATOR(pg_catalog.<>) true)) SELECT DISTINCT ON ("graphLookup_stage_2"."baseDocId") "graphLookup_stage_2".document FROM "graphLookupRecurseStage" "graphLookup_stage_2" ORDER BY "graphLookup_stage_2"."baseDocId", "graphLookup_stage_2".depth) agg_stage_sub_1_0), '{ "interestFriends" : [  ] }'::documentdb_core.bson) AS "addFields" FROM (SELECT collection.document, documentdb_api_internal.bson_expression_get(collection.document, '{ "userName" : { "$makeArray" : "$links" } }'::documentdb_core.bson, false, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson) AS "inputExpr" FROM documentdb_data.documents_9123_912079 collection WHERE ((collection.document OPERATOR(documentdb_api_catalog.#<=) '{ "userName" : { "$numberInt" : "50" } }'::documentdb_core.bsonquery) AND (collection.shard_key_value OPERATOR(pg_catalog.=) '9123'::bigint))) "graphLookupBase_stage_1") "graphLookup_stage_1"
         Node: host=localhost port=58070 dbname=regression
         ->  Bitmap Heap Scan on documentdb_data.documents_9123_912079 collection
               Output: documentdb_api_internal.bson_dollar_merge_documents(collection.document, COALESCE((SubPlan 2), '{ "interestFriends" : [  ] }'::documentdb_core.bson), true)
               Recheck Cond: (collection.document OPERATOR(documentdb_api_catalog.@<=) '{ "userName" : { "$numberInt" : "50" } }'::documentdb_core.bson)
               ->  Bitmap Index Scan on "userName_1_interests_1"
                     Index Cond: (collection.document OPERATOR(documentdb_api_catalog.@<=) '{ "userName" : { "$numberInt" : "50" } }'::documentdb_core.bson)
               SubPlan 2
                 ->  Aggregate
                       Output: COALESCE(documentdb_api_catalog.bson_array_agg("graphLookup_stage_2".document, 'interestFriends'::text), '{ "interestFriends" : [  ] }'::documentdb_core.bson)
                       ->  Unique
                             Output: "graphLookup_stage_2".document, "graphLookup_stage_2"."baseDocId", "graphLookup_stage_2".depth
                             CTE graphLookupRecurseStage
                               ->  Recursive Union
                                     ->  Bitmap Heap Scan on documentdb_data.documents_9123_912079 collection_0_2
                                           Output: collection_0_2.document, '{ "depth" : { "$numberInt" : "0" } }'::documentdb_core.bson, documentdb_api_catalog.bson_expression_get(collection_0_2.document, '{ "_id" : "$_id" }'::documentdb_core.bson, false), false, ARRAY[ROW(documentdb_api_catalog.bson_expression_get(collection_0_2.document, '{ "_id" : "$_id" }'::documentdb_core.bson, false))]
                                           Recheck Cond: (collection_0_2.document OPERATOR(documentdb_api_catalog.@<=) '{ "interests" : { "$numberInt" : "3" } }'::documentdb_core.bson)
                                           Filter: documentdb_api_internal.bson_dollar_lookup_join_filter(collection_0_2.document, documentdb_api_internal.bson_expression_get(collection.document, '{ "userName" : { "$makeArray" : "$links" } }'::documentdb_core.bson, false, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson), 'userName'::text)
                                           ->  Bitmap Index Scan on "userName_1_interests_1"
                                                 Index Cond: ((collection_0_2.document OPERATOR(documentdb_api_catalog.@*=) documentdb_api_internal.bson_expression_get(collection.document, '{ "userName" : { "$makeArray" : "$links" } }'::documentdb_core.bson, false, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson)) AND (collection_0_2.document OPERATOR(documentdb_api_catalog.@<=) '{ "interests" : { "$numberInt" : "3" } }'::documentdb_core.bson))
                                     ->  Nested Loop
                                           Output: collection_0_2_1.document, documentdb_api_catalog.bson_dollar_add_fields("lookupRecursive_stage_1".depth, '{ "depth" : { "$add" : [ "$depth", { "$numberInt" : "1" } ] } }'::documentdb_core.bson), documentdb_api_catalog.bson_expression_get(collection_0_2_1.document, '{ "_id" : "$_id" }'::documentdb_core.bson, false), CASE WHEN (ROW(documentdb_api_catalog.bson_expression_get(collection_0_2_1.document, '{ "_id" : "$_id" }'::documentdb_core.bson, false)) = ANY ("lookupRecursive_stage_1".path)) THEN true ELSE false END, array_cat("lookupRecursive_stage_1".path, ARRAY[ROW(documentdb_api_catalog.bson_expression_get(collection_0_2_1.document, '{ "_id" : "$_id" }'::documentdb_core.bson, false))])
                                           Join Filter: documentdb_api_internal.bson_dollar_lookup_join_filter(collection_0_2_1.document, documentdb_api_internal.bson_expression_get("lookupRecursive_stage_1".document, '{ "userName" : { "$makeArray" : "$links" } }'::documentdb_core.bson, false, '{ "now" : NOW_SYS_VARIABLE }'::documentdb_core.bson), 'userName'::text)
                                           ->  WorkTable Scan on "graphLookupRecurseStage" "lookupRecursive_stage_1"
                                                 Output: "lookupRecursive_stage_1".document, "lookupRecursive_stage_1".depth, "lookupRecursive_stage_1"."baseDocId", "lookupRecursive_stage_1".is_cycle, "lookupRecursive_stage_1".path
                                                 Filter: (NOT "lookupRecursive_stage_1".is_cycle)
                                           ->  Materialize
                                                 Output: collection_0_2_1.document
                                                 ->  Bitmap Heap Scan on documentdb_data.documents_9123_912079 collection_0_2_1
                                                       Output: collection_0_2_1.document
                                                       Recheck Cond: (collection_0_2_1.document OPERATOR(documentdb_api_catalog.@<=) '{ "interests" : { "$numberInt" : "3" } }'::documentdb_core.bson)
                                                       ->  Bitmap Index Scan on "userName_1_interests_1"
                                                             Index Cond: (collection_0_2_1.document OPERATOR(documentdb_api_catalog.@<=) '{ "interests" : { "$numberInt" : "3" } }'::documentdb_core.bson)
                             ->  Sort
                                   Output: "graphLookup_stage_2".document, "graphLookup_stage_2"."baseDocId", "graphLookup_stage_2".depth
                                   Sort Key: "graphLookup_stage_2"."baseDocId", "graphLookup_stage_2".depth
                                   ->  CTE Scan on "graphLookupRecurseStage" "graphLookup_stage_2"
                                         Output: "graphLookup_stage_2".document, "graphLookup_stage_2"."baseDocId", "graphLookup_stage_2".depth
(43 rows)

ROLLBACK;
