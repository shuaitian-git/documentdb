SET search_path TO documentdb_core,documentdb_api,documentdb_api_catalog,documentdb_api_internal;
SET citus.next_shard_id TO 6900000;
SET documentdb.next_collection_id TO 6900;
SET documentdb.next_collection_index_id TO 6900;
-- $in operator
-- returns expected result
SELECT * FROM bson_dollar_project('{}', '{"result": { "$in": [1, [1, 2]]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : true }
(1 row)

SELECT * FROM bson_dollar_project('{"a": {}}', '{"result": { "$in": ["$a", [1, { }]]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : true }
(1 row)

SELECT * FROM bson_dollar_project('{"a": {}}', '{"result": { "$in": ["$a", [1, { "a": true}]]}}');
 bson_dollar_project  
---------------------------------------------------------------------
 { "result" : false }
(1 row)

SELECT * FROM bson_dollar_project('{"a": {"b": true}}', '{"result": { "$in": ["$a", [1, { "b": true}]]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : true }
(1 row)

SELECT * FROM bson_dollar_project('{"a": {"b": true}}', '{"result": { "$in": ["$a.b", [1, true]]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : true }
(1 row)

SELECT * FROM bson_dollar_project('{"a": {"b": true}}', '{"result": { "$in": ["$a.b", [null, false]]}}');
 bson_dollar_project  
---------------------------------------------------------------------
 { "result" : false }
(1 row)

SELECT * FROM bson_dollar_project('{"a": [1, 2]}', '{"result": { "$in": ["$a.b", [1, [1, 2], 2]]}}');
 bson_dollar_project  
---------------------------------------------------------------------
 { "result" : false }
(1 row)

SELECT * FROM bson_dollar_project('{"a": [1, 2]}', '{"result": { "$in": ["$a.b", [1, [1, 3], 2]]}}');
 bson_dollar_project  
---------------------------------------------------------------------
 { "result" : false }
(1 row)

SELECT * FROM bson_dollar_project('{"a": {"b": true}}', '{"result": { "$in": ["$a.b", []]}}');
 bson_dollar_project  
---------------------------------------------------------------------
 { "result" : false }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$in": [{"$numberDouble": "NaN"}, [1, {"$numberDouble": "NaN"}]]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : true }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$in": [{"$numberDouble": "NaN"}, [1, {"$numberDouble": "0.0"}]]}}');
 bson_dollar_project  
---------------------------------------------------------------------
 { "result" : false }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$in": [{"$numberDouble": "NaN"}, [1, {"$numberDouble": "Infinity"}]]}}');
 bson_dollar_project  
---------------------------------------------------------------------
 { "result" : false }
(1 row)

-- null should match mising paths and null
SELECT * FROM bson_dollar_project('{}', '{"result": { "$in": [null, ["$a", 2]]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : true }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$in": [null, [1, 2, 3, null]]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : true }
(1 row)

SELECT * FROM bson_dollar_project('{"a": {"b": null}}', '{"result": { "$in": [null, [1, 2, 3, "$a.b"]]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : true }
(1 row)

-- undefined expression as first shouldn't match null/undefined in array
SELECT * FROM bson_dollar_project('{"a": {"b": null}}', '{"result": { "$in": ["$z", [1, 2, 3, "$a.b"]]}}');
 bson_dollar_project  
---------------------------------------------------------------------
 { "result" : false }
(1 row)

SELECT * FROM bson_dollar_project('{"a": {"b": null}}', '{"result": { "$in": ["$z", [null]]}}');
 bson_dollar_project  
---------------------------------------------------------------------
 { "result" : false }
(1 row)

-- nested expressions in array should be evaluated
SELECT * FROM bson_dollar_project('{}', '{"result": { "$in": [3, [1, 2, {"$add": [1, 1, 1]}]]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : true }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$in": [3, [1, 2, {"$add": [1, 1, 3]}]]}}');
 bson_dollar_project  
---------------------------------------------------------------------
 { "result" : false }
(1 row)

SELECT * FROM bson_dollar_project('{"a": true, "b": [1, 2]}', '{"result": { "$in": ["$a", [1, 2, {"$isArray": "$b"}]]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : true }
(1 row)

SELECT * FROM bson_dollar_project('{"a": {}}', '{"result": { "$in": [{"$literal": "$a"}, [1, 2, {"$literal": "$a"}]]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : true }
(1 row)

-- second argument must be an array
SELECT * FROM bson_dollar_project('{}', '{"result": { "$in": [3, "$b"]}}');
ERROR:  Expected 'array' type for $in operator but found 'missing' type
SELECT * FROM bson_dollar_project('{}', '{"result": { "$in": [3, {"$undefined": true}]}}');
ERROR:  Expected 'array' type for $in operator but found 'undefined' type
SELECT * FROM bson_dollar_project('{}', '{"result": { "$in": [3, { }]}}');
ERROR:  Expected 'array' type for $in operator but found 'object' type
SELECT * FROM bson_dollar_project('{}', '{"result": { "$in": [3, "str"]}}');
ERROR:  Expected 'array' type for $in operator but found 'string' type
SELECT * FROM bson_dollar_project('{"a": true}', '{"result": { "$in": [3, "$a"]}}');
ERROR:  Expected 'array' type for $in operator but found 'bool' type
SELECT * FROM bson_dollar_project('{"a": 2}', '{"result": { "$in": [3, "$a"]}}');
ERROR:  Expected 'array' type for $in operator but found 'int' type
-- number of arguments should be 2
SELECT * FROM bson_dollar_project('{}', '{"result": { "$in": [3]}}');
ERROR:  The expression $in requires exactly 2 arguments, but 1 arguments were actually provided.
SELECT * FROM bson_dollar_project('{}', '{"result": { "$in": 2}}');
ERROR:  The expression $in requires exactly 2 arguments, but 1 arguments were actually provided.
SELECT * FROM bson_dollar_project('{}', '{"result": { "$in": [1, 2, 3, 4]}}');
ERROR:  The expression $in requires exactly 2 arguments, but 4 arguments were actually provided.
SELECT * FROM bson_dollar_project('{}', '{"result": { "$in": [1, 2, 3, 4, 6, 7, 8]}}');
ERROR:  The expression $in requires exactly 2 arguments, but 7 arguments were actually provided.
SELECT * FROM bson_dollar_project('{}', '{"result": { "$in": null}}');
ERROR:  The expression $in requires exactly 2 arguments, but 1 arguments were actually provided.
SELECT * FROM bson_dollar_project('{}', '{"result": { "$in": [{"$not": []}, 2, 3]}}');
ERROR:  The expression $in requires exactly 2 arguments, but 3 arguments were actually provided.
-- $size operator
-- returns expected result
SELECT * FROM bson_dollar_project('{}', '{"result": { "$size": [[1, 2]]}}');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "2" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$size": [[1, [1,2]]]}}');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "2" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$size": {"$literal": [1]}}}');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "1" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$size": [[]]}}');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "0" } }
(1 row)

SELECT * FROM bson_dollar_project('{"a": [1, 2, 3, 4]}', '{"result": { "$size": ["$a"]}}');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "4" } }
(1 row)

SELECT * FROM bson_dollar_project('{"a": [1, 2, 3, 4]}', '{"result": { "$size": "$a"}}');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "4" } }
(1 row)

-- should error if no array is passed in
SELECT * FROM bson_dollar_project('{}', '{"result": { "$size": [null]}}');
ERROR:  $size requires an array argument, but received a value of type: null
SELECT * FROM bson_dollar_project('{}', '{"result": { "$size": null}}');
ERROR:  $size requires an array argument, but received a value of type: null
SELECT * FROM bson_dollar_project('{}', '{"result": { "$size": "$b"}}');
ERROR:  $size requires an array argument, but received a value of type: missing
SELECT * FROM bson_dollar_project('{}', '{"result": { "$size": [{ }]}}');
ERROR:  $size requires an array argument, but received a value of type: object
SELECT * FROM bson_dollar_project('{}', '{"result": { "$size": [true]}}');
ERROR:  $size requires an array argument, but received a value of type: bool
-- should error if wrong number of args
SELECT * FROM bson_dollar_project('{}', '{"result": { "$size": [null, 2]}}');
ERROR:  The expression $size requires exactly 1 arguments, but 2 arguments were actually provided.
SELECT * FROM bson_dollar_project('{}', '{"result": { "$size": []}}');
ERROR:  The expression $size requires exactly 1 arguments, but 0 arguments were actually provided.
SELECT * FROM bson_dollar_project('{}', '{"result": { "$size": [{"$divide": [1, 0]}, 2]}}');
ERROR:  The expression $size requires exactly 1 arguments, but 2 arguments were actually provided.
-- should honor nested expression errors
SELECT * FROM bson_dollar_project('{}', '{"result": { "$size": [{"$divide": [1, 0]}]}}');
ERROR:  $divide by zero is not allowed
-- nested mongo evaluates expressions in array eventhough they are not needed for $size calculation
-- for error validation. 
SELECT * FROM bson_dollar_project('{}', '{"result": { "$size": [[{"$divide": [1, 0]}, 2]]}}');
ERROR:  $divide by zero is not allowed
-- $arrayElemAt
-- returns expected element positive idx
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [[1], 0]}}');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "1" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [[1, 2, 3, {"a": 5}], 0]}}');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "1" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [[1, 2, 3, {"a": 5}], 1]}}');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "2" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [[1, 2, 3, {"a": 5}], {"$numberLong": "1"}]}}');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "2" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [[1, 2, 3, {"a": 5}], {"$numberDecimal": "1.0"}]}}');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "2" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [[1, 2, 3, {"a": 5}], {"$numberDouble": "1.0"}]}}');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "2" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [[1, 2, 3, {"a": 5}], 2]}}');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "3" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [[1, 2, 3, {"a": 5}], 3]}}');
               bson_dollar_project               
---------------------------------------------------------------------
 { "result" : { "a" : { "$numberInt" : "5" } } }
(1 row)

SELECT * FROM bson_dollar_project('{"a": [1, 2, 3, 4]}', '{"result": { "$arrayElemAt": ["$a", 1]}}');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "2" } }
(1 row)

SELECT * FROM bson_dollar_project('{"a": [1, 100, 3, 4]}', '{"result": { "$arrayElemAt": [[{"$add": [{"$arrayElemAt": ["$a", 0]}, {"$arrayElemAt": ["$a", 1]}]}], 0]}}');
           bson_dollar_project           
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "101" } }
(1 row)

-- returns expected element negative idx
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [[1], -1]}}');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "1" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [[1, 2, 3, {"a": 5}], -1]}}');
               bson_dollar_project               
---------------------------------------------------------------------
 { "result" : { "a" : { "$numberInt" : "5" } } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [[1, 2, 3, {"a": 5}], -2]}}');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "3" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [[1, 2, 3, {"a": 5}], -3]}}');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "2" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [[1, 2, 3, {"a": 5}], -4]}}');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "1" } }
(1 row)

SELECT * FROM bson_dollar_project('{"a": [1, 2, 3, 4]}', '{"result": { "$arrayElemAt": ["$a", -4]}}');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "1" } }
(1 row)

SELECT * FROM bson_dollar_project('{"a": [1, 100, 3, 4]}', '{"result": { "$arrayElemAt": [[{"$add": [{"$arrayElemAt": ["$a", -4]}, {"$arrayElemAt": ["$a", -3]}]}], -1]}}');
           bson_dollar_project           
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "101" } }
(1 row)

-- returns no result idx out of bounds
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [[1], -2]}, "otherResult": {"$add": [1,2]}}');
            bson_dollar_project             
---------------------------------------------------------------------
 { "otherResult" : { "$numberInt" : "3" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [[1, 2, 3, {"a": 5}], -5]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [[1, 2, 3, {"a": 5}], -20]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [[1, 2, 3, {"a": 5}], -30]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [[1, 2, 3, {"a": 5}], -40]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { }
(1 row)

SELECT * FROM bson_dollar_project('{"a": [1, 2, 3, 4]}', '{"result": { "$arrayElemAt": ["$a", -60]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { }
(1 row)

SELECT * FROM bson_dollar_project('{"a": [1, 100, 3, 4]}', '{"result": { "$arrayElemAt": [[{"$add": [{"$arrayElemAt": ["$a", -4]}, {"$arrayElemAt": ["$a", -3]}]}], -70]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [[1], 1]}, "otherResult": {"$add": [1,2]}}');
            bson_dollar_project             
---------------------------------------------------------------------
 { "otherResult" : { "$numberInt" : "3" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [[1, 2, 3, {"a": 5}], 4]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [[1, 2, 3, {"a": 5}], 5]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [[1, 2, 3, {"a": 5}], 6]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [[1, 2, 3, {"a": 5}], 7]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { }
(1 row)

SELECT * FROM bson_dollar_project('{"a": [1, 2, 3, 4]}', '{"result": { "$arrayElemAt": ["$a", 8]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { }
(1 row)

SELECT * FROM bson_dollar_project('{"a": [1, 100, 3, 4]}', '{"result": { "$arrayElemAt": [[{"$add": [{"$arrayElemAt": ["$a", 0]}, {"$arrayElemAt": ["$a", 1]}]}], 9]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [[1, 2, 3, {"a": 5}], {"$numberDouble": "2147483647.0"}]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [[1, 2, 3, {"a": 5}], {"$numberDouble": "-2147483648.0"}]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [[1, 2, 3, {"a": 5}], {"$numberDecimal": "2147483647.0"}]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [[1, 2, 3, {"a": 5}], {"$numberDecimal": "-2147483648.0"}]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { }
(1 row)

-- should return null if array is null or undefined
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [null, -5]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : null }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": ["$a", -5]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : null }
(1 row)

-- should error if first arg is not array
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [{}, -5]}}');
ERROR:  $arrayElemAt's first argument must be an array, but is object
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": ["string", -5]}}');
ERROR:  $arrayElemAt's first argument must be an array, but is string
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [true, -5]}}');
ERROR:  $arrayElemAt's first argument must be an array, but is bool
-- should error if second arg is not a number
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [[7], {}]}}');
ERROR:  The second argument of $arrayElemAt must be a numeric type value, but it is object instead.
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [[7], true]}}');
ERROR:  The second argument of $arrayElemAt must be a numeric type value, but it is bool instead.
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [[7], [1, 2]]}}');
ERROR:  The second argument of $arrayElemAt must be a numeric type value, but it is array instead.
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [[7], "string"]}}');
ERROR:  The second argument of $arrayElemAt must be a numeric type value, but it is string instead.
-- should return null if second arg is null or undefined
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [[7], null]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : null }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [[7], "$a"]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : null }
(1 row)

-- should error if second arg is not representable as a 32-bit integer
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [[7], {"$numberLong": "2147483648"}]}}');
ERROR:  The second argument of $arrayElemAt must be a valid 32-bit integer value: 2147483648
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [[7], {"$numberLong": "-2147483649"}]}}');
ERROR:  The second argument of $arrayElemAt must be a valid 32-bit integer value: -2147483649
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [[7], {"$numberDouble": "1.1"}]}}');
ERROR:  The second argument of $arrayElemAt must be a valid 32-bit integer value: 1.1
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [[7], {"$numberDouble": "1.0003"}]}}');
ERROR:  The second argument of $arrayElemAt must be a valid 32-bit integer value: 1.0003
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [[1, 2, 3, {"a": 5}], {"$numberDouble": "2147483648.0"}]}}');
ERROR:  The second argument of $arrayElemAt must be a valid 32-bit integer value: 2.14748E+09
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [[1, 2, 3, {"a": 5}], {"$numberDouble": "-2147483649.0"}]}}');
ERROR:  The second argument of $arrayElemAt must be a valid 32-bit integer value: -2.14748E+09
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [[7], {"$numberDecimal": "2147483648.0"}]}}');
ERROR:  The second argument of $arrayElemAt must be a valid 32-bit integer value: 2147483648.0
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [[7], {"$numberDecimal": "-2147483649.0"}]}}');
ERROR:  The second argument of $arrayElemAt must be a valid 32-bit integer value: -2147483649.0
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [[7], {"$numberDecimal": "1.0003"}]}}');
ERROR:  The second argument of $arrayElemAt must be a valid 32-bit integer value: 1.0003
-- should honor nested expression errors even second arg is not a 32-bit integer or if the value is found (even if the index points to an expression that doesn't produce an error).
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [[{"$divide": [1, 0]}], {"$numberDecimal": "1.0003"}]}}');
ERROR:  $divide by zero is not allowed
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [[1, {"$divide": [1, 0]}], 0]}}');
ERROR:  $divide by zero is not allowed
-- should error if wrong number of args is provided
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [7]}}');
ERROR:  The expression $arrayElemAt requires exactly 2 arguments, but 1 arguments were actually provided.
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [[7]]}}');
ERROR:  The expression $arrayElemAt requires exactly 2 arguments, but 1 arguments were actually provided.
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayElemAt": [[7, {"$divide": [1, 0]}], {"$numberLong": "2147483648"}, 2]}}');
ERROR:  The expression $arrayElemAt requires exactly 2 arguments, but 3 arguments were actually provided.
-- $first operator
SELECT * FROM bson_dollar_project('{}', '{"result": { "$first": [[1]]}}');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "1" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$first": [[1, 2, 3, 4]]}}');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "1" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$first": [[{"$add": [2, 4, 6]}, 2, 3, 4]]}}');
          bson_dollar_project           
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "12" } }
(1 row)

SELECT * FROM bson_dollar_project('{"a": [100, 2, 3, 4]}', '{"result": { "$first": "$a"}}');
           bson_dollar_project           
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "100" } }
(1 row)

-- null or undefined array should return null
SELECT * FROM bson_dollar_project('{}', '{"result": { "$first": [null]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : null }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$first": ["$a"]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : null }
(1 row)

-- should error if no array is provided
SELECT * FROM bson_dollar_project('{}', '{"result": { "$first": [{}]}}');
ERROR:  The argument provided for $first must be of array type, yet it is actually object.
SELECT * FROM bson_dollar_project('{}', '{"result": { "$first": [true]}}');
ERROR:  The argument provided for $first must be of array type, yet it is actually bool.
SELECT * FROM bson_dollar_project('{}', '{"result": { "$first": [false]}}');
ERROR:  The argument provided for $first must be of array type, yet it is actually bool.
SELECT * FROM bson_dollar_project('{}', '{"result": { "$first": ["string"]}}');
ERROR:  The argument provided for $first must be of array type, yet it is actually string.
SELECT * FROM bson_dollar_project('{}', '{"result": { "$first": [1]}}');
ERROR:  The argument provided for $first must be of array type, yet it is actually int.
-- should error with wrong number of args
SELECT * FROM bson_dollar_project('{}', '{"result": { "$first": [1, 2, 3]}}');
ERROR:  The expression $first requires exactly 1 arguments, but 3 arguments were actually provided.
SELECT * FROM bson_dollar_project('{}', '{"result": { "$first": [[], 2]}}');
ERROR:  The expression $first requires exactly 1 arguments, but 2 arguments were actually provided.
SELECT * FROM bson_dollar_project('{}', '{"result": { "$first": []}}');
ERROR:  The expression $first requires exactly 1 arguments, but 0 arguments were actually provided.
SELECT * FROM bson_dollar_project('{}', '{"result": { "$first": [{"$divide": [1, 0]}, 2]}}');
ERROR:  The expression $first requires exactly 1 arguments, but 2 arguments were actually provided.
-- should honor nested expression errors
SELECT * FROM bson_dollar_project('{}', '{"result": { "$first": [[1, 2, 3, 4, {"$divide": [1, 0]}]]}}');
ERROR:  $divide by zero is not allowed
-- $last operator
SELECT * FROM bson_dollar_project('{}', '{"result": { "$last": [[1]]}}');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "1" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$last": [[1, 2, 3, 4]]}}');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "4" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$last": [[2, 3, 4, {"$add": [2, 4, 6]}]]}}');
          bson_dollar_project           
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "12" } }
(1 row)

SELECT * FROM bson_dollar_project('{"a": [100, 2, 3, 4]}', '{"result": { "$last": "$a"}}');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "4" } }
(1 row)

-- null or undefined array should return null
SELECT * FROM bson_dollar_project('{}', '{"result": { "$last": [null]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : null }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$last": ["$a"]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : null }
(1 row)

-- should error if no array is provided
SELECT * FROM bson_dollar_project('{}', '{"result": { "$last": [{}]}}');
ERROR:  The argument provided for $last must be of array type, yet it is actually object.
SELECT * FROM bson_dollar_project('{}', '{"result": { "$last": [true]}}');
ERROR:  The argument provided for $last must be of array type, yet it is actually bool.
SELECT * FROM bson_dollar_project('{}', '{"result": { "$last": [false]}}');
ERROR:  The argument provided for $last must be of array type, yet it is actually bool.
SELECT * FROM bson_dollar_project('{}', '{"result": { "$last": ["string"]}}');
ERROR:  The argument provided for $last must be of array type, yet it is actually string.
SELECT * FROM bson_dollar_project('{}', '{"result": { "$last": [1]}}');
ERROR:  The argument provided for $last must be of array type, yet it is actually int.
-- should error with wrong number of args
SELECT * FROM bson_dollar_project('{}', '{"result": { "$last": [1, 2, 3]}}');
ERROR:  The expression $last requires exactly 1 arguments, but 3 arguments were actually provided.
SELECT * FROM bson_dollar_project('{}', '{"result": { "$last": [[], 2]}}');
ERROR:  The expression $last requires exactly 1 arguments, but 2 arguments were actually provided.
SELECT * FROM bson_dollar_project('{}', '{"result": { "$last": []}}');
ERROR:  The expression $last requires exactly 1 arguments, but 0 arguments were actually provided.
SELECT * FROM bson_dollar_project('{}', '{"result": { "$last": [{"$divide": [1, 0]}, 2]}}');
ERROR:  The expression $last requires exactly 1 arguments, but 2 arguments were actually provided.
-- should honor nested expression errors
SELECT * FROM bson_dollar_project('{}', '{"result": { "$last": [[{"$divide": [1, 0]}, 1, 2, 3, 4]]}}');
ERROR:  $divide by zero is not allowed
-- $objectToArray: returns expected array
SELECT * FROM bson_dollar_project('{}', '{"result": { "$objectToArray": { }}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : [  ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$objectToArray": { "a": "$b" }}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : [  ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$objectToArray": { "a": 1 }}}');
                      bson_dollar_project                       
---------------------------------------------------------------------
 { "result" : [ { "k" : "a", "v" : { "$numberInt" : "1" } } ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$objectToArray": [{ "a": 1 }]}}');
                      bson_dollar_project                       
---------------------------------------------------------------------
 { "result" : [ { "k" : "a", "v" : { "$numberInt" : "1" } } ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$objectToArray": { "a": 1, "b": 2 }}}');
                                             bson_dollar_project                                             
---------------------------------------------------------------------
 { "result" : [ { "k" : "a", "v" : { "$numberInt" : "1" } }, { "k" : "b", "v" : { "$numberInt" : "2" } } ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$objectToArray": { "a": [1, {"b": 2}] }}}');
                                         bson_dollar_project                                          
---------------------------------------------------------------------
 { "result" : [ { "k" : "a", "v" : [ { "$numberInt" : "1" }, { "b" : { "$numberInt" : "2" } } ] } ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$objectToArray": { "a": {"b": { "c": {"d": "hello"}}}}}}');
                              bson_dollar_project                              
---------------------------------------------------------------------
 { "result" : [ { "k" : "a", "v" : { "b" : { "c" : { "d" : "hello" } } } } ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$objectToArray": { "a": 1, "b": {"$add": [1, 1]}}}}');
                                             bson_dollar_project                                             
---------------------------------------------------------------------
 { "result" : [ { "k" : "a", "v" : { "$numberInt" : "1" } }, { "k" : "b", "v" : { "$numberInt" : "2" } } ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$objectToArray": { "a": 1, "b": {"c": { "d": { "$add": [1, 1]}}}}}}');
                                                       bson_dollar_project                                                       
---------------------------------------------------------------------
 { "result" : [ { "k" : "a", "v" : { "$numberInt" : "1" } }, { "k" : "b", "v" : { "c" : { "d" : { "$numberInt" : "2" } } } } ] }
(1 row)

SELECT * FROM bson_dollar_project('{"a": {"b": {"c": 2}}}', '{"result": { "$objectToArray": { "a": "$a", "b": "$a.b", "c": "$a.b.c" }}}');
                                                                                  bson_dollar_project                                                                                   
---------------------------------------------------------------------
 { "result" : [ { "k" : "a", "v" : { "b" : { "c" : { "$numberInt" : "2" } } } }, { "k" : "b", "v" : { "c" : { "$numberInt" : "2" } } }, { "k" : "c", "v" : { "$numberInt" : "2" } } ] }
(1 row)

SELECT * FROM bson_dollar_project('{"a": {"b": {"c": 2}}}', '{"result": { "$objectToArray": "$a"}}');
                           bson_dollar_project                            
---------------------------------------------------------------------
 { "result" : [ { "k" : "b", "v" : { "c" : { "$numberInt" : "2" } } } ] }
(1 row)

-- $objectToArray: null or undefined returns null
SELECT * FROM bson_dollar_project('{}', '{"result": { "$objectToArray": null}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : null }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$objectToArray": "$a"}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : null }
(1 row)

SELECT * FROM bson_dollar_project('{"a": null}', '{"result": { "$objectToArray": "$a"}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : null }
(1 row)

SELECT * FROM bson_dollar_project('{"a": null}', '{"result": { "$objectToArray": {"$arrayElemAt": [[1], 5]}}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : null }
(1 row)

-- $objectToArray: expects document as input
SELECT * FROM bson_dollar_project('{}', '{"result": { "$objectToArray": [1]}}');
ERROR:  $objectToArray expression requires a document input, but received: int
SELECT * FROM bson_dollar_project('{}', '{"result": { "$objectToArray": 1}}');
ERROR:  $objectToArray expression requires a document input, but received: int
SELECT * FROM bson_dollar_project('{}', '{"result": { "$objectToArray": "string"}}');
ERROR:  $objectToArray expression requires a document input, but received: string
SELECT * FROM bson_dollar_project('{}', '{"result": { "$objectToArray": [true]}}');
ERROR:  $objectToArray expression requires a document input, but received: bool
SELECT * FROM bson_dollar_project('{}', '{"result": { "$objectToArray": false}}');
ERROR:  $objectToArray expression requires a document input, but received: bool
SELECT * FROM bson_dollar_project('{}', '{"result": { "$objectToArray": {"$add": [1, 2]}}}');
ERROR:  $objectToArray expression requires a document input, but received: int
-- $objectToArray: accepts exactly 1 arg
SELECT * FROM bson_dollar_project('{}', '{"result": { "$objectToArray": []}}');
ERROR:  The expression $objectToArray requires exactly 1 arguments, but 0 arguments were actually provided.
SELECT * FROM bson_dollar_project('{}', '{"result": { "$objectToArray": [1, 2]}}');
ERROR:  The expression $objectToArray requires exactly 1 arguments, but 2 arguments were actually provided.
SELECT * FROM bson_dollar_project('{}', '{"result": { "$objectToArray": [{}, {}]}}');
ERROR:  The expression $objectToArray requires exactly 1 arguments, but 2 arguments were actually provided.
-- $arrayToObject: returns expected object
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayToObject": [[]]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : {  } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayToObject": [[["a", "value"]]]}}');
       bson_dollar_project        
---------------------------------------------------------------------
 { "result" : { "a" : "value" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayToObject": [[["a", 1], ["b", {"$add": [1, 1]}]]]}}');
                              bson_dollar_project                              
---------------------------------------------------------------------
 { "result" : { "a" : { "$numberInt" : "1" }, "b" : { "$numberInt" : "2" } } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayToObject": [[["a.b.c", true]]]}}');
        bson_dollar_project        
---------------------------------------------------------------------
 { "result" : { "a.b.c" : true } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayToObject": [[["a.b.c", [1, 2, 3]]]]}}');
                                           bson_dollar_project                                           
---------------------------------------------------------------------
 { "result" : { "a.b.c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayToObject": { "$literal": [[ "key", "value"], [ "qty", 25 ]]}}}');
                         bson_dollar_project                         
---------------------------------------------------------------------
 { "result" : { "key" : "value", "qty" : { "$numberInt" : "25" } } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayToObject": [[{"k": "a", "v": "value"}]]}}');
       bson_dollar_project        
---------------------------------------------------------------------
 { "result" : { "a" : "value" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayToObject": [[{"k": "a", "v": 1}, {"k": "b", "v": {"$add": [1, 1]}}]]}}');
                              bson_dollar_project                              
---------------------------------------------------------------------
 { "result" : { "a" : { "$numberInt" : "1" }, "b" : { "$numberInt" : "2" } } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayToObject": [[{"k": "a.b.c", "v": true}]]}}');
        bson_dollar_project        
---------------------------------------------------------------------
 { "result" : { "a.b.c" : true } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayToObject": [[{"k": "a.b.c", "v": [1, 2, 3]}]]}}');
                                           bson_dollar_project                                           
---------------------------------------------------------------------
 { "result" : { "a.b.c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayToObject": { "$literal": [{ "k": "item", "v": "abc123"}, { "k": "qty", "v": 25 }]}}}');
                          bson_dollar_project                          
---------------------------------------------------------------------
 { "result" : { "item" : "abc123", "qty" : { "$numberInt" : "25" } } }
(1 row)

-- $arrayToObject: deduplicates if multiple keys are the same
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayToObject": [[["a", "value"], ["a", "value2"], ["a", "final value"]]]}}');
          bson_dollar_project           
---------------------------------------------------------------------
 { "result" : { "a" : "final value" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayToObject": [[["a", "value"], ["b", "value2"], ["a", "final value"], ["b", true], ["c", 1], ["c", 2]]]}}');
                               bson_dollar_project                                
---------------------------------------------------------------------
 { "result" : { "a" : "final value", "b" : true, "c" : { "$numberInt" : "2" } } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayToObject": [[{"k": "a", "v": "value"}, {"k": "b", "v": "value2"}, {"k": "c", "v": "value3"}, {"k": "c", "v": "final"}, {"k": "b", "v": "final"}, {"k": "a", "v": "final"}]]}}');
                      bson_dollar_project                       
---------------------------------------------------------------------
 { "result" : { "a" : "final", "b" : "final", "c" : "final" } }
(1 row)

-- $arrayToObject: null or undefined returns null
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayToObject": ["$a"]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : null }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayToObject": [null]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : null }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayToObject": [{"$objectToArray": [null]}]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : null }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayToObject": [{"$objectToArray": {"$arrayElemAt": [[1], -2]}}]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : null }
(1 row)

-- $objectToArray -> $arrayToObject roundtrips
SELECT * FROM bson_dollar_project('{}', '{"result": {"$arrayToObject": { "$objectToArray": { "a": 1 }}}}');
               bson_dollar_project               
---------------------------------------------------------------------
 { "result" : { "a" : { "$numberInt" : "1" } } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$arrayToObject": { "$objectToArray": { "a": 1, "b": {"$add": [1, 1]}}}}}');
                              bson_dollar_project                              
---------------------------------------------------------------------
 { "result" : { "a" : { "$numberInt" : "1" }, "b" : { "$numberInt" : "2" } } }
(1 row)

-- $arrayToObject: accepts exactly 1 arg
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayToObject": []}}');
ERROR:  The expression $arrayToObject requires exactly 1 arguments, but 0 arguments were actually provided.
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayToObject": [1, 2, 3]}}');
ERROR:  The expression $arrayToObject requires exactly 1 arguments, but 3 arguments were actually provided.
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayToObject": [1, 2]}}');
ERROR:  The expression $arrayToObject requires exactly 1 arguments, but 2 arguments were actually provided.
-- $arrayToObject: input must be array
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayToObject": [1]}}');
ERROR:  $arrayToObject needs an array as input, but a different type was provided: int
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayToObject": [{}]}}');
ERROR:  $arrayToObject needs an array as input, but a different type was provided: object
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayToObject": [{"$add": [1, 1]}]}}');
ERROR:  $arrayToObject needs an array as input, but a different type was provided: int
-- $arrayToObject: requires consistent input all objects or all arrays
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayToObject": [[["a", "value"], {"k": "b", "v": 1}]]}}');
ERROR:  $arrayToObject needs a consistent format of input. All elements must either be arrays or objects exclusively. An array was identified initially, but the following element was found: object
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayToObject": [[{"k": "b", "v": 1}, ["a", "value"]]]}}');
ERROR:  $arrayToObject needs a consistent format of input; every element should be either entirely arrays or entirely objects. An object was initially detected, but the following element was found: array
-- $arrayToObject: key must be string
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayToObject": [[[1, "value"]]]}}');
ERROR:  Expected 'string' type for $arrayToObject entries but found 'int' type
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayToObject": [[["a", "value"], ["b", "foo"], [2, 2]]]}}');
ERROR:  Expected 'string' type for $arrayToObject entries but found 'int' type
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayToObject": [[{"k": 1, "v": "value"}]]}}');
ERROR:  $arrayToObject needs an input object containing keys 'k' and 'v', with 'k' specifically required to be a string type. Detected type: int
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayToObject": [[{"k": "a", "v": "value"}, {"k": "b", "v": "value"}, {"k": 1, "v": "value"}]]}}');
ERROR:  $arrayToObject needs an input object containing keys 'k' and 'v', with 'k' specifically required to be a string type. Detected type: int
-- $arrayToObject: array input format must be of length 2
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayToObject": [[["value"]]]}}');
ERROR:  $arrayToObject needs an array containing exactly two elements, but received one with size: 1
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayToObject": [[["a", "value"], ["b", "v"], [1, 2, 3]]]}}');
ERROR:  $arrayToObject needs an array containing exactly two elements, but received one with size: 3
-- $arrayToObject: document input format must have 2 fields
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayToObject": [[{"k": "a"}]]}}');
ERROR:  $arrayToObject needs object keys named 'k' and 'v', but an incorrect number of keys was detected: 1
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayToObject": [[{"k": "a", "v": "b"}, {"k": "a"}]]}}');
ERROR:  $arrayToObject needs object keys named 'k' and 'v', but an incorrect number of keys was detected: 1
-- $arrayToObject: document input must have a 'k' and a 'v' field
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayToObject": [[{"k": "a", "foo": "value"}]]}}');
ERROR:  $arrayToObject needs an object containing both 'k' and 'v' keys, but one or both of these required keys are missing from: { "k" : "a", "foo" : "value" }
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayToObject": [[{"k": "a", "v": "b"}, {"v": "a", "blah": "k"}]]}}');
ERROR:  $arrayToObject needs an object containing both 'k' and 'v' keys, but one or both of these required keys are missing from: { "v" : "a", "blah" : "k" }
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayToObject": [[{"k": "a", "v": "b"}, {"v": "a", "k": "k"}, {"blah": 1, "foo": 2}]]}}');
ERROR:  $arrayToObject needs an object containing both 'k' and 'v' keys, but one or both of these required keys are missing from: { "blah" : 1, "foo" : 2 }
-- $arrayToObject: key must not contain embedded null byte
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayToObject": [[{"k": "fo\u0000os", "v": "value"}]]}}');
ERROR:  Key field must not include an embedded null byte
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayToObject": [[{"k": "fo\u0000", "v": "value"}]]}}');
ERROR:  Key field must not include an embedded null byte
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayToObject": [[["\u0000", "value"]]]}}');
ERROR:  Key field must not include an embedded null byte
SELECT * FROM bson_dollar_project('{}', '{"result": { "$arrayToObject": [[["\u0000hello", "value"]]]}}');
ERROR:  Key field must not include an embedded null byte
--$slice Operator
SELECT * FROM bson_dollar_project('{}', '{"result": { "$slice": [[1,2,3],1,1]}}');
            bson_dollar_project            
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "2" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{"a": [1,2,3]}', '{"result": { "$slice": ["$a",1,1]}}');
            bson_dollar_project            
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "2" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$slice": [[1,2,{"$add":[1,2,3]}],{"$add":[0,1]},1]}}');
            bson_dollar_project            
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "2" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{"a": [1,2,3]}', '{"result": { "$slice": ["$b",1,1]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : null }
(1 row)

--$slice with positive array field input
select bson_dollar_project('{"_id":"1", "a" : 1  }', '{"slicedArray" : { "$slice" : [[1,2,3,4,5],1,2]} }');
                                 bson_dollar_project                                 
---------------------------------------------------------------------
 { "_id" : "1", "slicedArray" : [ { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }
(1 row)

select bson_dollar_project('{"_id":"1", "a" : [1,2,3,4,5]  }', '{"a" : { "$slice" : ["$a",1,2]} }');
                            bson_dollar_project                            
---------------------------------------------------------------------
 { "_id" : "1", "a" : [ { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }
(1 row)

select bson_dollar_project('{"_id":"1", "a" : [1,2,3,4,5]  }', '{"a" : { "$slice" : ["$a",10,10]} }');
     bson_dollar_project     
---------------------------------------------------------------------
 { "_id" : "1", "a" : [  ] }
(1 row)

select bson_dollar_project('{"_id":"1", "a" : [1,2,3,4,5]  }', '{"a" : { "$slice" : ["$a",2,10]} }');
                                        bson_dollar_project                                        
---------------------------------------------------------------------
 { "_id" : "1", "a" : [ { "$numberInt" : "3" }, { "$numberInt" : "4" }, { "$numberInt" : "5" } ] }
(1 row)

select bson_dollar_project('{"_id":"1", "a" : [1,2,3,4,5]  }', '{"a" : { "$slice" : ["$a",10,2]} }');
     bson_dollar_project     
---------------------------------------------------------------------
 { "_id" : "1", "a" : [  ] }
(1 row)

select bson_dollar_project('{"_id":"1", "a" : [1,2,3,4,5]  }', '{"a" : { "$slice" : ["$a",10]} }');
                                                                bson_dollar_project                                                                
---------------------------------------------------------------------
 { "_id" : "1", "a" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" }, { "$numberInt" : "4" }, { "$numberInt" : "5" } ] }
(1 row)

select bson_dollar_project('{"_id":"1", "a" : [1,2,3,4,5]  }', '{"a" : { "$slice" : ["$b",10]} }');
     bson_dollar_project     
---------------------------------------------------------------------
 { "_id" : "1", "a" : null }
(1 row)

--$slice with Negative array field input or Zero
select bson_dollar_project('{"_id":"1", "a" : 1  }', '{"slicedArray" : { "$slice" : [[1,2,3,4,5],-1,2]} }');
                     bson_dollar_project                     
---------------------------------------------------------------------
 { "_id" : "1", "slicedArray" : [ { "$numberInt" : "5" } ] }
(1 row)

select bson_dollar_project('{"_id":"1", "a" : 1  }', '{"slicedArray" : { "$slice" : [[1,2,3,4,5],-2]} }');
                                 bson_dollar_project                                 
---------------------------------------------------------------------
 { "_id" : "1", "slicedArray" : [ { "$numberInt" : "4" }, { "$numberInt" : "5" } ] }
(1 row)

select bson_dollar_project('{"_id":"1", "a" : 1  }', '{"slicedArray" : { "$slice" : ["$a",-1,2]} }');
ERROR:  The first parameter provided to $slice must be an array, but a value of type int was received instead.
select bson_dollar_project('{"_id":"1", "a" : 1  }', '{"slicedArray" : { "$slice" : [[1,2,3,4,5],1,0]} }');
ERROR:  The third argument provided to the $slice operator must have a positive value: 0
select bson_dollar_project('{"_id":"1", "a" : 1  }', '{"slicedArray" : { "$slice" : [[1,2,3,4,5],2,-1]} }');
ERROR:  The third argument provided to the $slice operator must have a positive value: -1
select bson_dollar_project('{"_id":"1", "a" : [1,2,3,4,5]  }', '{"a" : { "$slice" : ["$b",-1,2]} }');
     bson_dollar_project     
---------------------------------------------------------------------
 { "_id" : "1", "a" : null }
(1 row)

--$slice with other expression
select bson_dollar_project('{"_id":"1", "a" : [1,2,3,4,5]  }', '{"a" : { "$slice" : [[{"$add": [1,2,3]},2,3,4,5],1,2]} }');
                            bson_dollar_project                            
---------------------------------------------------------------------
 { "_id" : "1", "a" : [ { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }
(1 row)

select bson_dollar_project('{"_id":"1", "a" : [1,2,3,4,5]  }', '{"a" : { "$slice" : [[{"$add": [1,2,3]},2,3,4,5],{"$multiply":[1,2]},3]} }');
                                        bson_dollar_project                                        
---------------------------------------------------------------------
 { "_id" : "1", "a" : [ { "$numberInt" : "3" }, { "$numberInt" : "4" }, { "$numberInt" : "5" } ] }
(1 row)

select bson_dollar_project('{"_id":"1", "a" : [1,2,3,4,5]  }', '{"a" : { "$slice" : ["$a",-2,2]} }');
                            bson_dollar_project                            
---------------------------------------------------------------------
 { "_id" : "1", "a" : [ { "$numberInt" : "4" }, { "$numberInt" : "5" } ] }
(1 row)

--$slice with inclusion or exclusion spec
select bson_dollar_project('{"_id":"1", "a" : [1,2,3], "b" : 22, "c" : [1,2,3], "d":4  }', '{"a" : { "$slice" : ["$a",1,2]} , "b":1, "d":1}');
                                                          bson_dollar_project                                                           
---------------------------------------------------------------------
 { "_id" : "1", "a" : [ { "$numberInt" : "2" }, { "$numberInt" : "3" } ], "b" : { "$numberInt" : "22" }, "d" : { "$numberInt" : "4" } }
(1 row)

select bson_dollar_project('{"_id":"1", "a" : [1,2,3], "b" : 22, "c" : [1,2,3], "d":4  }', '{"a" : { "$slice" : ["$a",1,2]} , "b":0}');
ERROR:  exclusion cannot be applied to field b within the inclusion projection.
select bson_dollar_project('{"_id":"1", "a" : [1,2,3], "b" : 22, "c" : [1,2,3], "d":4  }', '{"a" : { "$slice" : ["$a",1,2]} , "b":0, "d":1}');
ERROR:  exclusion cannot be applied to field b within the inclusion projection.
--$slice has NULL input
select bson_dollar_project('{"_id":"1", "a" : [1,2,3,4,5]  }', '{"a" : { "$slice" : [null,1,2]} }');
     bson_dollar_project     
---------------------------------------------------------------------
 { "_id" : "1", "a" : null }
(1 row)

select bson_dollar_project('{"_id":"1", "a" : [1,2,3,4,5]  }', '{"a" : { "$slice" : [[1,2,3],null,2]} }');
     bson_dollar_project     
---------------------------------------------------------------------
 { "_id" : "1", "a" : null }
(1 row)

select bson_dollar_project('{"_id":"1", "a" : [1,2,3,4,5]  }', '{"a" : { "$slice" : [[1,2,3],1,null]} }');
     bson_dollar_project     
---------------------------------------------------------------------
 { "_id" : "1", "a" : null }
(1 row)

--Invalid Input Negative cases $slice projection
select bson_dollar_project('{"_id":"1", "a" : [1,2,3] }', '{"a" : { "$slice" : "str"}}');
ERROR:  The expression $slice requires no fewer than 2 arguments and no more than 3 arguments, but 1 arguments were actually provided.
select bson_dollar_project('{"_id":"1", "a" : [1,2,3] }', '{"a" : { "$slice" : ["hello",1,2]}}');
ERROR:  The first parameter provided to $slice must be an array, but a value of type string was received instead.
select bson_dollar_project('{"_id":"1", "a" : [1,2,3] }', '{"a" : { "$slice" : ["$a","str",2]}}');
ERROR:  The Second argument for the $slice needs to be a numeric value; however, it is currently of type: string
select bson_dollar_project('{"_id":"1", "a" : [1,2,3] }', '{"a" : { "$slice" : ["$a",1,"str"]}}');
ERROR:  The Third argument for the $slice needs to be a numeric value; however, it is currently of type: string
select bson_dollar_project('{"_id":"1", "a" : [1,2,3] }', '{"a" : { "$slice" : ["$a",1,1.02]}}');
ERROR:  The Third value provided to the $slice operator cannot be expressed within the limits of a 32-bit integer: 1.02
select bson_dollar_project('{"_id":"1", "a" : [1,2,3] }', '{"a" : { "$slice" : ["$a",1,-1]}}');
ERROR:  The third argument provided to the $slice operator must have a positive value: -1
select bson_dollar_project('{"_id":"1", "a" : [1,2,3] }', '{"a" : { "$slice" : ["$a",1,0]}}');
ERROR:  The third argument provided to the $slice operator must have a positive value: 0
select bson_dollar_project('{"_id":"1", "a" : [1,2,3] }', '{"a" : { "$slice" : ["$a"]}}');
ERROR:  The expression $slice requires no fewer than 2 arguments and no more than 3 arguments, but 1 arguments were actually provided.
select bson_dollar_project('{"_id":"1", "a" : [1,2,3] }', '{"a" : { "$slice" : ["$a",1,2,4]}}');
ERROR:  The expression $slice requires no fewer than 2 arguments and no more than 3 arguments, but 4 arguments were actually provided.
select bson_dollar_project('{"_id":"1", "a" : [1,2,3] }', '{"a" : { "$slice" : ["$a",{ "$numberDecimal" : "NaN"},{ "$numberDecimal" : "NaN"}]}}');
ERROR:  The Second value provided to the $slice operator cannot be expressed within the limits of a 32-bit integer: NaN
select bson_dollar_project('{"_id":"1", "a" : [1,2,3] }', '{"a" : { "$slice" : ["$a",{ "$numberDecimal" : "NaN"},{ "$numberDecimal" : "Infinity"}]}}');
ERROR:  The Second value provided to the $slice operator cannot be expressed within the limits of a 32-bit integer: NaN
select bson_dollar_project('{"_id":"1", "a" : [1,2,3] }', '{"a" : { "$slice" : ["$a",{ "$numberDecimal" : "Infinity"},{ "$numberDecimal" : "NaN"}]}}');
ERROR:  The Second value provided to the $slice operator cannot be expressed within the limits of a 32-bit integer: Infinity
select bson_dollar_project('{"_id":"1", "a" : [1,2,3] }', '{"a" : { "$slice" : ["$a",{ "$numberDecimal" : "Infinity"},{ "$numberDecimal" : "Infinity"}]}}');
ERROR:  The Second value provided to the $slice operator cannot be expressed within the limits of a 32-bit integer: Infinity
-- $concatArrays operator
SELECT * FROM bson_dollar_project('{}', '{"result": { "$concatArrays": []}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : [  ] }
(1 row)

SELECT * FROM bson_dollar_project('{"array": []}', '{"result": { "$concatArrays": [[], "$array"]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : [  ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$concatArrays": [["1","2"]]}}');
     bson_dollar_project     
---------------------------------------------------------------------
 { "result" : [ "1", "2" ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$concatArrays": [["1","2"], ["3", "4"]]}}');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : [ "1", "2", "3", "4" ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$concatArrays": [["1","2"], ["3", "4", "2"]]}}');
            bson_dollar_project             
---------------------------------------------------------------------
 { "result" : [ "1", "2", "3", "4", "2" ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$concatArrays": [["1","2"], ["3", "4", "2", ["nested", "array"]]]}}');
                        bson_dollar_project                        
---------------------------------------------------------------------
 { "result" : [ "1", "2", "3", "4", "2", [ "nested", "array" ] ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$concatArrays": [["1","2"], ["3", "4", "2", ["nested", "array", ["more", "nested", "array"]]]]}}');
                                       bson_dollar_project                                        
---------------------------------------------------------------------
 { "result" : [ "1", "2", "3", "4", "2", [ "nested", "array", [ "more", "nested", "array" ] ] ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$concatArrays": [[{"$add": [1, 1]}, [{"$add": [1,2]}]]]}}');
                          bson_dollar_project                          
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "2" }, [ { "$numberInt" : "3" } ] ] }
(1 row)

SELECT * FROM bson_dollar_project('{"a": {"b": ["1","2"], "c": ["3", "4"]}}', '{"result": { "$concatArrays": ["$a.b", "$a.c"]}}');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : [ "1", "2", "3", "4" ] }
(1 row)

-- $concatArrays the indexes are preserved and we can query the result via array index keys.
WITH r1 AS (SELECT bson_dollar_project('{"doc": {"foo": "value"}, "array": ["first", "second"]}', '{"result": {"$concatArrays": [["$doc"], "$array"]}}') as result) SELECT * FROM r1 WHERE result @= '{"result.2": "second"}';
                          result                           
---------------------------------------------------------------------
 { "result" : [ { "foo" : "value" }, "first", "second" ] }
(1 row)

WITH r1 AS (SELECT bson_dollar_project('{"doc": {"foo": "value"}, "array": ["first", "second"]}', '{"result": {"$concatArrays": [["$doc"], "$array"]}}') as result) SELECT * FROM r1 WHERE result @= '{"result.0": {"foo": "value"}}';
                          result                           
---------------------------------------------------------------------
 { "result" : [ { "foo" : "value" }, "first", "second" ] }
(1 row)

WITH r1 AS (SELECT bson_dollar_project('{}', '{"result": {"$concatArrays": [["0", "1"], ["2", "3", "4", "5"]]}}') as result) SELECT * FROM r1 WHERE result @= '{"result.0": "0"}';
                     result                      
---------------------------------------------------------------------
 { "result" : [ "0", "1", "2", "3", "4", "5" ] }
(1 row)

WITH r1 AS (SELECT bson_dollar_project('{}', '{"result": {"$concatArrays": [["0", "1"], ["2", "3", "4", "5"]]}}') as result) SELECT * FROM r1 WHERE result @= '{"result.4": "4"}';
                     result                      
---------------------------------------------------------------------
 { "result" : [ "0", "1", "2", "3", "4", "5" ] }
(1 row)

-- $concatArrays null/undefined argument should result in null. Nested nulls, should just be nulls in the final array
SELECT * FROM bson_dollar_project('{}', '{"result": { "$concatArrays": [null]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : null }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$concatArrays": ["$undef"]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : null }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$concatArrays": "$undef"}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : null }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$concatArrays": [["1","2"], null, ["3", "4"]]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : null }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$concatArrays": [["1","2"], ["3", "4"], null]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : null }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$concatArrays": [["1","2"], ["3", "4", null]]}}');
             bson_dollar_project             
---------------------------------------------------------------------
 { "result" : [ "1", "2", "3", "4", null ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$concatArrays": [["1","2"], ["3", "4", "$undef"]]}}');
             bson_dollar_project             
---------------------------------------------------------------------
 { "result" : [ "1", "2", "3", "4", null ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$concatArrays": [["1","2"], "$undef", ["3", "4", "$undef"]]}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : null }
(1 row)

SELECT * FROM bson_dollar_project('{"doc": {"foo": "string"}, "array": ["first", "second", null]}', '{"result": { "$concatArrays": [["$doc"], "$array"]}}');
                       bson_dollar_project                        
---------------------------------------------------------------------
 { "result" : [ { "foo" : "string" }, "first", "second", null ] }
(1 row)

-- $concatArrays error when arguments are not an array
SELECT * FROM bson_dollar_project('{"a": {"b": "1"}}', '{"result": { "$concatArrays": "$a"}}');
ERROR:  $concatArrays requires array inputs, but a value of type object was provided
SELECT * FROM bson_dollar_project('{"a": {"b": "1"}}', '{"result": { "$concatArrays": ["$a"]}}');
ERROR:  $concatArrays requires array inputs, but a value of type object was provided
SELECT * FROM bson_dollar_project('{}', '{"result": { "$concatArrays": [[1], {"a": "1"}]}}');
ERROR:  $concatArrays requires array inputs, but a value of type object was provided
SELECT * FROM bson_dollar_project('{}', '{"result": { "$concatArrays": [true]}}');
ERROR:  $concatArrays requires array inputs, but a value of type bool was provided
SELECT * FROM bson_dollar_project('{}', '{"result": { "$concatArrays": ["string"]}}');
ERROR:  $concatArrays requires array inputs, but a value of type string was provided
-- $filter simple cond
SELECT * FROM bson_dollar_project('{"a": [1, 2]}', '{"result": {"$filter": {"input": "$a", "cond": true}} }');
                        bson_dollar_project                        
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{"a": [1, 2]}', '{"result": {"$filter": {"input": "$a", "cond": false}} }');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : [  ] }
(1 row)

SELECT * FROM bson_dollar_project('{"a": [1, 2]}', '{"result": {"$filter": {"input": "$a", "cond": null}} }');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : [  ] }
(1 row)

SELECT * FROM bson_dollar_project('{"a": [1, 2]}', '{"result": {"$filter": {"input": "$a", "cond": 1}} }');
                        bson_dollar_project                        
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{"a": [1, 2]}', '{"result": {"$filter": {"input": "$a", "cond": 0}} }');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : [  ] }
(1 row)

-- $filter use cond with expression and reference variable for each element
SELECT * FROM bson_dollar_project('{"a": [1, 2, 3, 4, 5, 6]}', '{"result": {"$filter": {"input": "$a", "cond": {"$gt": ["$$this", 3]}}} }');
                                    bson_dollar_project                                    
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "4" }, { "$numberInt" : "5" }, { "$numberInt" : "6" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{"a": [1, 2, 3, 4, 5, 6]}', '{"result": {"$filter": {"input": "$a", "cond": {"$lt": ["$$this", 4]}}} }');
                                    bson_dollar_project                                    
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{"a": []}', '{"result": {"$filter": {"input": "$a", "cond": {"$lt": ["$$this", 4]}}} }');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : [  ] }
(1 row)

SELECT * FROM bson_dollar_project('{"a": {"$undefined": true}}', '{"result": {"$filter": {"input": "$a", "cond": {"$lt": ["$$this", 4]}}} }');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : null }
(1 row)

SELECT * FROM bson_dollar_project('{"a": null}', '{"result": {"$filter": {"input": "$a", "cond": {"$lt": ["$$this", 4]}}} }');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : null }
(1 row)

SELECT * FROM bson_dollar_project('{"a": null}', '{"result": {"$filter": {"input": "$undefinedPath", "cond": {"$lt": ["$$this", 4]}}} }');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : null }
(1 row)

SELECT * FROM bson_dollar_project('{"a": ["foo", "baz", null, "var", null, null, "blah"]}', '{"result": {"$filter": {"input": "$a", "cond": {"$ne": ["$$this", null]}}} }');
              bson_dollar_project               
---------------------------------------------------------------------
 { "result" : [ "foo", "baz", "var", "blah" ] }
(1 row)

SELECT * FROM bson_dollar_project('{"a": ["foo", "baz", null, "var", null, null, "blah"]}', '{"result": {"$filter": {"input": "$a", "cond": {"$ne": ["$$dummy", null]}, "as": "dummy"}}}');
              bson_dollar_project               
---------------------------------------------------------------------
 { "result" : [ "foo", "baz", "var", "blah" ] }
(1 row)

-- $filter reference variable with dotted expression
SELECT * FROM bson_dollar_project('{"a": [{"first": "foo", "second": "bar"}, {"first": "baz", "second": null}]}', '{"result": {"$filter": {"input": "$a", "cond": {"$ne": ["$$this.second", null]}}} }');
                   bson_dollar_project                    
---------------------------------------------------------------------
 { "result" : [ { "first" : "foo", "second" : "bar" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{"a": [{"first": "foo", "second": "bar"}, {"first": "baz", "second": null}]}', '{"result": {"$filter": {"input": "$a", "cond": {"$ne": ["$$dummy.second", null]}, "as": "dummy"}}}');
                   bson_dollar_project                    
---------------------------------------------------------------------
 { "result" : [ { "first" : "foo", "second" : "bar" } ] }
(1 row)

-- $filter with limit
SELECT * FROM bson_dollar_project('{"a": [1, 2]}', '{"result": {"$filter": {"input": "$a", "cond": true, "limit": 1}} }');
            bson_dollar_project            
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "1" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{"a": [1, 2]}', '{"result": {"$filter": {"input": "$a", "cond": true, "limit": {"$numberLong": "1"}}} }');
            bson_dollar_project            
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "1" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{"a": [1, 2]}', '{"result": {"$filter": {"input": "$a", "cond": true, "limit": {"$numberDecimal": "5.00000"}}} }');
                        bson_dollar_project                        
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{"a": [1, 2]}', '{"result": {"$filter": {"input": "$a", "cond": true, "limit": {"$numberDouble": "1.0"}}} }');
            bson_dollar_project            
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "1" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{"a": [1, 2]}', '{"result": {"$filter": {"input": "$a", "cond": true, "limit": null}} }');
                        bson_dollar_project                        
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{"a": [1, 2]}', '{"result": {"$filter": {"input": "$a", "cond": true, "limit": "$undefinedPath"}} }');
                        bson_dollar_project                        
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{"a": [1, 2]}', '{"result": {"$filter": {"input": "$a", "cond": true, "limit": 5}} }');
                        bson_dollar_project                        
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{"a": ["foo", "baz", null, "var", null, null, "blah"]}', '{"result": {"$filter": {"input": "$a", "cond": {"$ne": ["$$this", null]}, "limit": 4}} }');
              bson_dollar_project               
---------------------------------------------------------------------
 { "result" : [ "foo", "baz", "var", "blah" ] }
(1 row)

-- $filter with nested filter and clashing variable names
SELECT * FROM bson_dollar_project('{"a": [[-100, 10, 20, 30, 40, 8000]]}', '{"result": {"$filter": {"input": "$a", "limit": 2, "cond": {"$filter": {"input": "$$this", "limit": 3, "cond": {"$gt": [{"$add": [0, "$$this"]}, 3]}}}}}}');
                                                                               bson_dollar_project                                                                               
---------------------------------------------------------------------
 { "result" : [ [ { "$numberInt" : "-100" }, { "$numberInt" : "10" }, { "$numberInt" : "20" }, { "$numberInt" : "30" }, { "$numberInt" : "40" }, { "$numberInt" : "8000" } ] ] }
(1 row)

SELECT * FROM bson_dollar_project('{"a": [[-100, 10, 20, 30, 40, 8000]]}', '{"result": {"$filter": {"input": "$a", "limit": 2, "cond": {"$filter": {"input": "$$this", "limit": 3, "cond": {"$gt": [{"$add": [0, "$$number"]}, 3]}, "as": "number"}}}}}');
                                                                               bson_dollar_project                                                                               
---------------------------------------------------------------------
 { "result" : [ [ { "$numberInt" : "-100" }, { "$numberInt" : "10" }, { "$numberInt" : "20" }, { "$numberInt" : "30" }, { "$numberInt" : "40" }, { "$numberInt" : "8000" } ] ] }
(1 row)

SELECT * FROM bson_dollar_project('{"a": [[-100, 10, 20, 30, 40, 8000]]}', '{"result": {"$filter": {"input": "$a", "limit": 2, "as": "number", "cond": {"$filter": {"input": "$$number", "limit": 3, "cond": {"$gt": [{"$add": [0, "$$number"]}, 3]}, "as": "number"}}}}}');
                                                                               bson_dollar_project                                                                               
---------------------------------------------------------------------
 { "result" : [ [ { "$numberInt" : "-100" }, { "$numberInt" : "10" }, { "$numberInt" : "20" }, { "$numberInt" : "30" }, { "$numberInt" : "40" }, { "$numberInt" : "8000" } ] ] }
(1 row)

-- $filter with $and/$or shouldn't fail when if condition is met before error in nested expression
SELECT * FROM bson_dollar_project('{"a": [-1,-2,-3,-4]}', '{"result": {"$filter": {"input": "$a", "cond": {"$or": [{"$lt": ["$$this", 0]}, {"$ln": "$$this"}]}}}}');
                                                  bson_dollar_project                                                  
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "-1" }, { "$numberInt" : "-2" }, { "$numberInt" : "-3" }, { "$numberInt" : "-4" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{"a": [-1,-2,-3,-4]}', '{"result": {"$filter": {"input": "$a", "cond": {"$and": [{"$gt": ["$$this", 0]}, {"$ln": "$$this"}]}}}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : [  ] }
(1 row)

-- $filter, arg must be an object
SELECT * FROM bson_dollar_project('{"a": {}}', '{"result": {"$filter": "$a"}}');
ERROR:  $filter can accept only an object type as its valid argument
SELECT * FROM bson_dollar_project('{"a": {}}', '{"result": {"$filter": true}}');
ERROR:  $filter can accept only an object type as its valid argument
SELECT * FROM bson_dollar_project('{"a": {}}', '{"result": {"$filter": []}}');
ERROR:  $filter can accept only an object type as its valid argument
-- $filter, object should have cond and input, as/limit are optional, any other path is invalid
SELECT * FROM bson_dollar_project('{"a": [-1,-2,-3,-4]}', '{"result": {"$filter": {"input": "$a"}}}');
ERROR:  The 'cond' parameter required by the $filter operator is missing
SELECT * FROM bson_dollar_project('{"a": [-1,-2,-3,-4]}', '{"result": {"$filter": {"cond": true}}}');
ERROR:  'Input' parameter is missing for $filter
SELECT * FROM bson_dollar_project('{"a": [-1,-2,-3,-4]}', '{"result": {"$filter": {"input": "$a", "cond": true, "sort": false}}}');
ERROR:  Parameter not recognized in $filter: sort
-- $filter, input should be an array
SELECT * FROM bson_dollar_project('{"a": { }}', '{"result": {"$filter": {"input": "$a", "cond": true}}}');
ERROR:  Expected 'array' type as input to $filter but found 'object' type
SELECT * FROM bson_dollar_project('{"a": { }}', '{"result": {"$filter": {"input": "a", "cond": true}}}');
ERROR:  Expected 'array' type as input to $filter but found 'string' type
SELECT * FROM bson_dollar_project('{"a": { }}', '{"result": {"$filter": {"input": true, "cond": true}}}');
ERROR:  Expected 'array' type as input to $filter but found 'bool' type
-- $filter, as variable name should be valid
-- invalid
SELECT * FROM bson_dollar_project('{"a": []}', '{"result": {"$filter": {"input": "$a", "cond": true, "as": "_element"}}}');
ERROR:  The variable name '_element' begins with a character that is not valid for user-defined variables
SELECT * FROM bson_dollar_project('{"a": []}', '{"result": {"$filter": {"input": "$a", "cond": true, "as": "1element"}}}');
ERROR:  The variable name '1element' begins with a character that is not valid for user-defined variables
SELECT * FROM bson_dollar_project('{"a": []}', '{"result": {"$filter": {"input": "$a", "cond": true, "as": "Element"}}}');
ERROR:  The variable name 'Element' begins with a character that is not valid for user-defined variables
SELECT * FROM bson_dollar_project('{"a": []}', '{"result": {"$filter": {"input": "$a", "cond": true, "as": "el@ement"}}}');
ERROR:  The variable name 'el@ement' contains an invalid character '@'.
SELECT * FROM bson_dollar_project('{"a": []}', '{"result": {"$filter": {"input": "$a", "cond": true, "as": "el-ement"}}}');
ERROR:  The variable name 'el-ement' contains an invalid character '-'.
SELECT * FROM bson_dollar_project('{"a": []}', '{"result": {"$filter": {"input": "$a", "cond": true, "as": ""}}}');
ERROR:  Variable names cannot be left empty
SELECT * FROM bson_dollar_project('{"a": []}', '{"result": {"$filter": {"input": "$a", "cond": true, "as": null}}}');
ERROR:  Variable names cannot be left empty
SELECT * FROM bson_dollar_project('{"a": []}', '{"result": {"$filter": {"input": "$a", "cond": true, "as": true}}}');
ERROR:  Variable names cannot be left empty
-- valid
SELECT * FROM bson_dollar_project('{"a": []}', '{"result": {"$filter": {"input": "$a", "cond": true, "as": "element1"}}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : [  ] }
(1 row)

SELECT * FROM bson_dollar_project('{"a": []}', '{"result": {"$filter": {"input": "$a", "cond": true, "as": "el_ement1"}}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : [  ] }
(1 row)

SELECT * FROM bson_dollar_project('{"a": []}', '{"result": {"$filter": {"input": "$a", "cond": true, "as": "eLEMEnt"}}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : [  ] }
(1 row)

-- $filter, limit must be representable as a 32bit integer and > 0
SELECT * FROM bson_dollar_project('{"a": [1, 2]}', '{"result": {"$filter": {"input": "$a", "cond": true, "limit": {"$numberDouble": "1.1"}}} }');
ERROR:  Operator $filter requires the limit to be specified as a 32-bit integer value: 1.1
SELECT * FROM bson_dollar_project('{"a": [1, 2]}', '{"result": {"$filter": {"input": "$a", "cond": true, "limit": {"$numberDecimal": "1.1"}}} }');
ERROR:  Operator $filter requires the limit to be specified as a 32-bit integer value: 1.1
SELECT * FROM bson_dollar_project('{"a": [1, 2]}', '{"result": {"$filter": {"input": "$a", "cond": true, "limit": {"$numberLong": "2147483648"}}} }');
ERROR:  Operator $filter requires the limit to be specified as a 32-bit integer value: 2147483648
SELECT * FROM bson_dollar_project('{"a": [1, 2]}', '{"result": {"$filter": {"input": "$a", "cond": true, "limit": {"$numberDouble": "2147483648.0"}}} }');
ERROR:  Operator $filter requires the limit to be specified as a 32-bit integer value: 2.14748E+09
SELECT * FROM bson_dollar_project('{"a": [1, 2]}', '{"result": {"$filter": {"input": "$a", "cond": true, "limit": {"$numberDouble": "0.0"}}} }');
ERROR:  $filter: limit value must be strictly greater than zero: 0
SELECT * FROM bson_dollar_project('{"a": [1, 2]}', '{"result": {"$filter": {"input": "$a", "cond": true, "limit": {"$numberDouble": "-1.0"}}} }');
ERROR:  $filter: limit value must be strictly greater than zero: -1
SELECT * FROM bson_dollar_project('{"a": [1, 2]}', '{"result": {"$filter": {"input": "$a", "cond": true, "limit": -100}} }');
ERROR:  $filter: limit value must be strictly greater than zero: -100
-- $filter, undefined variable
SELECT * FROM bson_dollar_project('{"a": [1, 2, 3, 4, 5, 6]}', '{"result": {"$filter": {"input": "$a", "as":"element", "cond": {"$gt": ["$$this", 3]}}} }');
ERROR:  Attempting to use an undefined variable: this
SELECT * FROM bson_dollar_project('{"a": [1, 2, 3, 4, 5, 6]}', '{"result": {"$filter": {"input": "$a", "cond": {"$gt": ["$$element", 3]}}} }');
ERROR:  Attempting to use an undefined variable: element
SELECT * FROM bson_dollar_project('{"a": [1, 2, 3, 4, 5, 6]}', '{"result": {"$filter": {"input": "$a", "cond": {"$gt": ["$$this", "$$filterValue"]}}} }');
ERROR:  Attempting to use an undefined variable: filterValue
SELECT * FROM bson_dollar_project('{"a": [1, 2, 3, 4, 5, 6]}', '{"result": {"$filter": {"input": "$a", "cond": {"$gt": ["$$this", "$$filterValue.name.last"]}}} }');
ERROR:  Attempting to use an undefined variable: filterValue
-- $firstN, operator
SELECT * FROM bson_dollar_project('{}', '{"result": { "$firstN": {"input": [1,2,3,45,12,null,"asdhkas",12890.8912,{"$numberDecimal": "223.234823904823904823041212233"},{"$date": { "$numberLong" : "0" }},"\ud0008"], "n":3} }}');
                                    bson_dollar_project                                    
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$firstN": {"input": [1,2,3,45,12,null,"asdhkas",12890.8912,{"$numberDecimal": "223.234823904823904823041212233"},{"$date": { "$numberLong" : "0" }},"\ud0008"], "n":1} }}');
            bson_dollar_project            
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "1" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$firstN": {"input": [1,2,3,45,12,null,"asdhkas",12890.8912,{"$numberDecimal": "223.234823904823904823041212233"},{"$date": { "$numberLong" : "0" }},"\ud0008"], "n":11} }}');
                                                                                                                                                 bson_dollar_project                                                                                                                                                 
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" }, { "$numberInt" : "45" }, { "$numberInt" : "12" }, null, "asdhkas", { "$numberDouble" : "12890.891200000000026" }, { "$numberDecimal" : "223.234823904823904823041212233" }, { "$date" : { "$numberLong" : "0" } }, "퀀8" ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$firstN": {"input": [1,2,3,45,12,null,"asdhkas",12890.8912,{"$numberDecimal": "223.234823904823904823041212233"},{"$date": { "$numberLong" : "0" }},"\ud0008"], "n":100} }}');
                                                                                                                                                 bson_dollar_project                                                                                                                                                 
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" }, { "$numberInt" : "45" }, { "$numberInt" : "12" }, null, "asdhkas", { "$numberDouble" : "12890.891200000000026" }, { "$numberDecimal" : "223.234823904823904823041212233" }, { "$date" : { "$numberLong" : "0" } }, "퀀8" ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$firstN": {"input": [], "n":100} }}');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : [  ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$firstN": {"input": [1,2,3,4], "n":3.000000} }}');
                                    bson_dollar_project                                    
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$firstN": {"input": [1,2,3,4], "n":{"$numberDecimal": "2.000000"}} }}');
                        bson_dollar_project                        
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$firstN": {"input": [1,2,3,4], "n": {"$numberDecimal": "9223372036854775807"} } }}');
                                                bson_dollar_project                                                
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" }, { "$numberInt" : "4" } ] }
(1 row)

-- $firstN, operator with docs in db 
select documentdb_api.insert_one('db','dollarfirstN','{"a":[1,2,3] , "_id":1}');
NOTICE:  creating collection
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

select documentdb_api.insert_one('db','dollarfirstN','{"a":[42,67] , "_id":2}');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

select documentdb_api.insert_one('db','dollarfirstN','{"a":[] , "_id":3}');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

select documentdb_api.insert_one('db','dollarfirstN','{"a":[1,2,3,45,12,null,"asdhkas",12890.8912,{"$numberDecimal": "223.234823904823904823041212233"},{"$date": { "$numberLong" : "0" }},"\ud0008"] , "_id":4}');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

select bson_dollar_project(document, '{"result": { "$firstN": {"input": "$a", "n":3} }}') from documentdb_api.collection('db','dollarfirstN');
                                                    bson_dollar_project                                                    
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "result" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }
 { "_id" : { "$numberInt" : "2" }, "result" : [ { "$numberInt" : "42" }, { "$numberInt" : "67" } ] }
 { "_id" : { "$numberInt" : "3" }, "result" : [  ] }
 { "_id" : { "$numberInt" : "4" }, "result" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }
(4 rows)

-- $firstN , operator with docs in db and invalid path
select documentdb_api.insert_one('db','dollarFirstN','{"b":[] , "_id":5}');
NOTICE:  creating collection
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

select bson_dollar_project(document, '{"result": { "$firstN": {"input": "$a", "n":3} }}') from documentdb_api.collection('db','dollarFirstN');
ERROR:  Expected 'array' type as input
select bson_dollar_project(document, '{"result": { "$firstN": {"input": "$a", "n":"abc"} }}') from documentdb_api.collection('db','dollarFirstN');
ERROR:  Expected 'integer' type for 'n' field but found '"abc"' type
--$firstN, operator invalid input
SELECT * FROM bson_dollar_project('{}', '{"result": { "$firstN": {"input": true, "n":3} }}');
ERROR:  Expected 'array' type as input
SELECT * FROM bson_dollar_project('{}', '{"result": { "$firstN": {"input": 5, "n":3} }}');
ERROR:  Expected 'array' type as input
SELECT * FROM bson_dollar_project('{}', '{"result": { "$firstN": {"input": "abcvde", "n":3} }}');
ERROR:  Expected 'array' type as input
SELECT * FROM bson_dollar_project('{}', '{"result": { "$firstN": {"input": 4.56, "n":3} }}');
ERROR:  Expected 'array' type as input
SELECT * FROM bson_dollar_project('{}', '{"result": { "$firstN": true }}');
ERROR:  specification must be defined as an object, but the provided input was $firstN :true
SELECT * FROM bson_dollar_project('{}', '{"result": { "$firstN": "ayush_test_name" }}');
ERROR:  specification must be defined as an object, but the provided input was $firstN :"ayush_test_name"
--$firstN, operator invalid n
SELECT * FROM bson_dollar_project('{}', '{"result": { "$firstN": {"input": [1,2,3,4], "n":"3"} }}');
ERROR:  Expected 'integer' type for 'n' field but found '"3"' type
SELECT * FROM bson_dollar_project('{}', '{"result": { "$firstN": {"input": [1,2,3,4], "n":0} }}');
ERROR:  The value of 'n' must be strictly greater than 0, but the current value is 0
SELECT * FROM bson_dollar_project('{}', '{"result": { "$firstN": {"input": [1,2,3,4], "n":-1} }}');
ERROR:  The value of 'n' must be strictly greater than 0, but the current value is -1
SELECT * FROM bson_dollar_project('{}', '{"result": { "$firstN": {"input": [1,2,3,4], "n":3.124} }}');
ERROR:  Expected 'integer' type for 'n' field but found 'double' type for value '3.124'
SELECT * FROM bson_dollar_project('{}', '{"result": { "$firstN": {"input": [1,2,3,4], "n": {"$numberDecimal": "9223372036854775808"} } }}');
ERROR:  Expected 'integer' type for 'n' field but found 'decimal' type for value '9223372036854775808'
SELECT * FROM bson_dollar_project('{}', '{"result": { "$firstN": {"input": [1,2,3,4], "n": {"$numberDecimal": "0"} } }}');
ERROR:  The value of 'n' must be strictly greater than 0, but the current value is 0
-- $lastN, operator with docs in db 
select documentdb_api.insert_one('db','dollarLastN','{"a":[1,2,3] , "_id":1}');
NOTICE:  creating collection
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

select documentdb_api.insert_one('db','dollarLastN','{"a":[42,67] , "_id":2}');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

select documentdb_api.insert_one('db','dollarLastN','{"a":[] , "_id":3}');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

select documentdb_api.insert_one('db','dollarLastN','{"a":[1,2,3,45,12,null,"asdhkas",12890.8912,{"$numberDecimal": "223.234823904823904823041212233"},{"$date": { "$numberLong" : "0" }},"\ud0008"] , "_id":4}');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

select bson_dollar_project(document, '{"result": { "$lastN": {"input": "$a", "n":3} }}') from documentdb_api.collection('db','dollarLastN');
                                                                    bson_dollar_project                                                                    
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "result" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }
 { "_id" : { "$numberInt" : "2" }, "result" : [ { "$numberInt" : "42" }, { "$numberInt" : "67" } ] }
 { "_id" : { "$numberInt" : "3" }, "result" : [  ] }
 { "_id" : { "$numberInt" : "4" }, "result" : [ { "$numberDecimal" : "223.234823904823904823041212233" }, { "$date" : { "$numberLong" : "0" } }, "퀀8" ] }
(4 rows)

-- $lastN , operator with docs in db and invalid path
select documentdb_api.insert_one('db','dollarLastN','{"b":[] , "_id":5}');
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

select bson_dollar_project(document, '{"result": { "$lastN": {"input": "$a", "n":3} }}') from documentdb_api.collection('db','dollarLastN');
ERROR:  Expected 'array' type as input
select bson_dollar_project(document, '{"result": { "$lastN": {"input": "$a", "n":"abc"} }}') from documentdb_api.collection('db','dollarLastN');
ERROR:  Expected 'integer' type for 'n' field but found '"abc"' type
--$firstN, operator missing or extra args
SELECT * FROM bson_dollar_project('{}', '{"result": { "$firstN": {"input": [1,2,3,4]} }}');
ERROR:  $firstN requires an 'n' field
SELECT * FROM bson_dollar_project('{}', '{"result": { "$firstN": {"n": 5} }}');
ERROR:  $firstN needs to have an 'input' field
SELECT * FROM bson_dollar_project('{}', '{"result": { "$firstN": {"n": 5, "input": [1,2,3], "abc":1} }}');
ERROR:  $firstN encountered an unrecognized argument value: abc
-- $lastN, operator
SELECT * FROM bson_dollar_project('{}', '{"result": { "$lastN": {"input": [1,2,3,45,12,null,"asdhkas",12890.8912,{"$numberDecimal": "223.234823904823904823041212233"},{"$date": { "$numberLong" : "0" }},"\ud0008"], "n":3} }}');
                                                    bson_dollar_project                                                    
---------------------------------------------------------------------
 { "result" : [ { "$numberDecimal" : "223.234823904823904823041212233" }, { "$date" : { "$numberLong" : "0" } }, "퀀8" ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$lastN": {"input": [1,2,3,45,12,null,"asdhkas",12890.8912,{"$numberDecimal": "223.234823904823904823041212233"},{"$date": { "$numberLong" : "0" }},"\ud0008"], "n":1} }}');
   bson_dollar_project    
---------------------------------------------------------------------
 { "result" : [ "퀀8" ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$lastN": {"input": [1,2,3,45,12,null,"asdhkas",12890.8912,{"$numberDecimal": "223.234823904823904823041212233"},{"$date": { "$numberLong" : "0" }},"\ud0008"], "n":11} }}');
                                                                                                                                                 bson_dollar_project                                                                                                                                                 
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" }, { "$numberInt" : "45" }, { "$numberInt" : "12" }, null, "asdhkas", { "$numberDouble" : "12890.891200000000026" }, { "$numberDecimal" : "223.234823904823904823041212233" }, { "$date" : { "$numberLong" : "0" } }, "퀀8" ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$lastN": {"input": [1,2,3,45,12,null,"asdhkas",12890.8912,{"$numberDecimal": "223.234823904823904823041212233"},{"$date": { "$numberLong" : "0" }},"\ud0008"], "n":100} }}');
                                                                                                                                                 bson_dollar_project                                                                                                                                                 
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" }, { "$numberInt" : "45" }, { "$numberInt" : "12" }, null, "asdhkas", { "$numberDouble" : "12890.891200000000026" }, { "$numberDecimal" : "223.234823904823904823041212233" }, { "$date" : { "$numberLong" : "0" } }, "퀀8" ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$lastN": {"input": [], "n":100} }}');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : [  ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$lastN": {"input": [1,2,3,4], "n":3.000000} }}');
                                    bson_dollar_project                                    
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "2" }, { "$numberInt" : "3" }, { "$numberInt" : "4" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$lastN": {"input": [1,2,3,4], "n":{"$numberDecimal": "2.000000"}} }}');
                        bson_dollar_project                        
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "3" }, { "$numberInt" : "4" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$lastN": {"input": [1,2,3,4], "n": {"$numberDecimal": "9223372036854775807"} } }}');
                                                bson_dollar_project                                                
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" }, { "$numberInt" : "4" } ] }
(1 row)

--$lastN, operator invalid input
SELECT * FROM bson_dollar_project('{}', '{"result": { "$lastN": {"input": true, "n":3} }}');
ERROR:  Expected 'array' type as input
SELECT * FROM bson_dollar_project('{}', '{"result": { "$lastN": {"input": 5, "n":3} }}');
ERROR:  Expected 'array' type as input
SELECT * FROM bson_dollar_project('{}', '{"result": { "$lastN": {"input": "abcvde", "n":3} }}');
ERROR:  Expected 'array' type as input
SELECT * FROM bson_dollar_project('{}', '{"result": { "$lastN": {"input": 4.56, "n":3} }}');
ERROR:  Expected 'array' type as input
SELECT * FROM bson_dollar_project('{}', '{"result": { "$lastN": true }}');
ERROR:  specification must be defined as an object, but the provided input was $lastN :true
SELECT * FROM bson_dollar_project('{}', '{"result": { "$lastN": "ayush_test_name" }}');
ERROR:  specification must be defined as an object, but the provided input was $lastN :"ayush_test_name"
--$lastN, operator invalid n
SELECT * FROM bson_dollar_project('{}', '{"result": { "$lastN": {"input": [1,2,3,4], "n":"3"} }}');
ERROR:  Expected 'integer' type for 'n' field but found '"3"' type
SELECT * FROM bson_dollar_project('{}', '{"result": { "$lastN": {"input": [1,2,3,4], "n":0} }}');
ERROR:  The value of 'n' must be strictly greater than 0, but the current value is 0
SELECT * FROM bson_dollar_project('{}', '{"result": { "$lastN": {"input": [1,2,3,4], "n":-1} }}');
ERROR:  The value of 'n' must be strictly greater than 0, but the current value is -1
SELECT * FROM bson_dollar_project('{}', '{"result": { "$lastN": {"input": [1,2,3,4], "n":3.124} }}');
ERROR:  Expected 'integer' type for 'n' field but found 'double' type for value '3.124'
SELECT * FROM bson_dollar_project('{}', '{"result": { "$lastN": {"input": [1,2,3,4], "n": {"$numberDecimal": "9223372036854775808"} } }}');
ERROR:  Expected 'integer' type for 'n' field but found 'decimal' type for value '9223372036854775808'
SELECT * FROM bson_dollar_project('{}', '{"result": { "$lastN": {"input": [1,2,3,4], "n": {"$numberDecimal": "0"} } }}');
ERROR:  The value of 'n' must be strictly greater than 0, but the current value is 0
--$lastN, operator missing or extra args
SELECT * FROM bson_dollar_project('{}', '{"result": { "$lastN": {"input": [1,2,3,4]} }}');
ERROR:  $lastN requires an 'n' field
SELECT * FROM bson_dollar_project('{}', '{"result": { "$lastN": {"n": 5} }}');
ERROR:  $lastN needs to have an 'input' field
SELECT * FROM bson_dollar_project('{}', '{"result": { "$lastN": {"n": 5, "input": [1,2,3], "abc":1} }}');
ERROR:  $lastN encountered an unrecognized argument value: abc
-- $range, simple condition asc
SELECT * FROM bson_dollar_project('{}', '{"result": {"$range": [1,10] } }');
                                                                                                            bson_dollar_project                                                                                                            
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" }, { "$numberInt" : "4" }, { "$numberInt" : "5" }, { "$numberInt" : "6" }, { "$numberInt" : "7" }, { "$numberInt" : "8" }, { "$numberInt" : "9" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$range": [1,10,3] } }');
                                    bson_dollar_project                                    
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "1" }, { "$numberInt" : "4" }, { "$numberInt" : "7" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$range": [1,100,3] } }');
                                                                                                                                                                                                                                                                                                                                                                                                                           bson_dollar_project                                                                                                                                                                                                                                                                                                                                                                                                                           
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "1" }, { "$numberInt" : "4" }, { "$numberInt" : "7" }, { "$numberInt" : "10" }, { "$numberInt" : "13" }, { "$numberInt" : "16" }, { "$numberInt" : "19" }, { "$numberInt" : "22" }, { "$numberInt" : "25" }, { "$numberInt" : "28" }, { "$numberInt" : "31" }, { "$numberInt" : "34" }, { "$numberInt" : "37" }, { "$numberInt" : "40" }, { "$numberInt" : "43" }, { "$numberInt" : "46" }, { "$numberInt" : "49" }, { "$numberInt" : "52" }, { "$numberInt" : "55" }, { "$numberInt" : "58" }, { "$numberInt" : "61" }, { "$numberInt" : "64" }, { "$numberInt" : "67" }, { "$numberInt" : "70" }, { "$numberInt" : "73" }, { "$numberInt" : "76" }, { "$numberInt" : "79" }, { "$numberInt" : "82" }, { "$numberInt" : "85" }, { "$numberInt" : "88" }, { "$numberInt" : "91" }, { "$numberInt" : "94" }, { "$numberInt" : "97" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$range": [{"$numberLong": "50"},100,3] } }');
                                                                                                                                                                                                                    bson_dollar_project                                                                                                                                                                                                                     
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "50" }, { "$numberInt" : "53" }, { "$numberInt" : "56" }, { "$numberInt" : "59" }, { "$numberInt" : "62" }, { "$numberInt" : "65" }, { "$numberInt" : "68" }, { "$numberInt" : "71" }, { "$numberInt" : "74" }, { "$numberInt" : "77" }, { "$numberInt" : "80" }, { "$numberInt" : "83" }, { "$numberInt" : "86" }, { "$numberInt" : "89" }, { "$numberInt" : "92" }, { "$numberInt" : "95" }, { "$numberInt" : "98" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$range": [50,{"$numberLong": "150"},{"$numberDecimal":"20.0000"}] } }');
                                                               bson_dollar_project                                                                
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "50" }, { "$numberInt" : "70" }, { "$numberInt" : "90" }, { "$numberInt" : "110" }, { "$numberInt" : "130" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$range": [50,{"$numberDecimal": "150"},{"$numberDouble":"20.00000000"}] } }');
                                                               bson_dollar_project                                                                
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "50" }, { "$numberInt" : "70" }, { "$numberInt" : "90" }, { "$numberInt" : "110" }, { "$numberInt" : "130" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$range": [50,{"$numberDecimal": "50"},{"$numberDouble":"20.00000000"}] } }');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : [  ] }
(1 row)

-- $range, simple condition desc
SELECT * FROM bson_dollar_project('{}', '{"result": {"$range": [10,-10,-1] } }');
                                                                                                                                                                                                                                                     bson_dollar_project                                                                                                                                                                                                                                                     
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "10" }, { "$numberInt" : "9" }, { "$numberInt" : "8" }, { "$numberInt" : "7" }, { "$numberInt" : "6" }, { "$numberInt" : "5" }, { "$numberInt" : "4" }, { "$numberInt" : "3" }, { "$numberInt" : "2" }, { "$numberInt" : "1" }, { "$numberInt" : "0" }, { "$numberInt" : "-1" }, { "$numberInt" : "-2" }, { "$numberInt" : "-3" }, { "$numberInt" : "-4" }, { "$numberInt" : "-5" }, { "$numberInt" : "-6" }, { "$numberInt" : "-7" }, { "$numberInt" : "-8" }, { "$numberInt" : "-9" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$range": [10,1,-3] } }');
                                    bson_dollar_project                                     
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "10" }, { "$numberInt" : "7" }, { "$numberInt" : "4" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$range": [100,1,-3] } }');
                                                                                                                                                                                                                                                                                                                                                                                                                            bson_dollar_project                                                                                                                                                                                                                                                                                                                                                                                                                            
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "100" }, { "$numberInt" : "97" }, { "$numberInt" : "94" }, { "$numberInt" : "91" }, { "$numberInt" : "88" }, { "$numberInt" : "85" }, { "$numberInt" : "82" }, { "$numberInt" : "79" }, { "$numberInt" : "76" }, { "$numberInt" : "73" }, { "$numberInt" : "70" }, { "$numberInt" : "67" }, { "$numberInt" : "64" }, { "$numberInt" : "61" }, { "$numberInt" : "58" }, { "$numberInt" : "55" }, { "$numberInt" : "52" }, { "$numberInt" : "49" }, { "$numberInt" : "46" }, { "$numberInt" : "43" }, { "$numberInt" : "40" }, { "$numberInt" : "37" }, { "$numberInt" : "34" }, { "$numberInt" : "31" }, { "$numberInt" : "28" }, { "$numberInt" : "25" }, { "$numberInt" : "22" }, { "$numberInt" : "19" }, { "$numberInt" : "16" }, { "$numberInt" : "13" }, { "$numberInt" : "10" }, { "$numberInt" : "7" }, { "$numberInt" : "4" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$range": [{"$numberLong": "100"},-50,-3] } }');
bson_dollar_project                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "100" }, { "$numberInt" : "97" }, { "$numberInt" : "94" }, { "$numberInt" : "91" }, { "$numberInt" : "88" }, { "$numberInt" : "85" }, { "$numberInt" : "82" }, { "$numberInt" : "79" }, { "$numberInt" : "76" }, { "$numberInt" : "73" }, { "$numberInt" : "70" }, { "$numberInt" : "67" }, { "$numberInt" : "64" }, { "$numberInt" : "61" }, { "$numberInt" : "58" }, { "$numberInt" : "55" }, { "$numberInt" : "52" }, { "$numberInt" : "49" }, { "$numberInt" : "46" }, { "$numberInt" : "43" }, { "$numberInt" : "40" }, { "$numberInt" : "37" }, { "$numberInt" : "34" }, { "$numberInt" : "31" }, { "$numberInt" : "28" }, { "$numberInt" : "25" }, { "$numberInt" : "22" }, { "$numberInt" : "19" }, { "$numberInt" : "16" }, { "$numberInt" : "13" }, { "$numberInt" : "10" }, { "$numberInt" : "7" }, { "$numberInt" : "4" }, { "$numberInt" : "1" }, { "$numberInt" : "-2" }, { "$numberInt" : "-5" }, { "$numberInt" : "-8" }, { "$numberInt" : "-11" }, { "$numberInt" : "-14" }, { "$numberInt" : "-17" }, { "$numberInt" : "-20" }, { "$numberInt" : "-23" }, { "$numberInt" : "-26" }, { "$numberInt" : "-29" }, { "$numberInt" : "-32" }, { "$numberInt" : "-35" }, { "$numberInt" : "-38" }, { "$numberInt" : "-41" }, { "$numberInt" : "-44" }, { "$numberInt" : "-47" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$range": [150,{"$numberLong": "50"},{"$numberDecimal":"-20.0000"}] } }');
                                                                bson_dollar_project                                                                
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "150" }, { "$numberInt" : "130" }, { "$numberInt" : "110" }, { "$numberInt" : "90" }, { "$numberInt" : "70" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$range": [150,{"$numberDecimal": "50"},{"$numberDouble":"-20.00000000"}] } }');
                                                                bson_dollar_project                                                                
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "150" }, { "$numberInt" : "130" }, { "$numberInt" : "110" }, { "$numberInt" : "90" }, { "$numberInt" : "70" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$range": [150,{"$numberDecimal": "150"},{"$numberDouble":"-20.00000000"}] } }');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : [  ] }
(1 row)

-- $range, asc series but skip val negative
SELECT * FROM bson_dollar_project('{}', '{"result": {"$range": [1,10,-1] } }');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : [  ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$range": [1,10,{"$numberDecimal":"-1.0000"}] } }');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : [  ] }
(1 row)

-- $range, desc series but skip val positive
SELECT * FROM bson_dollar_project('{}', '{"result": {"$range": [10,1,1] } }');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : [  ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$range": [10,1,{"$numberDecimal":"1.0000"}] } }');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : [  ] }
(1 row)

-- $range, expects only ranges in int_32 hence, if numbers overflow during range we should stop
SELECT * FROM bson_dollar_project('{}', '{"result": {"$range": [1,2147483647,1073741824] } }');
                            bson_dollar_project                             
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "1" }, { "$numberInt" : "1073741825" } ] }
(1 row)

-- $range, testing with values from document
SELECT * FROM bson_dollar_project('{"city": "San Jose", "distance": 42}', '{"result": {"$range": ["$distance",200,40] } }');
                                                   bson_dollar_project                                                   
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "42" }, { "$numberInt" : "82" }, { "$numberInt" : "122" }, { "$numberInt" : "162" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{"city": "San Jose", "distance": 88}', '{"result": {"$range": ["$distance",200,40] } }');
                                      bson_dollar_project                                       
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "88" }, { "$numberInt" : "128" }, { "$numberInt" : "168" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{"city": "San Jose", "distance": 288}', '{"result": {"$range": ["$distance",200,40] } }');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : [  ] }
(1 row)

SELECT * FROM bson_dollar_project('{"city": "San Jose", "distance": 288}', '{"result": {"$range": [10,"$distance",5] } }');
bson_dollar_project                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "10" }, { "$numberInt" : "15" }, { "$numberInt" : "20" }, { "$numberInt" : "25" }, { "$numberInt" : "30" }, { "$numberInt" : "35" }, { "$numberInt" : "40" }, { "$numberInt" : "45" }, { "$numberInt" : "50" }, { "$numberInt" : "55" }, { "$numberInt" : "60" }, { "$numberInt" : "65" }, { "$numberInt" : "70" }, { "$numberInt" : "75" }, { "$numberInt" : "80" }, { "$numberInt" : "85" }, { "$numberInt" : "90" }, { "$numberInt" : "95" }, { "$numberInt" : "100" }, { "$numberInt" : "105" }, { "$numberInt" : "110" }, { "$numberInt" : "115" }, { "$numberInt" : "120" }, { "$numberInt" : "125" }, { "$numberInt" : "130" }, { "$numberInt" : "135" }, { "$numberInt" : "140" }, { "$numberInt" : "145" }, { "$numberInt" : "150" }, { "$numberInt" : "155" }, { "$numberInt" : "160" }, { "$numberInt" : "165" }, { "$numberInt" : "170" }, { "$numberInt" : "175" }, { "$numberInt" : "180" }, { "$numberInt" : "185" }, { "$numberInt" : "190" }, { "$numberInt" : "195" }, { "$numberInt" : "200" }, { "$numberInt" : "205" }, { "$numberInt" : "210" }, { "$numberInt" : "215" }, { "$numberInt" : "220" }, { "$numberInt" : "225" }, { "$numberInt" : "230" }, { "$numberInt" : "235" }, { "$numberInt" : "240" }, { "$numberInt" : "245" }, { "$numberInt" : "250" }, { "$numberInt" : "255" }, { "$numberInt" : "260" }, { "$numberInt" : "265" }, { "$numberInt" : "270" }, { "$numberInt" : "275" }, { "$numberInt" : "280" }, { "$numberInt" : "285" } ] }
(1 row)

-- $range, negative conditions starting number
SELECT * FROM bson_dollar_project('{}', '{"result": {"$range": [2147483648,214748364121,40] } }');
ERROR:  The $range operator needs a starting value that fits within a 32-bit integer, but the provided value was: 2147483648
SELECT * FROM bson_dollar_project('{}', '{"result": {"$range": [{"$numberDecimal":"0.35"},400,40] } }');
ERROR:  The $range operator needs a starting value that fits within a 32-bit integer, but the provided value was: 0.35
SELECT * FROM bson_dollar_project('{}', '{"result": {"$range": ["abvcf",400,40] } }');
ERROR:  $range expression requires a numeric start value but encountered a value of type: string
SELECT * FROM bson_dollar_project('{}', '{"result": {"$range": [true,400,40] } }');
ERROR:  $range expression requires a numeric start value but encountered a value of type: bool
SELECT * FROM bson_dollar_project('{}', '{"result": {"$range": [null,400,40] } }');
ERROR:  $range expression requires a numeric start value but encountered a value of type: null
SELECT * FROM bson_dollar_project('{}', '{"result": {"$range": [null,400,40,400] } }');
ERROR:  The expression $range requires no fewer than 2 arguments and no more than 3 arguments, but 4 arguments were actually provided.
-- $range, negative conditions ending number
SELECT * FROM bson_dollar_project('{}', '{"result": {"$range": [2147648,214748364121,40] } }');
ERROR:  $range needs an ending value representable as a 32-bit integer, but encountered value: 214748364121
SELECT * FROM bson_dollar_project('{}', '{"result": {"$range": [-10, {"$numberDecimal":"0.35"},4] } }');
ERROR:  $range needs an ending value representable as a 32-bit integer, but encountered value: 0.35
SELECT * FROM bson_dollar_project('{}', '{"result": {"$range": [400,"abvcf",400] } }');
ERROR:  $range expression needs a numeric ending value, but a value of type string was provided
SELECT * FROM bson_dollar_project('{}', '{"result": {"$range": [5,true,40] } }');
ERROR:  $range expression needs a numeric ending value, but a value of type bool was provided
SELECT * FROM bson_dollar_project('{}', '{"result": {"$range": [1,null] } }');
ERROR:  $range expression needs a numeric ending value, but a value of type null was provided
-- $range, negative conditions step number
SELECT * FROM bson_dollar_project('{}', '{"result": {"$range": [21,21471,2147483648] } }');
ERROR:  $range operator needs a step value that fits within a 32-bit integer, but the provided value was: 2147483648
SELECT * FROM bson_dollar_project('{}', '{"result": {"$range": [-10,15, {"$numberDecimal":"0.35"}] } }');
ERROR:  $range operator needs a step value that fits within a 32-bit integer, but the provided value was: 0.35
SELECT * FROM bson_dollar_project('{}', '{"result": {"$range": [1,400,"abvcf"] } }');
ERROR:  Expression $range needs a numeric step value, but received a value of type: string
SELECT * FROM bson_dollar_project('{}', '{"result": {"$range": [5,40,true] } }');
ERROR:  Expression $range needs a numeric step value, but received a value of type: bool
SELECT * FROM bson_dollar_project('{}', '{"result": {"$range": [1,5,null] } }');
ERROR:  Expression $range needs a numeric step value, but received a value of type: null
SELECT * FROM bson_dollar_project('{}', '{"result": {"$range": [1,5,0] } }');
ERROR:  $range requires a step value that cannot be zero
-- $range, tests large numbers
SELECT * FROM bson_dollar_project('{}', '{"result": {"$size":{"$range": [200,20000] }} }');
            bson_dollar_project            
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "19800" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$arrayElemAt":[{"$range": [200,20000] },0]} }');
           bson_dollar_project           
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "200" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$arrayElemAt":[{"$range": [200,20000] },19799]} }');
            bson_dollar_project            
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "19999" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$size":{"$range": [50000,65535960,100000] }} }');
           bson_dollar_project           
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "655" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$arrayElemAt":[{"$range": [50000,65535960,100000] },0]} }');
            bson_dollar_project            
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "50000" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$arrayElemAt":[{"$range": [50000,65535960,100000] },654]} }');
             bson_dollar_project              
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "65450000" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$size":{"$range":  [2000000,1073741924,1000000] }} }');
           bson_dollar_project            
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "1072" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$arrayElemAt":[{"$range":  [2000000,1073741924,1000000] },0]} }');
             bson_dollar_project             
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "2000000" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$arrayElemAt":[{"$range":  [2000000,1073741924,1000000] },1071]} }');
              bson_dollar_project               
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "1073000000" } }
(1 row)

-- $range, tests memory limit exceed
SELECT * FROM bson_dollar_project('{}', '{"result": {"$range": [200,65535960] } }');
ERROR:  $range requires excessive memory (906389542 bytes) and cannot be offloaded to disk, exceeding the memory limit of 104857600 bytes.
SELECT * FROM bson_dollar_project('{}', '{"result": {"$range": [50000,65535960] } }');
ERROR:  $range requires excessive memory (905692342 bytes) and cannot be offloaded to disk, exceeding the memory limit of 104857600 bytes.
SELECT * FROM bson_dollar_project('{}', '{"result": {"$range": [0,1073741924] } }');
ERROR:  $range requires excessive memory (16068759686 bytes) and cannot be offloaded to disk, exceeding the memory limit of 104857600 bytes.
SELECT * FROM bson_dollar_project('{}', '{"result": {"$range": [0,6505360] } }');
ERROR:  $range: The buffer size required to store the output has gone beyond the allowed 64MB maximum limit.
-- $reverseArray, simple case
SELECT * FROM bson_dollar_project('{}', '{"result": {"$reverseArray": {"$literal": [1] } } }');
            bson_dollar_project            
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "1" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$reverseArray": {"$literal": [] } } }');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : [  ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$reverseArray": {"$literal": [1,2,3,4,5,6] } } }');
                                                                        bson_dollar_project                                                                        
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "6" }, { "$numberInt" : "5" }, { "$numberInt" : "4" }, { "$numberInt" : "3" }, { "$numberInt" : "2" }, { "$numberInt" : "1" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$reverseArray": {"$literal": [1,2,3,4,5,6,{"$numberLong":"1"}, {"$numberDecimal":"12389.2134234"}] } } }');
                                                                                                        bson_dollar_project                                                                                                         
---------------------------------------------------------------------
 { "result" : [ { "$numberDecimal" : "12389.2134234" }, { "$numberLong" : "1" }, { "$numberInt" : "6" }, { "$numberInt" : "5" }, { "$numberInt" : "4" }, { "$numberInt" : "3" }, { "$numberInt" : "2" }, { "$numberInt" : "1" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$reverseArray": {"$literal": [1,2,3,4, {"$add":[1,2]}] } } }');
                                                                                bson_dollar_project                                                                                 
---------------------------------------------------------------------
 { "result" : [ { "$add" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" } ] }, { "$numberInt" : "4" }, { "$numberInt" : "3" }, { "$numberInt" : "2" }, { "$numberInt" : "1" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$reverseArray": {"$literal": [1,2,3,4, {"$add":[1,2]}, "$field"] } } }');
                                                                                     bson_dollar_project                                                                                      
---------------------------------------------------------------------
 { "result" : [ "$field", { "$add" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" } ] }, { "$numberInt" : "4" }, { "$numberInt" : "3" }, { "$numberInt" : "2" }, { "$numberInt" : "1" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$reverseArray": {"$literal": [1,2,3,4, {"$add":[1,2]}, "$field", [1.45,9,9]] } } }');
                                                                                                                                       bson_dollar_project                                                                                                                                       
---------------------------------------------------------------------
 { "result" : [ [ { "$numberDouble" : "1.4499999999999999556" }, { "$numberInt" : "9" }, { "$numberInt" : "9" } ], "$field", { "$add" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" } ] }, { "$numberInt" : "4" }, { "$numberInt" : "3" }, { "$numberInt" : "2" }, { "$numberInt" : "1" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{"nums": [1,2,3,4, {"$add":[1,2]}, "$field", [145,9,9]]}', '{"result": {"$reverseArray": "$nums" } }');
                                                                                                                            bson_dollar_project                                                                                                                             
---------------------------------------------------------------------
 { "result" : [ [ { "$numberInt" : "145" }, { "$numberInt" : "9" }, { "$numberInt" : "9" } ], "$field", { "$add" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" } ] }, { "$numberInt" : "4" }, { "$numberInt" : "3" }, { "$numberInt" : "2" }, { "$numberInt" : "1" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{"key":[{"a":[8,9,10]},{"a":[3,2,1,-1]},{"a":[4,5,6]}]}', '{"result": {"$reverseArray": "$key.a" } }');
                                                                                                                               bson_dollar_project                                                                                                                               
---------------------------------------------------------------------
 { "result" : [ [ { "$numberInt" : "4" }, { "$numberInt" : "5" }, { "$numberInt" : "6" } ], [ { "$numberInt" : "3" }, { "$numberInt" : "2" }, { "$numberInt" : "1" }, { "$numberInt" : "-1" } ], [ { "$numberInt" : "8" }, { "$numberInt" : "9" }, { "$numberInt" : "10" } ] ] }
(1 row)

-- $reverseArray, operator cases
SELECT * FROM bson_dollar_project('{}', '{"result": {"$reverseArray": {"$range":[1,4]} } }');
                                    bson_dollar_project                                    
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "3" }, { "$numberInt" : "2" }, { "$numberInt" : "1" } ] }
(1 row)

-- $reverseArray, null cases
SELECT * FROM bson_dollar_project('{"nums": [1,2,3,4, {"$add":[1,2]}, "$field", [145,9,9]]}', '{"result": {"$reverseArray": "$noField" } }');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : null }
(1 row)

SELECT * FROM bson_dollar_project('{"nums": [1,2,3,4, {"$add":[1,2]}, "$field", [145,9,9]]}', '{"result": {"$reverseArray": null } }');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : null }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$reverseArray": {"$undefined":true} } }');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : null }
(1 row)

SELECT * FROM bson_dollar_project('{"nums": [1,2,3,4, {"$add":[1,2]}, "$field", [145,9,9]]}', '{"result": {"$reverseArray": {"$literal":null} } }');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : null }
(1 row)

SELECT * FROM bson_dollar_project('{"nums": [1,2,3,4, {"$add":[1,2]}, "$field", [145,9,9]]}', '{"result": {"$reverseArray": {"$literal":{"$undefined":true}} } }');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : null }
(1 row)

-- $reverseArray, negative cases
SELECT * FROM bson_dollar_project('{"nums": [1,2,3,4, {"$add":[1,2]}, "$field", [145,9,9]]}', '{"result": {"$reverseArray": [1,2,345,5] } }');
ERROR:  The expression $reverseArray requires exactly 1 arguments, but 4 arguments were actually provided.
SELECT * FROM bson_dollar_project('{"nums": [1,2,3,4, {"$add":[1,2]}, "$field", [145,9,9]]}', '{"result": {"$reverseArray": true } }');
ERROR:  The argument to $reverseArray must be an array, but was of type: bool
SELECT * FROM bson_dollar_project('{"nums": [1,2,3,4, {"$add":[1,2]}, "$field", [145,9,9]]}', '{"result": {"$reverseArray": 1 } }');
ERROR:  The argument to $reverseArray must be an array, but was of type: int
-- $indexOfArray, simple cases
SELECT * FROM bson_dollar_project('{}', '{"result": {"$indexOfArray": [[1,2,345,5], 1] } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "0" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$indexOfArray": [[], 1,1] } }');
          bson_dollar_project           
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "-1" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$indexOfArray": [null, 1] } }');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : null }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$indexOfArray": [[1,2,345,5], 2] } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "1" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$indexOfArray": [[1,2,345,5], 4] } }');
          bson_dollar_project           
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "-1" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$indexOfArray": [[1,2,345,5], 5] } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "3" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$indexOfArray": [[1,2,345,5,100,90,11,50,234], 50] } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "7" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$indexOfArray": [[1,2,345,5,100,90,11,50,234], 50.0] } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "7" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$indexOfArray": [[1,2,345,5,100,90,11,50,234], 50, 0, 111] } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "7" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$indexOfArray": [[1,2,345,5,100,90,11,50,234], 50, 111, 111] } }');
          bson_dollar_project           
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "-1" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$indexOfArray": [[1,2,345,5,100,90,11,50,234], 50, 2, 5] } }');
          bson_dollar_project           
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "-1" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$indexOfArray": [[1,2,345,5,100,90,11,50,234], 50, 2, 7] } }');
          bson_dollar_project           
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "-1" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$indexOfArray": [[1,2,345,5,100,90,11,50,234], 50, 7, 7] } }');
          bson_dollar_project           
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "-1" } }
(1 row)

-- $indexOfArray, document based array
SELECT * FROM bson_dollar_project('{"a": [1,2,345,5]}', '{"result": {"$indexOfArray": ["$a", 1] } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "0" } }
(1 row)

SELECT * FROM bson_dollar_project('{"a": [[1,2,345,5]]}', '{"result": {"$indexOfArray": ["$a", [1]] } }');
          bson_dollar_project           
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "-1" } }
(1 row)

SELECT * FROM bson_dollar_project('{"a": [[1,2,345,5]]}', '{"result": {"$indexOfArray": ["$a", [1,2]] } }');
          bson_dollar_project           
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "-1" } }
(1 row)

-- $indexOfArray, negative cases
SELECT * FROM bson_dollar_project('{}', '{"result": {"$indexOfArray": [true, 50.0, 1,50] } }');
ERROR:  $indexOfArray expects the first argument to be an array, but received: bool
SELECT * FROM bson_dollar_project('{}', '{"result": {"$indexOfArray": [[1,2,345,5,100,90,11,50,234], 50.0, 11, 5] } }');
          bson_dollar_project           
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "-1" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$indexOfArray": [[1,2,345,5,100,90,11,50,234], 50.0, -1, 5] } }');
ERROR:  Operator $indexOfArray needs a nonnegative starting index value, but received: -1
SELECT * FROM bson_dollar_project('{}', '{"result": {"$indexOfArray": [[1,2,345,5,100,90,11,50,234], 50.0, 1, -5] } }');
ERROR:  Operator $indexOfArray needs a nonnegative ending index value, but received: -5
SELECT * FROM bson_dollar_project('{}', '{"result": {"$indexOfArray": [[1,2,345,5,100,90,11,50,234], 50.0, 1.1] } }');
ERROR:  The $indexOfArray operator needs an integer starting index, but encountered a value of type double with the value 1.1.
SELECT * FROM bson_dollar_project('{}', '{"result": {"$indexOfArray": [[1,2,345,5,100,90,11,50,234], 50.0, 1,5.11] } }');
ERROR:  The $indexOfArray operator needs an integer ending index, but encountered a value of type double with the value 5.11.
SELECT * FROM bson_dollar_project('{}', '{"result": {"$indexOfArray": [[1,2,345,5,100,90,11,50,234], 50.0, 1,5.11] } }');
ERROR:  The $indexOfArray operator needs an integer ending index, but encountered a value of type double with the value 5.11.
SELECT * FROM bson_dollar_project('{}', '{"result": {"$indexOfArray": [[1,2,345,5,100,90,11,50,234], 50.0, 1,5,4] } }');
ERROR:  The expression $indexOfArray requires no fewer than 2 arguments and no more than 4 arguments, but 5 arguments were actually provided.
SELECT * FROM bson_dollar_project('{}', '{"result": {"$indexOfArray": [[1,2,345,5,100,90,11,50,234], 50.0, "1",5] } }');
ERROR:  The $indexOfArray operator needs an integer starting index, but encountered a value of type string with the value "1".
SELECT * FROM bson_dollar_project('{}', '{"result": {"$indexOfArray": [[1,2,345,5,100,90,11,50,234], 50.0, 1,"50"] } }');
ERROR:  The $indexOfArray operator needs an integer ending index, but encountered a value of type string with the value "50".
SELECT * FROM bson_dollar_project('{}', '{"result": {"$indexOfArray": [[1,2,345,5,100,90,11,50,234], 50.0, 1,90000000000000] } }');
ERROR:  The $indexOfArray operator needs an integer ending index, but encountered a value of type long with the value 90000000000000.
-- $indexOfArray, search for elements of different type
SELECT * FROM bson_dollar_project('{}', '{"result": {"$indexOfArray": [[1,"2",true,{"a":1}], "2"] } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "1" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$indexOfArray": [[1,"2",true,{"a":1}], true] } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "2" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$indexOfArray": [[1,"2",true,{"a":1}], {"a":1}] } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "3" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$indexOfArray": [[1,"2",true,{"$numberLong":"44374"}], {"$numberLong":"44374"}] } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "3" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$indexOfArray": [[1,"2",true,{"$numberDecimal":"44374.124"}], {"$numberDecimal":"44374.124"}] } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "3" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$indexOfArray": [[1,"2",true,null], null] } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "3" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$indexOfArray": [[1,"2",true, {"$date": { "$numberLong" : "0" }}, null], {"$date": { "$numberLong" : "0" }}] } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "3" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$indexOfArray": [[1,"2",true, "This is ❤️", null], "This is ❤️"] } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "3" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$indexOfArray": [[1, 44374, "2", true, {"$numberLong":"44374"}], {"$numberLong":"44374"}] } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "1" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$indexOfArray": [[1, 44374, "2", true, {"$numberLong":"44374"}], {"$numberInt":"44374"}] } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "1" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$indexOfArray": [[1, 4374, "2", true, {"$numberLong":"44374"}], {"$numberDecimal":"44374"}] } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "4" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$indexOfArray": [[1, 4374, "2", [true, {"$numberLong":"44374"}]], [true,{"$numberDecimal":"44374"}]] } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "3" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$indexOfArray": [[1, 4374, "2", [true, {"$numberLong":"44374"}, 1]], [1,true,{"$numberDecimal":"44374"}]] } }');
          bson_dollar_project           
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "-1" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$indexOfArray": [[1, 4374, "2", {"a":{"b":24, "c":1,"d":2}}], {"a":{"b":24, "d":2, "c":1 }}] } }');
          bson_dollar_project           
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "-1" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$indexOfArray": [[1, 4374, "2", {"a":{"b":24, "c":1,"d":2, "e": null}}], {"a":{"b":24,"c":1, "d":2, "e":null }}] } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "3" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$indexOfArray": [[1, 4374, "2", {"a":{"b":24, "c":1,"d":2, "e": null}}], {"a":{"b":24,"c":1, "d":2, "e": {"$undefined":true} }}] } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "3" } }
(1 row)

-- $max, single input cases
SELECT * FROM bson_dollar_project('{}', '{"result": {"$max": null } }');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : null }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$max": {"$undefined":true} } }');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : null }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$max": {} } }');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : {  } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$max": [] } }');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : null }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$max": {"a":1} } }');
               bson_dollar_project               
---------------------------------------------------------------------
 { "result" : { "a" : { "$numberInt" : "1" } } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$max": 5 } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "5" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$max": {"$numberDouble":"5.454"} } }');
                     bson_dollar_project                      
---------------------------------------------------------------------
 { "result" : { "$numberDouble" : "5.4539999999999997371" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$max": {"$numberDecimal":"5.454"} } }');
              bson_dollar_project              
---------------------------------------------------------------------
 { "result" : { "$numberDecimal" : "5.454" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$max": {"$date": { "$numberLong" : "0" }} } }');
                 bson_dollar_project                  
---------------------------------------------------------------------
 { "result" : { "$date" : { "$numberLong" : "0" } } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$max": [-2147483648, 2147483647, -9223372036854775808, 9223372036854775807, 0, 100, -100] } }');
                   bson_dollar_project                    
---------------------------------------------------------------------
 { "result" : { "$numberLong" : "9223372036854775807" } }
(1 row)

-- $max, array input cases
SELECT * FROM bson_dollar_project('{}', '{"result": {"$max": [1,2,3] } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "3" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$max": [[1,2,3]] } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "3" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$max": [1,2,3,5,3,2,1] } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "5" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$max": [100,2,3,5,3] } }');
           bson_dollar_project           
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "100" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$max": [100,2,33, [1,2,3]] } }');
                                    bson_dollar_project                                    
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$max": [100,200.0] } }');
             bson_dollar_project              
---------------------------------------------------------------------
 { "result" : { "$numberDouble" : "200.0" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$max": [100,2,33, [1,2,3], {"$date": { "$numberLong" : "0" }}, {"$numberDecimal": "5.12124545487878787"},{}, NaN , {"$regex": "/ab/cdsd/abc", "$options" : ""}] } }');
                                   bson_dollar_project                                    
---------------------------------------------------------------------
 { "result" : { "$regularExpression" : { "pattern" : "/ab/cdsd/abc", "options" : "" } } }
(1 row)

-- $max, null cases within array
SELECT * FROM bson_dollar_project('{}', '{"result": {"$max": [null, NaN] } }');
            bson_dollar_project             
---------------------------------------------------------------------
 { "result" : { "$numberDouble" : "NaN" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$max": [{}, NaN] } }');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : {  } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$max": [{"$undefined": true}, NaN] } }');
            bson_dollar_project             
---------------------------------------------------------------------
 { "result" : { "$numberDouble" : "NaN" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$max": [null, NaN, 1, 2] } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "2" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$max": [{}, NaN, 1, 2] } }');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : {  } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$max":  [1,{"$undefined":true},8,3,4,[1,2,3]] } }');
                                    bson_dollar_project                                    
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }
(1 row)

-- $max, input document cases
SELECT * FROM bson_dollar_project('{"a": 5}', '{"result": {"$max": "$a" } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "5" } }
(1 row)

SELECT * FROM bson_dollar_project('{"a": 130.5}', '{"result": {"$max": "$a" } }');
             bson_dollar_project              
---------------------------------------------------------------------
 { "result" : { "$numberDouble" : "130.5" } }
(1 row)

SELECT * FROM bson_dollar_project('{"a": null}', '{"result": {"$max": "$a" } }');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : null }
(1 row)

SELECT * FROM bson_dollar_project('{"a": NaN}', '{"result": {"$max": "$a" } }');
            bson_dollar_project             
---------------------------------------------------------------------
 { "result" : { "$numberDouble" : "NaN" } }
(1 row)

SELECT * FROM bson_dollar_project('{"a": [1,2,3,5,3,2,1]}', '{"result": {"$max": "$a" } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "5" } }
(1 row)

SELECT * FROM bson_dollar_project('{"a": [1,2,3,5,3,2,1]}', '{"result": {"$max": ["$a", 223324342] } }');
                                                                                    bson_dollar_project                                                                                    
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" }, { "$numberInt" : "5" }, { "$numberInt" : "3" }, { "$numberInt" : "2" }, { "$numberInt" : "1" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{"a": [100,2,33, [1,2,3], {"$date": { "$numberLong" : "0" }}, {"$numberDecimal": "5.12124545487878787"},{}, NaN , {"$regex": "/ab/cdsd/abc", "$options" : ""}]}', '{"result": {"$max": "$a" } }');
                                   bson_dollar_project                                    
---------------------------------------------------------------------
 { "result" : { "$regularExpression" : { "pattern" : "/ab/cdsd/abc", "options" : "" } } }
(1 row)

SELECT * FROM bson_dollar_project('{"a": [100,2,33, [1,2,3], {"$date": { "$numberLong" : "0" }}, {"$numberDecimal": "5.12124545487878787"},{}, NaN , {"$regex": "/ab/cdsd/abc", "$options" : ""}]}', '{"result": {"$max": [1,2,45, "$a"] } }');
                                                                                                                                                                             bson_dollar_project                                                                                                                                                                             
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "100" }, { "$numberInt" : "2" }, { "$numberInt" : "33" }, [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], { "$date" : { "$numberLong" : "0" } }, { "$numberDecimal" : "5.12124545487878787" }, {  }, { "$numberDouble" : "NaN" }, { "$regularExpression" : { "pattern" : "/ab/cdsd/abc", "options" : "" } } ] }
(1 row)

-- $min, single input cases
SELECT * FROM bson_dollar_project('{}', '{"result": {"$min": null } }');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : null }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$min": {"$undefined":true} } }');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : null }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$min": {} } }');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : {  } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$min": [] } }');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : null }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$min": {"a":1} } }');
               bson_dollar_project               
---------------------------------------------------------------------
 { "result" : { "a" : { "$numberInt" : "1" } } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$min": 5 } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "5" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$min": {"$numberDouble":"5.454"} } }');
                     bson_dollar_project                      
---------------------------------------------------------------------
 { "result" : { "$numberDouble" : "5.4539999999999997371" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$min": {"$numberDecimal":"5.454"} } }');
              bson_dollar_project              
---------------------------------------------------------------------
 { "result" : { "$numberDecimal" : "5.454" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$min": {"$date": { "$numberLong" : "0" }} } }');
                 bson_dollar_project                  
---------------------------------------------------------------------
 { "result" : { "$date" : { "$numberLong" : "0" } } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$min": [-2147483648, 2147483647, -9223372036854775808, 9223372036854775807, 0, 100, -100] } }');
                    bson_dollar_project                    
---------------------------------------------------------------------
 { "result" : { "$numberLong" : "-9223372036854775808" } }
(1 row)

-- $min, array input cases
SELECT * FROM bson_dollar_project('{}', '{"result": {"$min": [1,2,3] } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "1" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$min": [[1,2,3]] } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "1" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$min": [1,2,3,5,3,2,1] } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "1" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$min": [100,2,3,5,3] } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "2" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$min": [100,2,33, [1,2,3]] } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "2" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$min": [100,200.0] } }');
           bson_dollar_project           
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "100" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$min": [100,2,33, [1,2,3], {"$date": { "$numberLong" : "0" }}, {"$numberDecimal": "5.12124545487878787"},{}, NaN , {"$regex": "/ab/cdsd/abc", "$options" : ""}] } }');
            bson_dollar_project             
---------------------------------------------------------------------
 { "result" : { "$numberDouble" : "NaN" } }
(1 row)

-- $min, null cases within array
SELECT * FROM bson_dollar_project('{}', '{"result": {"$min": [null, NaN] } }');
            bson_dollar_project             
---------------------------------------------------------------------
 { "result" : { "$numberDouble" : "NaN" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$min": [{}, NaN] } }');
            bson_dollar_project             
---------------------------------------------------------------------
 { "result" : { "$numberDouble" : "NaN" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$min": [{"$undefined": true}, NaN] } }');
            bson_dollar_project             
---------------------------------------------------------------------
 { "result" : { "$numberDouble" : "NaN" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$min": [null, NaN, 1, 2] } }');
            bson_dollar_project             
---------------------------------------------------------------------
 { "result" : { "$numberDouble" : "NaN" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$min": [{}, NaN, 1, 2] } }');
            bson_dollar_project             
---------------------------------------------------------------------
 { "result" : { "$numberDouble" : "NaN" } }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": {"$min":  [1,{"$undefined":true},8,3,4,[1,2,3]] } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "1" } }
(1 row)

-- $min, input document cases
SELECT * FROM bson_dollar_project('{"a": 5}', '{"result": {"$min": "$a" } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "5" } }
(1 row)

SELECT * FROM bson_dollar_project('{"a": 130.5}', '{"result": {"$min": "$a" } }');
             bson_dollar_project              
---------------------------------------------------------------------
 { "result" : { "$numberDouble" : "130.5" } }
(1 row)

SELECT * FROM bson_dollar_project('{"a": null}', '{"result": {"$min": "$a" } }');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : null }
(1 row)

SELECT * FROM bson_dollar_project('{"a": NaN}', '{"result": {"$min": "$a" } }');
            bson_dollar_project             
---------------------------------------------------------------------
 { "result" : { "$numberDouble" : "NaN" } }
(1 row)

SELECT * FROM bson_dollar_project('{"a": [1,2,3,5,3,2,1]}', '{"result": {"$min": "$a" } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "1" } }
(1 row)

SELECT * FROM bson_dollar_project('{"a": [1,2,3,5,3,2,1]}', '{"result": {"$min": ["$a", 223324342] } }');
              bson_dollar_project              
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "223324342" } }
(1 row)

SELECT * FROM bson_dollar_project('{"a": [100,2,33, [1,2,3], {"$date": { "$numberLong" : "0" }}, {"$numberDecimal": "5.12124545487878787"},{}, NaN , {"$regex": "/ab/cdsd/abc", "$options" : ""}]}', '{"result": {"$min": "$a" } }');
            bson_dollar_project             
---------------------------------------------------------------------
 { "result" : { "$numberDouble" : "NaN" } }
(1 row)

SELECT * FROM bson_dollar_project('{"a": [100,2,33, [1,2,3], {"$date": { "$numberLong" : "0" }}, {"$numberDecimal": "5.12124545487878787"},{}, NaN , {"$regex": "/ab/cdsd/abc", "$options" : ""}]}', '{"result": {"$min": [1,2,45, "$a"] } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "1" } }
(1 row)

-- $sum , single input
SELECT * FROM bson_dollar_project('{"a": 5}', '{"result": {"$sum": "$a" } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "5" } }
(1 row)

SELECT * FROM bson_dollar_project('{"a": "foo" }', '{"result": {"$sum": "$a" } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "0" } }
(1 row)

SELECT * FROM bson_dollar_project('{"a": null }', '{"result": {"$sum": "$a" } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "0" } }
(1 row)

SELECT * FROM bson_dollar_project('{"b": null }', '{"result": {"$sum": "$a" } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "0" } }
(1 row)

-- $sum , array input
SELECT * FROM bson_dollar_project('{"a": [ 7, 1, 2 ] }', '{"result": {"$sum": "$a" } }');
          bson_dollar_project           
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "10" } }
(1 row)

SELECT * FROM bson_dollar_project('{"a": [ "foo", 1, 2 ] }', '{"result": {"$sum": "$a" } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "3" } }
(1 row)

SELECT * FROM bson_dollar_project('{"a": [ 1, null, 2 ] }', '{"result": {"$sum": "$a" } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "3" } }
(1 row)

-- $sum , array expression
SELECT * FROM bson_dollar_project('{"a": 1, "b": 2, "c": 3 }', '{"result": {"$sum": [ "$a", "$b", "$c" ] } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "6" } }
(1 row)

SELECT * FROM bson_dollar_project('{"a": 1, "b": 2, "c": 3 }', '{"result": {"$sum": [ "$a", { "$subtract": [ "$c", "$b" ] } ] } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "2" } }
(1 row)

-- $avg , single input
SELECT * FROM bson_dollar_project('{"a": 5}', '{"result": {"$avg": "$a" } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "5" } }
(1 row)

SELECT * FROM bson_dollar_project('{"a": "foo" }', '{"result": {"$avg": "$a" } }');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : null }
(1 row)

SELECT * FROM bson_dollar_project('{"a": null }', '{"result": {"$avg": "$a" } }');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : null }
(1 row)

SELECT * FROM bson_dollar_project('{"b": null }', '{"result": {"$avg": "$a" } }');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : null }
(1 row)

-- $avg , array input
SELECT * FROM bson_dollar_project('{"a": [ 7, 1, 2 ] }', '{"result": {"$avg": "$a" } }');
                     bson_dollar_project                      
---------------------------------------------------------------------
 { "result" : { "$numberDouble" : "3.3333333333333334814" } }
(1 row)

SELECT * FROM bson_dollar_project('{"a": [ "foo", 1, 2 ] }', '{"result": {"$avg": "$a" } }');
            bson_dollar_project             
---------------------------------------------------------------------
 { "result" : { "$numberDouble" : "1.5" } }
(1 row)

SELECT * FROM bson_dollar_project('{"a": [ 1, null, 2 ] }', '{"result": {"$avg": "$a" } }');
            bson_dollar_project             
---------------------------------------------------------------------
 { "result" : { "$numberDouble" : "1.5" } }
(1 row)

-- $avg , array expression
SELECT * FROM bson_dollar_project('{"a": 1, "b": 2, "c": 3 }', '{"result": {"$avg": [ "$a", "$b", "$c" ] } }');
            bson_dollar_project             
---------------------------------------------------------------------
 { "result" : { "$numberDouble" : "2.0" } }
(1 row)

SELECT * FROM bson_dollar_project('{"a": 1, "b": 2, "c": 3 }', '{"result": {"$avg": [ "$a", { "$subtract": [ "$c", "$b" ] } ] } }');
            bson_dollar_project             
---------------------------------------------------------------------
 { "result" : { "$numberDouble" : "1.0" } }
(1 row)

-- $map
select *from bson_dollar_project('{"a": [1, 2, 3]}', '{"result": {"$map": {"input": "$a", "as": "x", "in": { "$add": ["$$x", 1] } } } }');
                                    bson_dollar_project                                    
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "2" }, { "$numberInt" : "3" }, { "$numberInt" : "4" } ] }
(1 row)

select *from bson_dollar_project('{"str": ["a", "b", "c"]}', '{"result": {"$map": {"input": "$str", "as": "y", "in": { "$concat": ["$$y", "ddd"] } } } }');
            bson_dollar_project            
---------------------------------------------------------------------
 { "result" : [ "addd", "bddd", "cddd" ] }
(1 row)

select *from bson_dollar_project('{"bools": [true, true, false, true] }', '{"allTrue": { "$map": { "input": "$bools", "as": "x", "in": { "$and": ["$$x", false] }   } } }');
              bson_dollar_project               
---------------------------------------------------------------------
 { "allTrue" : [ false, false, false, false ] }
(1 row)

select *from bson_dollar_project('{ "a": ["Hello", "", "big", "World", "!"] }', '{"a": { "$map": { "input": "$a", "as": "x", "in": { "$concat": [{ "$trim": { "input" : "$$x" }}, {"$cond": {"if": { "$eq": [ "$$x", "" ] }, "then": "1", "else": "2" } }, { "$trim": { "input" : "$$x" } } ] } } } }');
                        bson_dollar_project                        
---------------------------------------------------------------------
 { "a" : [ "Hello2Hello", "1", "big2big", "World2World", "!2!" ] }
(1 row)

select *from bson_dollar_project('{"a": [["a", "b"], ["b", "c"], ["c", "d"], ["e", "a"], ["y", "z"]] }', '{"result": {"$map": {"input": "$a","as": "x","in": { "$setUnion": ["$$x", ["a","b"]] }}}}');
                                                  bson_dollar_project                                                  
---------------------------------------------------------------------
 { "result" : [ [ "b", "a" ], [ "b", "a", "c" ], [ "b", "a", "c", "d" ], [ "b", "e", "a" ], [ "b", "y", "a", "z" ] ] }
(1 row)

select *from bson_dollar_project('{"a": [{"b": [1, 2, 3]},{"b": [4, 5, 6]}]}', '{"result": {"$map": {"input": "$a","as": "outer","in": {"$map": {"input": "$$outer.b","as": "inner","in": { "$multiply": ["$$inner", 2] }}}}}}');
                                                                             bson_dollar_project                                                                             
---------------------------------------------------------------------
 { "result" : [ [ { "$numberInt" : "2" }, { "$numberInt" : "4" }, { "$numberInt" : "6" } ], [ { "$numberInt" : "8" }, { "$numberInt" : "10" }, { "$numberInt" : "12" } ] ] }
(1 row)

-- $map in $addfield stage
SELECT documentdb_api.insert_one('db','addFieldMap','{"_id":"1", "a": [{ "fieldA": "Hello World", "fieldB": "FOO" },{ "fieldA": "Goodbye everyone", "fieldB": "BAza" }]}', NULL);
NOTICE:  creating collection
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "addFieldMap", "pipeline": [ { "$addFields": {"newField": { "$map": { "input": "$a", "as": "dummy", "in": {"fieldA_fieldB": { "$concat": ["$$dummy.fieldA", " -- ", "$$dummy.fieldB"] }} } } } } ], "cursor": {} }');
                                                                                                                    document                                                                                                                    
---------------------------------------------------------------------
 { "_id" : "1", "a" : [ { "fieldA" : "Hello World", "fieldB" : "FOO" }, { "fieldA" : "Goodbye everyone", "fieldB" : "BAza" } ], "newField" : [ { "fieldA_fieldB" : "Hello World -- FOO" }, { "fieldA_fieldB" : "Goodbye everyone -- BAza" } ] }
(1 row)

-- $map, nested case
select *from bson_dollar_project('{"a":[{"fieldA":"abc","fieldB":2,"fieldC":[{"number":45, "foo":"ab"}, {"foo":"ac","number":1}]},{"fieldA":"def","fieldB":6,"fieldC":[{"foo":"kb", "number":10}]}]}', '{"result":{"$map":{"input":"$a","as":"dummy","in":{"fieldA":"$$dummy.fieldA","fieldB":"$$dummy.fieldB","fieldC":{"$map":{"input":"$$dummy.fieldC","as":"fieldC","in":{"foo":"$$fieldC.foo","number":{"$add":["$$fieldC.number",100]}}}}}}}}');
                                                                                                                                                          bson_dollar_project                                                                                                                                                           
---------------------------------------------------------------------
 { "result" : [ { "fieldA" : "abc", "fieldB" : { "$numberInt" : "2" }, "fieldC" : [ { "foo" : "ab", "number" : { "$numberInt" : "145" } }, { "foo" : "ac", "number" : { "$numberInt" : "101" } } ] }, { "fieldA" : "def", "fieldB" : { "$numberInt" : "6" }, "fieldC" : [ { "foo" : "kb", "number" : { "$numberInt" : "110" } } ] } ] }
(1 row)

-- $map, negative cases
select *from bson_dollar_project('{"a": 1}', '{"result": {"$map": {"input": "$a", "as": "x", "in": { "$add": ["$$x", 1] } } } }');
ERROR:  The $map operator requires an array input, but received int instead
select *from bson_dollar_project('{"a": [1, 2, 3]}', '{"result": {"$map": {"input": "$a" }} }');
ERROR:  'in' parameter must be specified for $map
-- $reduce
select *from bson_dollar_project('{"a": ["a", "b", "c"]}', '{"result": { "$reduce": { "input": "$a", "initialValue": "", "in": { "$concat": ["$$value", "$$this"] } } } }');
 bson_dollar_project  
---------------------------------------------------------------------
 { "result" : "abc" }
(1 row)

select *from bson_dollar_project('{"a": [ 1, 2, 3, 4 ]}', '{"result": { "$reduce": { "input": "$a", "initialValue": { "sum": 5, "product": 2 }, "in": { "sum": { "$add" : ["$$value.sum", "$$this"] }, "product": { "$multiply": [ "$$value.product", "$$this" ] }  } } } }');
                                   bson_dollar_project                                   
---------------------------------------------------------------------
 { "result" : { "sum" : { "$numberInt" : "15" }, "product" : { "$numberInt" : "48" } } }
(1 row)

select *from bson_dollar_project('{"a": [ [ 3, 4 ], [ 5, 6 ] ] }', '{"result": { "$reduce": { "input": "$a", "initialValue": [ 1, 2 ], "in": { "$concatArrays" : ["$$value", "$$this"] } } } }');
                                                                        bson_dollar_project                                                                        
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" }, { "$numberInt" : "4" }, { "$numberInt" : "5" }, { "$numberInt" : "6" } ] }
(1 row)

select *from bson_dollar_project('{"a": [[1, 2], [3, 4], [5, 6]] }', '{"result": { "$reduce": { "input": "$a", "initialValue": 0, "in": { "$add" : ["$$value", {"$reduce": {"input": "$$this","initialValue": 0, "in": { "$add": ["$$value", "$$this"] }}}] } } } }');
          bson_dollar_project           
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "21" } }
(1 row)

select *from bson_dollar_project('{ "a": ["Hello", "", "big", "World", "!"] }', '{"result": { "$reduce": { "input": "$a", "initialValue": "", "in": { "$concat": [{ "$trim": { "input" : "$$value" }}, {"$cond": {"if": { "$eq": [ "$$value", "" ] }, "then": "1", "else": "2" } }, { "$trim": { "input" : "$$this" } } ] } } } }');
         bson_dollar_project          
---------------------------------------------------------------------
 { "result" : "1Hello22big2World2!" }
(1 row)

select *from bson_dollar_project('{"a": [2, 3, 5, 8, 13, 21,7,1]}','{"result": {"$reduce": { "input": "$a", "initialValue": 0, "in": { "$cond": [{ "$gt": ["$$this", 5] }, { "$add": ["$$value", 1] }, "$$value"] } } } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "4" } }
(1 row)

select *from bson_dollar_project('{"a": [true, true, false, true] }', '{"result": { "$reduce": { "input": "$bools", "initialValue": true, "in": { "$and": ["$$value", "$$this"] }   } } }');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : null }
(1 row)

select *from bson_dollar_project('{"a": [1, null, 3, null, 5] }', '{"result": { "$reduce": { "input": "$a", "initialValue": 0, "in": { "$add": ["$$value", { "$ifNull": ["$$this", 0] }] }  } } }');
          bson_dollar_project          
---------------------------------------------------------------------
 { "result" : { "$numberInt" : "9" } }
(1 row)

select *from bson_dollar_project('{"a": [[1, 2], [2, 3], [3, 4]] }', '{"result": {"$reduce": {"input": "$a","initialValue": [],"in": { "$setUnion": ["$$value", "$$this"] }}}}');
                                                bson_dollar_project                                                
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "2" }, { "$numberInt" : "4" }, { "$numberInt" : "1" }, { "$numberInt" : "3" } ] }
(1 row)

select *from bson_dollar_project('{"a": [{ "a": 1 }, { "b": 2 }, { "a": 2 }, { "b": 3 },{ "c": 3 }, { "c": 4 }] }','{"result":{"$reduce": {"input": "$a","initialValue": {},"in":{ "$mergeObjects": ["$$value", "$$this"] }}}}');
                                             bson_dollar_project                                             
---------------------------------------------------------------------
 { "result" : { "a" : { "$numberInt" : "2" }, "b" : { "$numberInt" : "3" }, "c" : { "$numberInt" : "4" } } }
(1 row)

select *from bson_dollar_project('{"a": [[1, 2], [3, 4], [5, 6]] }','{"result":{"$reduce": {"input": "$a","initialValue": 0,"in":{ "$sum": ["$$value",{ "$avg": "$$this" }] }}}}');
             bson_dollar_project             
---------------------------------------------------------------------
 { "result" : { "$numberDouble" : "10.5" } }
(1 row)

-- $reduce in $addfield stage
SELECT documentdb_api.insert_one('db','addFieldReduce','{"_id":"1", "a": ["a", "b", "c"]}', NULL);
NOTICE:  creating collection
                              insert_one                              
---------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "addFieldReduce", "pipeline": [ { "$addFields": {"newField": { "$reduce": { "input": "$a", "initialValue": "", "in": { "$concat": ["$$value", "$$this"] } } } } } ], "cursor": {} }');
                           document                           
---------------------------------------------------------------------
 { "_id" : "1", "a" : [ "a", "b", "c" ], "newField" : "abc" }
(1 row)

-- $reduce, negative cases
select *from bson_dollar_project('{"a": 1}', '{"result": { "$reduce": { "input": "$a", "initialValue": "", "in": { "$concat": ["$$value", "$$this"] } } } }');
ERROR:  The input provided to $reduce must be an array, not int
select *from bson_dollar_project('{"a": [1, 2, 3]}', '{"result": {"$reduce": {"input": "$a", "initialValue": 0 }} }');
ERROR:  Missing 'in' argument for operator $reduce
select *from bson_dollar_project('{"a": [1, 2, 3]}', '{"result": {"$reduce": {"input": "$a", "in": { "$concat": ["$$value", "$$this"] } }} }');
ERROR:  The 'initialValue' parameter required by $reduce is missing.
-- $maxN/minN, n too large
SELECT * FROM bson_dollar_project('{"d1": [1.1,2.1,3.1]}', '{"result": { "$maxN": {"input": [1.1,2.2,"3"], "n": 23 }   }}');
                                                 bson_dollar_project                                                  
---------------------------------------------------------------------
 { "result" : [ "3", { "$numberDouble" : "2.2000000000000001776" }, { "$numberDouble" : "1.1000000000000000888" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{"d1": [1.1,2.1,3.1]}', '{"result": { "$minN": {"input": [1.1,2.2,"3"], "n": 23 }   }}');
                                                 bson_dollar_project                                                  
---------------------------------------------------------------------
 { "result" : [ { "$numberDouble" : "1.1000000000000000888" }, { "$numberDouble" : "2.2000000000000001776" }, "3" ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$maxN": {"input":   [1, 2, 3, 5, 7, 9], "n": {"$numberDecimal": "12345678901234567890" } }   }}');
ERROR:  Conversion would exceed target type limit
SELECT * FROM bson_dollar_project('{}', '{"result": { "$minN": {"input":   [1, 2, 3, 5, 7, 9], "n": {"$numberDecimal": "12345678901234567890" } }   }}');
ERROR:  Conversion would exceed target type limit
-- $maxN/minN, n short
SELECT * FROM bson_dollar_project('{"d1": [1.1,2.1,3.1]}', '{"result": { "$maxN": {"input": [1.1,2.2,"3"], "n": 2 }   }}');
                          bson_dollar_project                          
---------------------------------------------------------------------
 { "result" : [ "3", { "$numberDouble" : "2.2000000000000001776" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{"d1": [1.1,2.1,3.1]}', '{"result": { "$minN": {"input": [1.1,2.2,"3"], "n": 2 }   }}');
                                               bson_dollar_project                                               
---------------------------------------------------------------------
 { "result" : [ { "$numberDouble" : "1.1000000000000000888" }, { "$numberDouble" : "2.2000000000000001776" } ] }
(1 row)

-- $maxN/minN, n == 1
SELECT * FROM bson_dollar_project('{"d1": [1.1,2.1,3.1]}', '{"result": { "$maxN": {"input": [1.1,2.2,"3"], "n": 1 }   }}');
  bson_dollar_project   
---------------------------------------------------------------------
 { "result" : [ "3" ] }
(1 row)

SELECT * FROM bson_dollar_project('{"d1": [1.1,2.1,3.1]}', '{"result": { "$minN": {"input": [1.1,2.2,"3"], "n": 1 }   }}');
                       bson_dollar_project                        
---------------------------------------------------------------------
 { "result" : [ { "$numberDouble" : "1.1000000000000000888" } ] }
(1 row)

-- $maxN/minN, n missing
SELECT * FROM bson_dollar_project('{"d1": [1.1,2.1,3.1]}', '{"result": { "$maxN": {"input": [1.1,2.2,"3"] }   }}');
ERROR:  Required value for 'n' is not provided
SELECT * FROM bson_dollar_project('{"d1": [1.1,2.1,3.1]}', '{"result": { "$minN": {"input": [1.1,2.2,"3"] }   }}');
ERROR:  Required value for 'n' is not provided
-- $maxN/minN, input missing
SELECT * FROM bson_dollar_project('{"d1": [1.1,2.1,3.1]}', '{"result": { "$maxN": { "n": 1 }   }}');
ERROR:  No value provided for 'input'
SELECT * FROM bson_dollar_project('{"d1": [1.1,2.1,3.1]}', '{"result": { "$minN": { "n": 1 }   }}');
ERROR:  No value provided for 'input'
-- $maxN/minN, n and input missing
SELECT * FROM bson_dollar_project('{"d1": [1.1,2.1,3.1]}', '{"result": { "$maxN": { "x": 1 }   }}');
ERROR:  Unrecognized parameter supplied for 'n' operator: x
SELECT * FROM bson_dollar_project('{"d1": [1.1,2.1,3.1]}', '{"result": { "$minN": { "x": 1 }   }}');
ERROR:  Unrecognized parameter supplied for 'n' operator: x
-- $maxN/minN, use input from $d1
SELECT * FROM bson_dollar_project('{"d1": [1.1,2.1,3.1]}', '{"result": { "$maxN": {"input": "$d1", "n": 23 }   }}');
                                                                      bson_dollar_project                                                                       
---------------------------------------------------------------------
 { "result" : [ { "$numberDouble" : "3.1000000000000000888" }, { "$numberDouble" : "2.1000000000000000888" }, { "$numberDouble" : "1.1000000000000000888" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{"d1": [1.1,2.1,3.1,4,5,6,7,8, 99,99,99,99,99]}', '{"result": { "$maxN": {"input": "$d1", "n": 2 }   }}');
                         bson_dollar_project                         
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "99" }, { "$numberInt" : "99" } ] }
(1 row)

-- $maxN/minN, tests from official jstests
SELECT * FROM bson_dollar_project('{}', '{"result": { "$maxN": {"input":  [null, 2, null, 1], "n": 3 }   }}');
                        bson_dollar_project                        
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "2" }, { "$numberInt" : "1" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$minN": {"input":  [null, 2, null, 1], "n": 3 }   }}');
                        bson_dollar_project                        
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$maxN": {"input":   [1, 2, 3, 5, 7, 9], "n": 3 }   }}');
                                    bson_dollar_project                                    
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "9" }, { "$numberInt" : "7" }, { "$numberInt" : "5" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result": { "$minN": {"input":   [1, 2, 3, 5, 7, 9], "n": 3 }   }}');
                                    bson_dollar_project                                    
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }
(1 row)

--$maxN/minN, nested array
SELECT * FROM bson_dollar_project('{"d1": [[1,2,3],[4,5,6],[7,8,9]]}', '{"result": { "$maxN": {"input": "$d1", "n": 3 }   }}');
                                                                                                                  bson_dollar_project                                                                                                                  
---------------------------------------------------------------------
 { "result" : [ [ { "$numberInt" : "7" }, { "$numberInt" : "8" }, { "$numberInt" : "9" } ], [ { "$numberInt" : "4" }, { "$numberInt" : "5" }, { "$numberInt" : "6" } ], [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] ] }
(1 row)

SELECT * FROM bson_dollar_project('{"d1": [[1,2,3],[4,5,6],[7,8,9]]}', '{"result": { "$minN": {"input": "$d1", "n": 3 }   }}');
                                                                                                                  bson_dollar_project                                                                                                                  
---------------------------------------------------------------------
 { "result" : [ [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], [ { "$numberInt" : "4" }, { "$numberInt" : "5" }, { "$numberInt" : "6" } ], [ { "$numberInt" : "7" }, { "$numberInt" : "8" }, { "$numberInt" : "9" } ] ] }
(1 row)

SELECT * FROM bson_dollar_project('{"d1": [[4,5,6],[7,8,9],1,2,3]}', '{"result": { "$maxN": {"input": "$d1", "n": 5 }   }}');
                                                                                                                bson_dollar_project                                                                                                                
---------------------------------------------------------------------
 { "result" : [ [ { "$numberInt" : "7" }, { "$numberInt" : "8" }, { "$numberInt" : "9" } ], [ { "$numberInt" : "4" }, { "$numberInt" : "5" }, { "$numberInt" : "6" } ], { "$numberInt" : "3" }, { "$numberInt" : "2" }, { "$numberInt" : "1" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{"d1": [[7,8,9],[4,5,6],1,2,3]}', '{"result": { "$minN": {"input": "$d1", "n": 5 }   }}');
                                                                                                                bson_dollar_project                                                                                                                
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" }, [ { "$numberInt" : "4" }, { "$numberInt" : "5" }, { "$numberInt" : "6" } ], [ { "$numberInt" : "7" }, { "$numberInt" : "8" }, { "$numberInt" : "9" } ] ] }
(1 row)

--$maxN/minN, numberDecimal type array
SELECT * FROM bson_dollar_project('{"d1": [{ "$numberDecimal": "2.23456789" },{"$numberDecimal": "1.23456789" }, { "$numberDecimal": "1.32456789" }, { "$numberDecimal": "1.34256789" }]}', '{"result": { "$maxN": {"input": "$d1", "n": 4 } } }');
                                                                          bson_dollar_project                                                                          
---------------------------------------------------------------------
 { "result" : [ { "$numberDecimal" : "2.23456789" }, { "$numberDecimal" : "1.34256789" }, { "$numberDecimal" : "1.32456789" }, { "$numberDecimal" : "1.23456789" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{"d1": [{ "$numberDecimal": "2.23456789" },{"$numberDecimal": "1.23456789" }, { "$numberDecimal": "1.32456789" }, { "$numberDecimal": "1.34256789" }]}', '{"result": { "$minN": {"input": "$d1", "n": 4 } } }');
                                                                          bson_dollar_project                                                                          
---------------------------------------------------------------------
 { "result" : [ { "$numberDecimal" : "1.23456789" }, { "$numberDecimal" : "1.32456789" }, { "$numberDecimal" : "1.34256789" }, { "$numberDecimal" : "2.23456789" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{"d1": [{ "$numberDecimal": "2.23456789" },{"$numberDecimal": "1.23456789" }, { "$numberDecimal": "-1.32456789" }, { "$numberDecimal": "1.34256789" }]}', '{"result": { "$maxN": {"input": "$d1", "n": 4 } } }');
                                                                          bson_dollar_project                                                                           
---------------------------------------------------------------------
 { "result" : [ { "$numberDecimal" : "2.23456789" }, { "$numberDecimal" : "1.34256789" }, { "$numberDecimal" : "1.23456789" }, { "$numberDecimal" : "-1.32456789" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{"d1": [{ "$numberDecimal": "2.23456789" },{"$numberDecimal": "1.23456789" }, { "$numberDecimal": "-1.32456789" }, { "$numberDecimal": "1.34256789" }]}', '{"result": { "$minN": {"input": "$d1", "n": 4 } } }');
                                                                          bson_dollar_project                                                                           
---------------------------------------------------------------------
 { "result" : [ { "$numberDecimal" : "-1.32456789" }, { "$numberDecimal" : "1.23456789" }, { "$numberDecimal" : "1.34256789" }, { "$numberDecimal" : "2.23456789" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{"d1": [{ "$numberDecimal": "NaN" },{"$numberDecimal": "1.23456789" }, { "$numberDecimal": "1.32456789" }, { "$numberDecimal": "1.34256789" }]}', '{"result": { "$maxN": {"input": "$d1", "n": 4 } } }');
                                                                      bson_dollar_project                                                                       
---------------------------------------------------------------------
 { "result" : [ { "$numberDecimal" : "1.34256789" }, { "$numberDecimal" : "1.32456789" }, { "$numberDecimal" : "1.23456789" }, { "$numberDecimal" : "NaN" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{"d1": [{ "$numberDecimal": "NaN" },{"$numberDecimal": "1.23456789" }, { "$numberDecimal": "1.32456789" }, { "$numberDecimal": "1.34256789" }]}', '{"result": { "$minN": {"input": "$d1", "n": 4 } } }');
                                                                      bson_dollar_project                                                                       
---------------------------------------------------------------------
 { "result" : [ { "$numberDecimal" : "NaN" }, { "$numberDecimal" : "1.23456789" }, { "$numberDecimal" : "1.32456789" }, { "$numberDecimal" : "1.34256789" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{"d1": [{ "$numberDecimal": "NaN" }, 1, 3, -2, null, [3, {"numberDouble": "NaN"}], {"$numberDecimal": "Infinity" }]}', '{"result": { "$maxN": {"input": "$d1", "n": 7 } } }');
                                                                                                 bson_dollar_project                                                                                                 
---------------------------------------------------------------------
 { "result" : [ [ { "$numberInt" : "3" }, { "numberDouble" : "NaN" } ], { "$numberDecimal" : "Infinity" }, { "$numberInt" : "3" }, { "$numberInt" : "1" }, { "$numberInt" : "-2" }, { "$numberDecimal" : "NaN" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{"d1": [{ "$numberDecimal": "NaN" }, 1, 3, -2, null, [3, {"numberDouble": "NaN"}], {"$numberDecimal": "Infinity" }]}', '{"result": { "$minN": {"input": "$d1", "n": 7 } } }');
                                                                                                 bson_dollar_project                                                                                                 
---------------------------------------------------------------------
 { "result" : [ { "$numberDecimal" : "NaN" }, { "$numberInt" : "-2" }, { "$numberInt" : "1" }, { "$numberInt" : "3" }, { "$numberDecimal" : "Infinity" }, [ { "$numberInt" : "3" }, { "numberDouble" : "NaN" } ] ] }
(1 row)

-- $sortArray
SELECT * FROM bson_dollar_project('{}', '{"result":{"$sortArray":{"input":[9,7,4,6,8],"sortBy":1}}}');
                                                            bson_dollar_project                                                            
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "4" }, { "$numberInt" : "6" }, { "$numberInt" : "7" }, { "$numberInt" : "8" }, { "$numberInt" : "9" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result":{"$sortArray":{"input":[9,7,4,6,8],"sortBy":-1}}}');
                                                            bson_dollar_project                                                            
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "9" }, { "$numberInt" : "8" }, { "$numberInt" : "7" }, { "$numberInt" : "6" }, { "$numberInt" : "4" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result":{"$sortArray":{"input":["alpha","delta","charlie","bravo"],"sortBy":1}}}');
                   bson_dollar_project                   
---------------------------------------------------------------------
 { "result" : [ "alpha", "bravo", "charlie", "delta" ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result":{"$sortArray":{"input":["alpha","delta","charlie","bravo"],"sortBy":-1}}}');
                   bson_dollar_project                   
---------------------------------------------------------------------
 { "result" : [ "delta", "charlie", "bravo", "alpha" ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result":{"$sortArray":{"input":[17],"sortBy":1}}}');
            bson_dollar_project             
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "17" } ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result":{"$sortArray":{"input":[],"sortBy":1}}}');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : [  ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result":{"$sortArray":{"input":[13,2,{"a":"itemA"},4,25,3,"itemB",{"a":null},{"a":{"type":"x","flag":true}},{"$numberDecimal":"6.78"},{"a":"itemC"}],"sortBy":1}}}');
                                                                                                                                 bson_dollar_project                                                                                                                                  
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "2" }, { "$numberInt" : "3" }, { "$numberInt" : "4" }, { "$numberDecimal" : "6.78" }, { "$numberInt" : "13" }, { "$numberInt" : "25" }, "itemB", { "a" : null }, { "a" : "itemA" }, { "a" : "itemC" }, { "a" : { "type" : "x", "flag" : true } } ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result":{"$sortArray":{"input":[[1,9,2],[8,3,5],9,2,7,10,6],"sortBy":1}}}');
                                                                                                                                        bson_dollar_project                                                                                                                                         
---------------------------------------------------------------------
 { "result" : [ { "$numberInt" : "2" }, { "$numberInt" : "6" }, { "$numberInt" : "7" }, { "$numberInt" : "9" }, { "$numberInt" : "10" }, [ { "$numberInt" : "1" }, { "$numberInt" : "9" }, { "$numberInt" : "2" } ], [ { "$numberInt" : "8" }, { "$numberInt" : "3" }, { "$numberInt" : "5" } ] ] }
(1 row)

SELECT * FROM bson_dollar_project('{}', '{"result":{"$sortArray":{"input":[{"$numberDecimal":"NaN"},3,8,2,10,7,null," "],"sortBy":1}}}');
                                                                                 bson_dollar_project                                                                                 
---------------------------------------------------------------------
 { "result" : [ null, { "$numberDecimal" : "NaN" }, { "$numberInt" : "2" }, { "$numberInt" : "3" }, { "$numberInt" : "7" }, { "$numberInt" : "8" }, { "$numberInt" : "10" }, " " ] }
(1 row)

SELECT * FROM bson_dollar_project('{"group":[{"a":"item1","b":23,"c":{"d":"value1","e":"typeA"}},{"a":"item2","b":45,"c":{"d":"value2","e":"typeB"}},{"a":"item3","b":31,"c":{"d":"value3","e":"typeC"}}]}', '{"result":{"$sortArray":{"input":"$group","sortBy":{"a":1}}}}');
                                                                                                                                        bson_dollar_project                                                                                                                                         
---------------------------------------------------------------------
 { "result" : [ { "a" : "item1", "b" : { "$numberInt" : "23" }, "c" : { "d" : "value1", "e" : "typeA" } }, { "a" : "item2", "b" : { "$numberInt" : "45" }, "c" : { "d" : "value2", "e" : "typeB" } }, { "a" : "item3", "b" : { "$numberInt" : "31" }, "c" : { "d" : "value3", "e" : "typeC" } } ] }
(1 row)

SELECT * FROM bson_dollar_project('{"group":[{"a":"item1","b":23,"c":{"d":"value1","e":"typeA"}},{"a":"item2","b":45,"c":{"d":"value2","e":"typeB"}},{"a":"item3","b":31,"c":{"d":"value3","e":"typeC"}}]}', '{"result":{"$sortArray":{"input":"$group","sortBy":{"a":-1}}}}');
                                                                                                                                        bson_dollar_project                                                                                                                                         
---------------------------------------------------------------------
 { "result" : [ { "a" : "item3", "b" : { "$numberInt" : "31" }, "c" : { "d" : "value3", "e" : "typeC" } }, { "a" : "item2", "b" : { "$numberInt" : "45" }, "c" : { "d" : "value2", "e" : "typeB" } }, { "a" : "item1", "b" : { "$numberInt" : "23" }, "c" : { "d" : "value1", "e" : "typeA" } } ] }
(1 row)

SELECT * FROM bson_dollar_project('{"group":[{"a":"item1","b":23,"c":{"d":"value1","e":"typeA"}},{"a":"item2","b":45,"c":{"d":"value2","e":"typeB"}},{"a":"item3","b":31,"c":{"d":"value3","e":"typeC"}}]}', '{"result":{"$sortArray":{"input":"$group","sortBy":{"c.e":1}}}}');
                                                                                                                                        bson_dollar_project                                                                                                                                         
---------------------------------------------------------------------
 { "result" : [ { "a" : "item1", "b" : { "$numberInt" : "23" }, "c" : { "d" : "value1", "e" : "typeA" } }, { "a" : "item2", "b" : { "$numberInt" : "45" }, "c" : { "d" : "value2", "e" : "typeB" } }, { "a" : "item3", "b" : { "$numberInt" : "31" }, "c" : { "d" : "value3", "e" : "typeC" } } ] }
(1 row)

SELECT * FROM bson_dollar_project('{"group":[{"a":"item1","b":23,"c":{"d":"value1","e":"typeA"}},{"a":"item2","b":45,"c":{"d":"value2","e":"typeB"}},{"a":"item3","b":31,"c":{"d":"value3","e":"typeC"}}]}', '{"result":{"$sortArray":{"input":"$group","sortBy":{"c.e":-1}}}}');
                                                                                                                                        bson_dollar_project                                                                                                                                         
---------------------------------------------------------------------
 { "result" : [ { "a" : "item3", "b" : { "$numberInt" : "31" }, "c" : { "d" : "value3", "e" : "typeC" } }, { "a" : "item2", "b" : { "$numberInt" : "45" }, "c" : { "d" : "value2", "e" : "typeB" } }, { "a" : "item1", "b" : { "$numberInt" : "23" }, "c" : { "d" : "value1", "e" : "typeA" } } ] }
(1 row)

SELECT * FROM bson_dollar_project('{"group":[{"a":"item1","b":23,"c":{"d":"value1","e":"typeA"}},{"a":"item2","b":45,"c":{"d":"value2","e":"typeB"}},{"a":"item3","b":31,"c":{"d":"value3","e":"typeC"}}]}', '{"result":{"$sortArray":{"input":"$group","sortBy":{"b":-1,"a":1}}}}');
                                                                                                                                        bson_dollar_project                                                                                                                                         
---------------------------------------------------------------------
 { "result" : [ { "a" : "item2", "b" : { "$numberInt" : "45" }, "c" : { "d" : "value2", "e" : "typeB" } }, { "a" : "item3", "b" : { "$numberInt" : "31" }, "c" : { "d" : "value3", "e" : "typeC" } }, { "a" : "item1", "b" : { "$numberInt" : "23" }, "c" : { "d" : "value1", "e" : "typeA" } } ] }
(1 row)

-- $sortArray, negative cases
select *from bson_dollar_project('{}', '{"result": {"$sortArray": null } }');
ERROR:  Expected 'document' type for $sortArray but found 'null' type
select *from bson_dollar_project('{}', '{"result": {"$sortArray": " " } }');
ERROR:  Expected 'document' type for $sortArray but found 'string' type
select *from bson_dollar_project('{}', '{"result": {"$sortArray": {"input": "", "sortBy": 1 } } }');
ERROR:  The provided input for the $sortArray operator must be an array, but a value of type string was received instead.
select *from bson_dollar_project('{}', '{"result": {"$sortArray": {"sortBy": 1 } } }');
ERROR:  $sortArray needs the 'input' parameter to be explicitly provided
select *from bson_dollar_project('{}', '{"result": {"$sortArray": {"input": [1, 5, 3, 2, 4] } } }');
ERROR:  The $sortArray needs the 'sortBy' parameter to be explicitly specified
select *from bson_dollar_project('{}', '{"result": {"$sortArray": {"input": "", "sortBy": 1} } }');
ERROR:  The provided input for the $sortArray operator must be an array, but a value of type string was received instead.
select *from bson_dollar_project('{}', '{"result": {"$sortArray": {"input": {}, "sortBy": 1} } }');
ERROR:  The provided input for the $sortArray operator must be an array, but a value of type object was received instead.
select *from bson_dollar_project('{}', '{"result": {"$sortArray": {"input": [1, 5, 3, 2, 4], "sortByy": 1} } }');
ERROR:  $sortArray encountered an unrecognized argument: sortByy
select *from bson_dollar_project('{}', '{"result": {"$sortArray": {"input": [1, 5, 3, 2, 4], "sortBy": 2} } }');
ERROR:  The $sort element value must be either 1 or -1
select *from bson_dollar_project('{}', '{"result": {"$sortArray": {"input": [1, 5, 3, 2, 4], "sortBy": ""} } }');
ERROR:  The $sort is invalid: use 1/-1 to sort the whole element, or {field:1/-1} to sort embedded fields
select *from bson_dollar_project('{}', '{"result": {"$sortArray": {"input": [1, 5, 3, 2, 4], "sortBy": {}} } }');
ERROR:  The $sort pattern is empty when it should be a set of fields.
-- $zip
select *from bson_dollar_project('{"a": [[1, 2, 3], [4, 5, 6]]}', '{"result": {"$zip": {"inputs": "$a"} } }');
                                                                              bson_dollar_project                                                                              
---------------------------------------------------------------------
 { "result" : [ [ { "$numberInt" : "1" }, { "$numberInt" : "4" } ], [ { "$numberInt" : "2" }, { "$numberInt" : "5" } ], [ { "$numberInt" : "3" }, { "$numberInt" : "6" } ] ] }
(1 row)

select *from bson_dollar_project('{"multitypes": [[1, true, {"value": 2}], ["a", [3, 2], "Great"]]}', '{"result": {"$zip": {"inputs": "$multitypes"} } }');
                                                                         bson_dollar_project                                                                         
---------------------------------------------------------------------
 { "result" : [ [ { "$numberInt" : "1" }, "a" ], [ true, [ { "$numberInt" : "3" }, { "$numberInt" : "2" } ] ], [ { "value" : { "$numberInt" : "2" } }, "Great" ] ] }
(1 row)

select *from bson_dollar_project('{"diffLen": [[ "a", "b" ], [ "b", "c", "d" ]]}', '{"result": {"$zip": {"inputs": "$diffLen"} } }');
              bson_dollar_project              
---------------------------------------------------------------------
 { "result" : [ [ "a", "b" ], [ "b", "c" ] ] }
(1 row)

select *from bson_dollar_project('{"useLongest": [[ 0, 1 ], [ 2, 3, 4, 5 ]]}', '{"result": {"$zip": {"inputs": "$useLongest", "useLongestLength": true} } }');
                                                                                      bson_dollar_project                                                                                      
---------------------------------------------------------------------
 { "result" : [ [ { "$numberInt" : "0" }, { "$numberInt" : "2" } ], [ { "$numberInt" : "1" }, { "$numberInt" : "3" } ], [ null, { "$numberInt" : "4" } ], [ null, { "$numberInt" : "5" } ] ] }
(1 row)

select *from bson_dollar_project('{"falseUseLongest": [[ 0 ], [ 2, 3 ]]}', '{"result": {"$zip": {"inputs": "$falseUseLongest", "useLongestLength": false} } }');
                          bson_dollar_project                          
---------------------------------------------------------------------
 { "result" : [ [ { "$numberInt" : "0" }, { "$numberInt" : "2" } ] ] }
(1 row)

select *from bson_dollar_project('{"withDefaults": [[ 0 ], [ 1, 2 ], [ 3 ]]}', '{"result": {"$zip": {"inputs": "$withDefaults", "useLongestLength": true, "defaults": [ "a", "b", "c" ]} } }');
                                                         bson_dollar_project                                                         
---------------------------------------------------------------------
 { "result" : [ [ { "$numberInt" : "0" }, { "$numberInt" : "1" }, { "$numberInt" : "3" } ], [ "a", { "$numberInt" : "2" }, "c" ] ] }
(1 row)

select *from bson_dollar_project('{"emptyArray": [[], [4, 5, 6]]}', '{"result": {"$zip": {"inputs": "$emptyArray"} } }');
 bson_dollar_project 
---------------------------------------------------------------------
 { "result" : [  ] }
(1 row)

select *from bson_dollar_project('{"emptyArrayUseLongest": [[], [4, 5, 6]]}', '{"result": {"$zip": {"inputs": "$emptyArrayUseLongest", "useLongestLength": true} } }');
                                                   bson_dollar_project                                                   
---------------------------------------------------------------------
 { "result" : [ [ null, { "$numberInt" : "4" } ], [ null, { "$numberInt" : "5" } ], [ null, { "$numberInt" : "6" } ] ] }
(1 row)

select *from bson_dollar_project('{"nullELemArray": [[null, null], [4, 5, 6]]}', '{"result": {"$zip": {"inputs": "$nullELemArray"} } }');
                                  bson_dollar_project                                  
---------------------------------------------------------------------
 { "result" : [ [ null, { "$numberInt" : "4" } ], [ null, { "$numberInt" : "5" } ] ] }
(1 row)

select *from bson_dollar_project('{"withDefaults": [[ 0 ], [ 1, 2 ], [ 3 ]]}', '{"result": {"$zip": {"inputs": "$withDefaults", "useLongestLength": true, "defaults": "$withDefaults"} } }');
                                                                                bson_dollar_project                                                                                
---------------------------------------------------------------------
 { "result" : [ [ { "$numberInt" : "0" }, { "$numberInt" : "1" }, { "$numberInt" : "3" } ], [ [ { "$numberInt" : "0" } ], { "$numberInt" : "2" }, [ { "$numberInt" : "3" } ] ] ] }
(1 row)

select *from bson_dollar_project('{"array1": [1, 2, 3], "array2": ["a", "b", "c"], "array3": ["x", "y", "z"] }', '{"result": {"$zip": {"inputs": [{ "$zip": { "inputs": ["$array1", "$array2"]}}, "$array3" ]} } }');
                                                               bson_dollar_project                                                               
---------------------------------------------------------------------
 { "result" : [ [ [ { "$numberInt" : "1" }, "a" ], "x" ], [ [ { "$numberInt" : "2" }, "b" ], "y" ], [ [ { "$numberInt" : "3" }, "c" ], "z" ] ] }
(1 row)

-- $zip, negative cases
select *from bson_dollar_project('{"a": [[ 0 ], [ 1, 2 ], [ 3 ]]}', '{"result": {"$zip": {"inputs": "$a", "defaults": [ "a", "b", "c" ]} } }');
ERROR:  defaults can only be specified when useLongestLength is set to true
select *from bson_dollar_project('{"a": [[ 0 ], [ 1, 2 ], [ 3 ]]}', '{"result": {"$zip": {"inputs": "$a", "useLongestLength": true, "defaults": [ "a", "b" ]} } }');
ERROR:  defaults and inputs are required to be of identical length
select *from bson_dollar_project('{"a": []}', '{"result": {"$zip": {"inputs": "$a"} } }');
ERROR:  $zip needs at least one provided input array
select *from bson_dollar_project('{"a": null}', '{"result": {"$zip": {"inputs": "$a"} } }');
ERROR:  Inputs must be provided as an array of expressions, but null was encountered instead.
select *from bson_dollar_project('{"a": [1]}', '{"result": {"$zip": {"inputs": "$a"} } }');
ERROR:  The $zip encountered an input that is not an array: 1
select *from bson_dollar_project('{"a": [[1,2,3], "anString"]}', '{"result": {"$zip": {"inputs": "$a"} } }');
ERROR:  The $zip encountered an input that is not an array: "anString"
select *from bson_dollar_project('{"a": [[0], [1, 2]]}', '{"result": {"$zip": {"inputs": "$a", "useLongestLength": 0} } }');
ERROR:  useLongestLength must be a boolean value, but a int type was given
select *from bson_dollar_project('{"a": [[0], [1, 2]]}', '{"result": {"$zip": {"inputs": "$a", "useLongestLength": true, "defaults": 0} } }');
ERROR:  defaults are expected to be provided as an array of expressions, but received int
