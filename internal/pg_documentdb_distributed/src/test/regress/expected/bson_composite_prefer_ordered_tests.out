SET search_path TO documentdb_api,documentdb_api_catalog,documentdb_api_internal,documentdb_core;
SET citus.next_shard_id TO 685000;
SET documentdb.next_collection_id TO 68500;
SET documentdb.next_collection_index_id TO 68500;
set documentdb.enableExtendedExplainPlans to on;
SET documentdb.enableNewCompositeIndexOpClass to on;
set documentdb.enableIndexOrderbyPushdown to on;
-- if documentdb_extended_rum exists, set alternate index handler
SELECT pg_catalog.set_config('documentdb.alternate_index_handler_name', 'extended_rum', false), extname FROM pg_extension WHERE extname = 'documentdb_extended_rum';
  set_config  |         extname         
---------------------------------------------------------------------
 extended_rum | documentdb_extended_rum
(1 row)

SELECT documentdb_api.drop_collection('comp_db2', 'query_ordered_pref') IS NOT NULL;
 ?column? 
---------------------------------------------------------------------
 t
(1 row)

SELECT documentdb_api.create_collection('comp_db2', 'query_ordered_pref');
NOTICE:  creating collection
 create_collection 
---------------------------------------------------------------------
 t
(1 row)

SELECT documentdb_api_internal.create_indexes_non_concurrently('comp_db2', '{ "createIndexes": "query_ordered_pref", "indexes": [ { "key": { "a": 1 }, "enableCompositeTerm": true, "name": "a_1" }] }', true);
                                                                                                   create_indexes_non_concurrently                                                                                                    
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "1" }, "numIndexesAfter" : { "$numberInt" : "2" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } }
(1 row)

\d documentdb_data.documents_68501
          Table "documentdb_data.documents_68501"
     Column      |  Type  | Collation | Nullable | Default 
---------------------------------------------------------------------
 shard_key_value | bigint |           | not null | 
 object_id       | bson   |           | not null | 
 document        | bson   |           | not null | 
Indexes:
    "collection_pk_68501" PRIMARY KEY, btree (shard_key_value, object_id)
    "documents_rum_index_68502" documentdb_extended_rum (document documentdb_extended_rum_catalog.bson_extended_rum_composite_path_ops (pathspec='[ "a" ]', tl='2691'))
Check constraints:
    "shard_key_value_check" CHECK (shard_key_value = '68501'::bigint)

SELECT COUNT(documentdb_api.insert_one('comp_db2', 'query_ordered_pref', FORMAT('{ "_id": %s, "a": %s }', i, i)::bson)) FROM generate_series(1, 10000) AS i;
 count 
---------------------------------------------------------------------
 10000
(1 row)

ANALYZE documentdb_data.documents_68501;
set enable_bitmapscan to off;
set documentdb.forceDisableSeqScan to on;
set documentdb_rum.preferOrderedIndexScan to off;
EXPLAIN (ANALYZE ON, COSTS OFF, VERBOSE ON, BUFFERS OFF, TIMING OFF, SUMMARY OFF) SELECT document FROM bson_aggregation_find('comp_db2',
    '{ "find": "query_ordered_pref", "filter": { "a": { "$gt": 50 } }, "projection": { "_id": 1 }, "limit": 5 }');
                                                                                                          QUERY PLAN                                                                                                          
---------------------------------------------------------------------
 Limit (actual rows=5 loops=1)
   Output: (bson_dollar_project_find(document, '{ "_id" : { "$numberInt" : "1" } }'::bson, '{ "a" : { "$gt" : { "$numberInt" : "50" } } }'::bson, '{ "now" : NOW_SYS_VARIABLE }'::bson))
   ->  Custom Scan (DocumentDBApiExplainQueryScan) (actual rows=5 loops=1)
         Output: bson_dollar_project_find(document, '{ "_id" : { "$numberInt" : "1" } }'::bson, '{ "a" : { "$gt" : { "$numberInt" : "50" } } }'::bson, '{ "now" : NOW_SYS_VARIABLE }'::bson)
         indexName: a_1
         isMultiKey: false
         indexBounds: ["a": (50, Infinity]]
         innerScanLoops: 5 loops
         scanType: regular
         scanKeyDetails: key 1: [(isInequality: true, estimatedEntryCount: 9950)]
         ->  Index Scan using a_1 on documentdb_data.documents_68501_685002 collection (actual rows=5 loops=1)
               Output: document
               Index Cond: (collection.document @> '{ "a" : { "$numberInt" : "50" } }'::bson)
(13 rows)

EXPLAIN (ANALYZE ON, COSTS OFF, VERBOSE ON, BUFFERS OFF, TIMING OFF, SUMMARY OFF) SELECT document FROM bson_aggregation_find('comp_db2',
    '{ "find": "query_ordered_pref", "filter": { "a": { "$gt": 50, "$lt": 900 } }, "projection": { "_id": 1 }, "limit": 5 }');
                                                                                                                           QUERY PLAN                                                                                                                           
---------------------------------------------------------------------
 Limit (actual rows=5 loops=1)
   Output: (bson_dollar_project_find(document, '{ "_id" : { "$numberInt" : "1" } }'::bson, '{ "a" : { "$gt" : { "$numberInt" : "50" }, "$lt" : { "$numberInt" : "900" } } }'::bson, '{ "now" : NOW_SYS_VARIABLE }'::bson))
   ->  Custom Scan (DocumentDBApiExplainQueryScan) (actual rows=5 loops=1)
         Output: bson_dollar_project_find(document, '{ "_id" : { "$numberInt" : "1" } }'::bson, '{ "a" : { "$gt" : { "$numberInt" : "50" }, "$lt" : { "$numberInt" : "900" } } }'::bson, '{ "now" : NOW_SYS_VARIABLE }'::bson)
         indexName: a_1
         isMultiKey: false
         indexBounds: ["a": (50, 900)]
         innerScanLoops: 5 loops
         scanType: regular
         scanKeyDetails: key 1: [(isInequality: true, estimatedEntryCount: 849)]
         ->  Index Scan using a_1 on documentdb_data.documents_68501_685002 collection (actual rows=5 loops=1)
               Output: document
               Index Cond: ((collection.document @> '{ "a" : { "$numberInt" : "50" } }'::bson) AND (collection.document @< '{ "a" : { "$numberInt" : "900" } }'::bson))
(13 rows)

set documentdb_rum.preferOrderedIndexScan to on;
EXPLAIN (ANALYZE ON, COSTS OFF, VERBOSE ON, BUFFERS OFF, TIMING OFF, SUMMARY OFF) SELECT document FROM bson_aggregation_find('comp_db2',
    '{ "find": "query_ordered_pref", "filter": { "a": { "$gt": 50 } }, "projection": { "_id": 1 }, "limit": 5 }');
                                                                                                          QUERY PLAN                                                                                                          
---------------------------------------------------------------------
 Limit (actual rows=5 loops=1)
   Output: (bson_dollar_project_find(document, '{ "_id" : { "$numberInt" : "1" } }'::bson, '{ "a" : { "$gt" : { "$numberInt" : "50" } } }'::bson, '{ "now" : NOW_SYS_VARIABLE }'::bson))
   ->  Custom Scan (DocumentDBApiExplainQueryScan) (actual rows=5 loops=1)
         Output: bson_dollar_project_find(document, '{ "_id" : { "$numberInt" : "1" } }'::bson, '{ "a" : { "$gt" : { "$numberInt" : "50" } } }'::bson, '{ "now" : NOW_SYS_VARIABLE }'::bson)
         indexName: a_1
         isMultiKey: false
         indexBounds: ["a": (50, Infinity]]
         innerScanLoops: 6 loops
         scanType: ordered
         scanKeyDetails: key 1: [(isInequality: true, estimatedEntryCount: 5)]
         ->  Index Scan using a_1 on documentdb_data.documents_68501_685002 collection (actual rows=5 loops=1)
               Output: document
               Index Cond: (collection.document @> '{ "a" : { "$numberInt" : "50" } }'::bson)
(13 rows)

EXPLAIN (ANALYZE ON, COSTS OFF, VERBOSE ON, BUFFERS OFF, TIMING OFF, SUMMARY OFF) SELECT document FROM bson_aggregation_find('comp_db2',
    '{ "find": "query_ordered_pref", "filter": { "a": { "$gt": 50, "$lt": 900 } }, "projection": { "_id": 1 }, "limit": 5 }');
                                                                                                                           QUERY PLAN                                                                                                                           
---------------------------------------------------------------------
 Limit (actual rows=5 loops=1)
   Output: (bson_dollar_project_find(document, '{ "_id" : { "$numberInt" : "1" } }'::bson, '{ "a" : { "$gt" : { "$numberInt" : "50" }, "$lt" : { "$numberInt" : "900" } } }'::bson, '{ "now" : NOW_SYS_VARIABLE }'::bson))
   ->  Custom Scan (DocumentDBApiExplainQueryScan) (actual rows=5 loops=1)
         Output: bson_dollar_project_find(document, '{ "_id" : { "$numberInt" : "1" } }'::bson, '{ "a" : { "$gt" : { "$numberInt" : "50" }, "$lt" : { "$numberInt" : "900" } } }'::bson, '{ "now" : NOW_SYS_VARIABLE }'::bson)
         indexName: a_1
         isMultiKey: false
         indexBounds: ["a": (50, 900)]
         innerScanLoops: 6 loops
         scanType: ordered
         scanKeyDetails: key 1: [(isInequality: true, estimatedEntryCount: 5)]
         ->  Index Scan using a_1 on documentdb_data.documents_68501_685002 collection (actual rows=5 loops=1)
               Output: document
               Index Cond: ((collection.document @> '{ "a" : { "$numberInt" : "50" } }'::bson) AND (collection.document @< '{ "a" : { "$numberInt" : "900" } }'::bson))
(13 rows)

-- test ordered scan in the presence of deletes
set documentdb.enableExtendedExplainPlans to off;
reset documentdb.forceDisableSeqScan;
SELECT documentdb_api_internal.create_indexes_non_concurrently('comp_db2', '{ "createIndexes": "ordered_delete", "indexes": [ { "key": { "a": 1 }, "name": "a_1", "enableOrderedIndex": true } ] }');
NOTICE:  creating collection
                                                                                                   create_indexes_non_concurrently                                                                                                   
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "1" }, "numIndexesAfter" : { "$numberInt" : "2" }, "createdCollectionAutomatically" : true, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } }
(1 row)

SELECT COUNT(documentdb_api.insert_one('comp_db2', 'ordered_delete', FORMAT('{ "_id": %s, "a": %s }', i, i % 50)::bson)) FROM generate_series(1, 100) i;
 count 
---------------------------------------------------------------------
   100
(1 row)

ANALYZE documentdb_data.documents_68502;
set documentdb.forceDisableSeqScan to on;
EXPLAIN (ANALYZE ON, COSTS OFF, VERBOSE ON, BUFFERS OFF, TIMING OFF, SUMMARY OFF) SELECT document FROM bson_aggregation_find('comp_db2', '{ "find": "ordered_delete", "filter": { "a": { "$lt": 4 } } }');
                                            QUERY PLAN                                             
---------------------------------------------------------------------
 Index Scan using a_1 on documentdb_data.documents_68502_685004 collection (actual rows=8 loops=1)
   Output: document
   Index Cond: (collection.document @< '{ "a" : { "$numberInt" : "4" } }'::bson)
(3 rows)

-- now delete everthing
reset documentdb.forceDisableSeqScan;
DELETE FROM documentdb_data.documents_68502;
-- vacuum the table
VACUUM documentdb_data.documents_68502;
-- query the data
set documentdb.forceDisableSeqScan to on;
EXPLAIN (ANALYZE ON, COSTS OFF, VERBOSE ON, BUFFERS OFF, TIMING OFF, SUMMARY OFF) SELECT document FROM bson_aggregation_find('comp_db2', '{ "find": "ordered_delete", "filter": { "a": { "$lt": 4 } } }');
                                            QUERY PLAN                                             
---------------------------------------------------------------------
 Index Scan using a_1 on documentdb_data.documents_68502_685004 collection (actual rows=0 loops=1)
   Output: document
   Index Cond: (collection.document @< '{ "a" : { "$numberInt" : "4" } }'::bson)
(3 rows)

-- now try with a posting tree at the end.
reset documentdb.forceDisableSeqScan;
CALL documentdb_api.drop_indexes('comp_db2', '{ "dropIndexes": "ordered_delete", "index": "a_1" }');
                          retval                          
---------------------------------------------------------------------
 { "ok" : true, "nIndexesWas" : { "$numberLong" : "2" } }
(1 row)

SELECT documentdb_api_internal.create_indexes_non_concurrently('comp_db2', '{ "createIndexes": "ordered_delete", "indexes": [ { "key": { "a": 1 }, "name": "a_1", "enableOrderedIndex": true } ] }', TRUE);
                                                                                                   create_indexes_non_concurrently                                                                                                    
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "1" }, "numIndexesAfter" : { "$numberInt" : "2" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } }
(1 row)

SELECT COUNT(documentdb_api.insert_one('comp_db2', 'ordered_delete', FORMAT('{ "_id": %s, "a": 1 }', i)::bson)) FROM generate_series(1, 5000) i;
 count 
---------------------------------------------------------------------
  5000
(1 row)

SELECT COUNT(documentdb_api.insert_one('comp_db2', 'ordered_delete', FORMAT('{ "_id": %s, "a": 2 }', i)::bson)) FROM generate_series(10001, 15000) i;
 count 
---------------------------------------------------------------------
  5000
(1 row)

SELECT COUNT(documentdb_api.insert_one('comp_db2', 'ordered_delete', FORMAT('{ "_id": %s, "a": 3 }', i)::bson)) FROM generate_series(20001, 25000) i;
 count 
---------------------------------------------------------------------
  5000
(1 row)

SELECT COUNT(documentdb_api.insert_one('comp_db2', 'ordered_delete', FORMAT('{ "_id": %s, "a": 4 }', i)::bson)) FROM generate_series(30001, 35000) i;
 count 
---------------------------------------------------------------------
  5000
(1 row)

ANALYZE documentdb_data.documents_68502;
set documentdb.forceDisableSeqScan to on;
EXPLAIN (ANALYZE ON, COSTS OFF, VERBOSE ON, BUFFERS OFF, TIMING OFF, SUMMARY OFF) SELECT document FROM bson_aggregation_find('comp_db2', '{ "find": "ordered_delete", "filter": { "a": { "$lte": 4 } } }');
                                              QUERY PLAN                                               
---------------------------------------------------------------------
 Index Scan using a_1 on documentdb_data.documents_68502_685004 collection (actual rows=20000 loops=1)
   Output: document
   Index Cond: (collection.document @<= '{ "a" : { "$numberInt" : "4" } }'::bson)
(3 rows)

-- delete the first half of TIDs from some of the posting trees
DELETE FROM documentdb_data.documents_68502 WHERE object_id >= '{ "": 10001 }' AND object_id < '{ "": 12000 }';
DELETE FROM documentdb_data.documents_68502 WHERE object_id >= '{ "": 20001 }' AND object_id < '{ "": 22500 }';
VACUUM documentdb_data.documents_68502;
reset documentdb.forceDisableSeqScan;
set enable_indexscan to off;
set enable_bitmapscan to off; 
EXPLAIN (ANALYZE ON, COSTS OFF, VERBOSE ON, BUFFERS OFF, TIMING OFF, SUMMARY OFF) SELECT document FROM bson_aggregation_find('comp_db2', '{ "find": "ordered_delete", "filter": { "a": { "$lte": 4 } } }');
                                        QUERY PLAN                                         
---------------------------------------------------------------------
 Seq Scan on documentdb_data.documents_68502_685004 collection (actual rows=15502 loops=1)
   Output: document
   Filter: (collection.document @<= '{ "a" : { "$numberInt" : "4" } }'::bson)
(3 rows)

SELECT document FROM bson_aggregation_pipeline('comp_db2', '{ "aggregate": "ordered_delete", "pipeline": [ { "$match": { "a": { "$lte": 4 } } }, { "$group": { "_id": "$a", "c": { "$count": 1 } }} ] }');
                              document                               
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "c" : { "$numberInt" : "5000" } }
 { "_id" : { "$numberInt" : "2" }, "c" : { "$numberInt" : "3001" } }
 { "_id" : { "$numberInt" : "4" }, "c" : { "$numberInt" : "5000" } }
 { "_id" : { "$numberInt" : "3" }, "c" : { "$numberInt" : "2501" } }
(4 rows)

reset enable_indexscan;
reset enable_bitmapscan;
set documentdb.forceDisableSeqScan to on;
EXPLAIN (ANALYZE OFF, COSTS OFF, VERBOSE ON, BUFFERS OFF, TIMING OFF, SUMMARY OFF) SELECT document FROM bson_aggregation_pipeline('comp_db2', '{ "aggregate": "ordered_delete", "pipeline": [ { "$match": { "a": { "$lte": 4 } } }, { "$group": { "_id": "$a", "c": { "$count": 1 } }} ] }');
                                                                                                                QUERY PLAN                                                                                                                
---------------------------------------------------------------------
 Subquery Scan on agg_stage_1
   Output: bson_repath_and_build(agg_stage_1.c1, agg_stage_1.c2, agg_stage_1.c3, agg_stage_1.c4)
   ->  HashAggregate
         Output: '_id'::text, (bson_expression_get(collection.document, '{ "" : "$a" }'::bson, true, '{ "now" : NOW_SYS_VARIABLE }'::bson)), 'c'::text, bsonsum('{ "" : { "$numberInt" : "1" } }'::bson)
         Group Key: bson_expression_get(collection.document, '{ "" : "$a" }'::bson, true, '{ "now" : NOW_SYS_VARIABLE }'::bson)
         ->  Bitmap Heap Scan on documentdb_data.documents_68502_685004 collection
               Output: bson_expression_get(collection.document, '{ "" : "$a" }'::bson, true, '{ "now" : NOW_SYS_VARIABLE }'::bson)
               Recheck Cond: (collection.document @<= '{ "a" : { "$numberInt" : "4" } }'::bson)
               ->  Bitmap Index Scan on a_1
                     Index Cond: (collection.document @<= '{ "a" : { "$numberInt" : "4" } }'::bson)
(10 rows)

SELECT document FROM bson_aggregation_pipeline('comp_db2', '{ "aggregate": "ordered_delete", "pipeline": [ { "$match": { "a": { "$lte": 4 } } }, { "$group": { "_id": "$a", "c": { "$count": 1 } }} ] }');
                              document                               
---------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "c" : { "$numberInt" : "5000" } }
 { "_id" : { "$numberInt" : "2" }, "c" : { "$numberInt" : "3001" } }
 { "_id" : { "$numberInt" : "4" }, "c" : { "$numberInt" : "5000" } }
 { "_id" : { "$numberInt" : "3" }, "c" : { "$numberInt" : "2501" } }
(4 rows)

-- now delete everthing
reset documentdb.forceDisableSeqScan;
DELETE FROM documentdb_data.documents_68502;
-- vacuum the table
VACUUM documentdb_data.documents_68502;
-- query the data
set documentdb.forceDisableSeqScan to on;
EXPLAIN (ANALYZE ON, COSTS OFF, VERBOSE ON, BUFFERS OFF, TIMING OFF, SUMMARY OFF) SELECT document FROM bson_aggregation_find('comp_db2', '{ "find": "ordered_delete", "filter": { "a": { "$lt": 4 } } }');
                                            QUERY PLAN                                             
---------------------------------------------------------------------
 Index Scan using a_1 on documentdb_data.documents_68502_685004 collection (actual rows=0 loops=1)
   Output: document
   Index Cond: (collection.document @< '{ "a" : { "$numberInt" : "4" } }'::bson)
(3 rows)

-- test scan skipping behavior.
reset documentdb.forceDisableSeqScan;
SELECT COUNT(documentdb_api.insert_one('comp_db2', 'skip_entry_asc', FORMAT('{ "_id": %s, "a": %s, "b": %s, "c": %s }', ((i * 100) + (j * 10) + k), i, j, k)::bson)) FROM generate_series(1, 5) i, generate_series(1, 10) j, generate_series(1, 100) k;
NOTICE:  creating collection
 count 
---------------------------------------------------------------------
  5000
(1 row)

SELECT documentdb_api_internal.create_indexes_non_concurrently('comp_db2', '{ "createIndexes": "skip_entry_asc", "indexes": [ { "key": { "a": 1, "b": 1, "c": 1 }, "name": "a_1", "enableOrderedIndex": true } ] }', TRUE);
                                                                                                   create_indexes_non_concurrently                                                                                                    
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "1" }, "numIndexesAfter" : { "$numberInt" : "2" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } }
(1 row)

SELECT COUNT(documentdb_api.insert_one('comp_db2', 'skip_entry_desc', FORMAT('{ "_id": %s, "a": %s, "b": %s, "c": %s }', ((i * 100) + (j * 10) + k), i, j, k)::bson)) FROM generate_series(1, 5) i, generate_series(1, 10) j, generate_series(1, 100) k;
NOTICE:  creating collection
 count 
---------------------------------------------------------------------
  5000
(1 row)

SELECT documentdb_api_internal.create_indexes_non_concurrently('comp_db2', '{ "createIndexes": "skip_entry_desc", "indexes": [ { "key": { "a": -1, "b": -1, "c": -1 }, "name": "a_1", "enableOrderedIndex": true } ] }', TRUE);
                                                                                                   create_indexes_non_concurrently                                                                                                    
---------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "1" }, "numIndexesAfter" : { "$numberInt" : "2" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } }
(1 row)

ANALYZE documentdb_data.documents_68503;
-- now test the behavior of partial skipping
set documentdb.forceDisableSeqScan to on;
set documentdb.enableExtendedExplainPlans to on;
set documentdb_rum.enableSkipIntermediateEntry to off;
EXPLAIN (ANALYZE ON, COSTS OFF, VERBOSE ON, BUFFERS OFF, TIMING OFF, SUMMARY OFF) SELECT document FROM bson_aggregation_find('comp_db2',
    '{ "find": "skip_entry_asc", "filter": { "a": { "$gte": 2, "$lte": 4 }, "c": { "$gte": 3, "$lte": 5 } } }');
                                                                                                                                                  QUERY PLAN                                                                                                                                                   
---------------------------------------------------------------------
 Custom Scan (DocumentDBApiExplainQueryScan) (actual rows=90 loops=1)
   Output: document
   indexName: a_1
   isMultiKey: false
   indexBounds: ["a": [2, 4], "b": (MinKey, MaxKey), "c": [3, 5]]
   innerScanLoops: 301 loops
   scanType: ordered
   scanKeyDetails: key 1: [(isInequality: true, estimatedEntryCount: 90)]
   ->  Index Scan using a_1 on documentdb_data.documents_68503_685006 collection (actual rows=90 loops=1)
         Output: document
         Index Cond: ((collection.document @>= '{ "a" : { "$numberInt" : "2" } }'::bson) AND (collection.document @<= '{ "a" : { "$numberInt" : "4" } }'::bson) AND (collection.document @>= '{ "c" : { "$numberInt" : "3" } }'::bson) AND (collection.document @<= '{ "c" : { "$numberInt" : "5" } }'::bson))
(11 rows)

EXPLAIN (ANALYZE ON, COSTS OFF, VERBOSE ON, BUFFERS OFF, TIMING OFF, SUMMARY OFF) SELECT document FROM bson_aggregation_find('comp_db2',
    '{ "find": "skip_entry_desc", "filter": { "a": { "$gte": 2, "$lte": 4 }, "c": { "$gte": 3, "$lte": 5 } } }');
                                                                                                                                                  QUERY PLAN                                                                                                                                                   
---------------------------------------------------------------------
 Custom Scan (DocumentDBApiExplainQueryScan) (actual rows=90 loops=1)
   Output: document
   indexName: a_1
   isMultiKey: false
   indexBounds: ["a": DESC[2, 4], "b": DESC(MinKey, MaxKey), "c": DESC[3, 5]]
   innerScanLoops: 301 loops
   scanType: ordered
   scanKeyDetails: key 1: [(isInequality: true, estimatedEntryCount: 90)]
   ->  Index Scan using a_1 on documentdb_data.documents_68504_685008 collection (actual rows=90 loops=1)
         Output: document
         Index Cond: ((collection.document @>= '{ "a" : { "$numberInt" : "2" } }'::bson) AND (collection.document @<= '{ "a" : { "$numberInt" : "4" } }'::bson) AND (collection.document @>= '{ "c" : { "$numberInt" : "3" } }'::bson) AND (collection.document @<= '{ "c" : { "$numberInt" : "5" } }'::bson))
(11 rows)

EXPLAIN (ANALYZE ON, COSTS OFF, VERBOSE ON, BUFFERS OFF, TIMING OFF, SUMMARY OFF) SELECT document FROM bson_aggregation_find('comp_db2',
    '{ "find": "skip_entry_asc", "filter": { "a": { "$in": [ 2, 3 ] }, "c": { "$gte": 3, "$lte": 5 } } }');
                                                                                                                             QUERY PLAN                                                                                                                             
---------------------------------------------------------------------
 Custom Scan (DocumentDBApiExplainQueryScan) (actual rows=60 loops=1)
   Output: document
   indexName: a_1
   isMultiKey: false
   indexBounds: ["a": [2, 2], "b": (MinKey, MaxKey), "c": [3, 5]], ["a": [3, 3], "b": (MinKey, MaxKey), "c": [3, 5]]
   innerScanLoops: 60 loops
   scanType: regular
   scanKeyDetails: key 1: [(isInequality: true, estimatedEntryCount: 30), (isInequality: true, estimatedEntryCount: 30)]
   ->  Index Scan using a_1 on documentdb_data.documents_68503_685006 collection (actual rows=60 loops=1)
         Output: document
         Index Cond: ((collection.document @*= '{ "a" : [ { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }'::bson) AND (collection.document @>= '{ "c" : { "$numberInt" : "3" } }'::bson) AND (collection.document @<= '{ "c" : { "$numberInt" : "5" } }'::bson))
(11 rows)

-- with skip entries on we skip relevant portions of the tree
set documentdb_rum.enableSkipIntermediateEntry to on;
EXPLAIN (ANALYZE ON, COSTS OFF, VERBOSE ON, BUFFERS OFF, TIMING OFF, SUMMARY OFF) SELECT document FROM bson_aggregation_find('comp_db2',
    '{ "find": "skip_entry_asc", "filter": { "a": { "$gte": 2, "$lte": 4 }, "c": { "$gte": 3, "$lte": 5 } } }');
                                                                                                                                                  QUERY PLAN                                                                                                                                                   
---------------------------------------------------------------------
 Custom Scan (DocumentDBApiExplainQueryScan) (actual rows=90 loops=1)
   Output: document
   indexName: a_1
   isMultiKey: false
   indexBounds: ["a": [2, 4], "b": (MinKey, MaxKey), "c": [3, 5]]
   innerScanLoops: 151 loops
   scanType: ordered
   scanKeyDetails: key 1: [(isInequality: true, estimatedEntryCount: 21)]
   ->  Index Scan using a_1 on documentdb_data.documents_68503_685006 collection (actual rows=90 loops=1)
         Output: document
         Index Cond: ((collection.document @>= '{ "a" : { "$numberInt" : "2" } }'::bson) AND (collection.document @<= '{ "a" : { "$numberInt" : "4" } }'::bson) AND (collection.document @>= '{ "c" : { "$numberInt" : "3" } }'::bson) AND (collection.document @<= '{ "c" : { "$numberInt" : "5" } }'::bson))
(11 rows)

EXPLAIN (ANALYZE ON, COSTS OFF, VERBOSE ON, BUFFERS OFF, TIMING OFF, SUMMARY OFF) SELECT document FROM bson_aggregation_find('comp_db2',
    '{ "find": "skip_entry_desc", "filter": { "a": { "$gte": 2, "$lte": 4 }, "c": { "$gte": 3, "$lte": 5 } } }');
                                                                                                                                                  QUERY PLAN                                                                                                                                                   
---------------------------------------------------------------------
 Custom Scan (DocumentDBApiExplainQueryScan) (actual rows=90 loops=1)
   Output: document
   indexName: a_1
   isMultiKey: false
   indexBounds: ["a": DESC[2, 4], "b": DESC(MinKey, MaxKey), "c": DESC[3, 5]]
   innerScanLoops: 151 loops
   scanType: ordered
   scanKeyDetails: key 1: [(isInequality: true, estimatedEntryCount: 15)]
   ->  Index Scan using a_1 on documentdb_data.documents_68504_685008 collection (actual rows=90 loops=1)
         Output: document
         Index Cond: ((collection.document @>= '{ "a" : { "$numberInt" : "2" } }'::bson) AND (collection.document @<= '{ "a" : { "$numberInt" : "4" } }'::bson) AND (collection.document @>= '{ "c" : { "$numberInt" : "3" } }'::bson) AND (collection.document @<= '{ "c" : { "$numberInt" : "5" } }'::bson))
(11 rows)

EXPLAIN (ANALYZE ON, COSTS OFF, VERBOSE ON, BUFFERS OFF, TIMING OFF, SUMMARY OFF) SELECT document FROM bson_aggregation_find('comp_db2',
    '{ "find": "skip_entry_asc", "filter": { "a": { "$in": [ 2, 3 ] }, "c": { "$gte": 3, "$lte": 5 } } }');
                                                                                                                             QUERY PLAN                                                                                                                             
---------------------------------------------------------------------
 Custom Scan (DocumentDBApiExplainQueryScan) (actual rows=60 loops=1)
   Output: document
   indexName: a_1
   isMultiKey: false
   indexBounds: ["a": [2, 2], "b": (MinKey, MaxKey), "c": [3, 5]], ["a": [3, 3], "b": (MinKey, MaxKey), "c": [3, 5]]
   innerScanLoops: 60 loops
   scanType: regular
   scanKeyDetails: key 1: [(isInequality: true, estimatedEntryCount: 30), (isInequality: true, estimatedEntryCount: 30)]
   ->  Index Scan using a_1 on documentdb_data.documents_68503_685006 collection (actual rows=60 loops=1)
         Output: document
         Index Cond: ((collection.document @*= '{ "a" : [ { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }'::bson) AND (collection.document @>= '{ "c" : { "$numberInt" : "3" } }'::bson) AND (collection.document @<= '{ "c" : { "$numberInt" : "5" } }'::bson))
(11 rows)

