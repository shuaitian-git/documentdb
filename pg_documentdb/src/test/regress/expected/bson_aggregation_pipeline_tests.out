SET search_path TO documentdb_api,documentdb_core,documentdb_api_catalog;
SET documentdb.next_collection_id TO 3500;
SET documentdb.next_collection_index_id TO 3500;
SELECT documentdb_api.insert_one('db','aggregation_pipeline','{"_id":"1", "int": 10, "a" : { "b" : [ "x", 1, 2.0, true ] } }', NULL);
NOTICE:  creating collection
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','aggregation_pipeline','{"_id":"2", "double": 2.0, "a" : { "b" : {"c": 3} } }', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','aggregation_pipeline','{"_id":"3", "boolean": false, "a" : "no", "b": "yes", "c": true }', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

-- fetch all rows
SELECT document FROM documentdb_api.collection('db', 'aggregation_pipeline') ORDER BY bson_get_value(document, '_id');
                                                               document                                                               
--------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : [ "x", { "$numberInt" : "1" }, { "$numberDouble" : "2.0" }, true ] } }
 { "_id" : "2", "double" : { "$numberDouble" : "2.0" }, "a" : { "b" : { "c" : { "$numberInt" : "3" } } } }
 { "_id" : "3", "boolean" : false, "a" : "no", "b" : "yes", "c" : true }
(3 rows)

-- add newField
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$addFields": { "newField" : "1", "a.y": ["p", "q"] } } ], "cursor": {} }');
                                                                                  document                                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : [ "x", { "$numberInt" : "1" }, { "$numberDouble" : "2.0" }, true ], "y" : [ "p", "q" ] }, "newField" : "1" }
 { "_id" : "2", "double" : { "$numberDouble" : "2.0" }, "a" : { "b" : { "c" : { "$numberInt" : "3" } }, "y" : [ "p", "q" ] }, "newField" : "1" }
 { "_id" : "3", "boolean" : false, "b" : "yes", "c" : true, "newField" : "1", "a" : { "y" : [ "p", "q" ] } }
(3 rows)

-- do 2 addFields
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$addFields": { "newField" : "1", "a.y": ["p", "q"] } }, { "$addFields": { "newField2": "someOtherField" } } ], "cursor": {} }');
                                                                                                  document                                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : [ "x", { "$numberInt" : "1" }, { "$numberDouble" : "2.0" }, true ], "y" : [ "p", "q" ] }, "newField" : "1", "newField2" : "someOtherField" }
 { "_id" : "2", "double" : { "$numberDouble" : "2.0" }, "a" : { "b" : { "c" : { "$numberInt" : "3" } }, "y" : [ "p", "q" ] }, "newField" : "1", "newField2" : "someOtherField" }
 { "_id" : "3", "boolean" : false, "b" : "yes", "c" : true, "newField" : "1", "a" : { "y" : [ "p", "q" ] }, "newField2" : "someOtherField" }
(3 rows)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$addFields": { "newField" : "1", "a.y": ["p", "q"] } }, { "$set": { "newField2": "someOtherField" } } ], "cursor": {} }');
                                                                                                  document                                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : [ "x", { "$numberInt" : "1" }, { "$numberDouble" : "2.0" }, true ], "y" : [ "p", "q" ] }, "newField" : "1", "newField2" : "someOtherField" }
 { "_id" : "2", "double" : { "$numberDouble" : "2.0" }, "a" : { "b" : { "c" : { "$numberInt" : "3" } }, "y" : [ "p", "q" ] }, "newField" : "1", "newField2" : "someOtherField" }
 { "_id" : "3", "boolean" : false, "b" : "yes", "c" : true, "newField" : "1", "a" : { "y" : [ "p", "q" ] }, "newField2" : "someOtherField" }
(3 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$addFields": { "newField" : "1", "a.y": ["p", "q"] } }, { "$addFields": { "newField2": "someOtherField" } } ], "cursor": {} }');
                                                                                                                                                                            QUERY PLAN                                                                                                                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on documentdb_data.documents_3500 collection
   Output: documentdb_api_internal.bson_dollar_add_fields(documentdb_api_internal.bson_dollar_add_fields(document, '{ "newField" : "1", "a.y" : [ "p", "q" ] }'::bson, '{ "now" : NOW_SYS_VARIABLE }'::bson), '{ "newField2" : "someOtherField" }'::bson, '{ "now" : NOW_SYS_VARIABLE }'::bson)
   Recheck Cond: (collection.shard_key_value = '3500'::bigint)
   ->  Bitmap Index Scan on _id_
         Index Cond: (collection.shard_key_value = '3500'::bigint)
(5 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$addFields": { "newField" : "1", "a.y": ["p", "q"] } }, { "$set": { "newField2": "someOtherField" } } ], "cursor": {} }');
                                                                                                                                                                            QUERY PLAN                                                                                                                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on documentdb_data.documents_3500 collection
   Output: documentdb_api_internal.bson_dollar_add_fields(documentdb_api_internal.bson_dollar_add_fields(document, '{ "newField" : "1", "a.y" : [ "p", "q" ] }'::bson, '{ "now" : NOW_SYS_VARIABLE }'::bson), '{ "newField2" : "someOtherField" }'::bson, '{ "now" : NOW_SYS_VARIABLE }'::bson)
   Recheck Cond: (collection.shard_key_value = '3500'::bigint)
   ->  Bitmap Index Scan on _id_
         Index Cond: (collection.shard_key_value = '3500'::bigint)
(5 rows)

-- add $project
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$project": { "_id" : 1, "a.b": 1 } } ], "cursor": {} }');
                                              document                                               
-----------------------------------------------------------------------------------------------------
 { "_id" : "1", "a" : { "b" : [ "x", { "$numberInt" : "1" }, { "$numberDouble" : "2.0" }, true ] } }
 { "_id" : "2", "a" : { "b" : { "c" : { "$numberInt" : "3" } } } }
 { "_id" : "3" }
(3 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$project": { "_id" : 1, "a.b": 1 } }, { "$set": { "newField2": "someOtherField" } }], "cursor": {} }');
                                                                                                                                                                                      QUERY PLAN                                                                                                                                                                                       
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on documentdb_data.documents_3500 collection
   Output: documentdb_api_internal.bson_dollar_add_fields(documentdb_api_internal.bson_dollar_project(document, '{ "_id" : { "$numberInt" : "1" }, "a.b" : { "$numberInt" : "1" } }'::bson, '{ "now" : NOW_SYS_VARIABLE }'::bson), '{ "newField2" : "someOtherField" }'::bson, '{ "now" : NOW_SYS_VARIABLE }'::bson)
   Recheck Cond: (collection.shard_key_value = '3500'::bigint)
   ->  Bitmap Index Scan on _id_
         Index Cond: (collection.shard_key_value = '3500'::bigint)
(5 rows)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$project": { "_id" : 1, "a.b": 1 } }, { "$set": { "newField2": "someOtherField" } }], "cursor": {} }');
                                                              document                                                               
-------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : "1", "a" : { "b" : [ "x", { "$numberInt" : "1" }, { "$numberDouble" : "2.0" }, true ] }, "newField2" : "someOtherField" }
 { "_id" : "2", "a" : { "b" : { "c" : { "$numberInt" : "3" } } }, "newField2" : "someOtherField" }
 { "_id" : "3", "newField2" : "someOtherField" }
(3 rows)

-- add $unset
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$unset": "_id" }, { "$set": { "newField2": "someOtherField" } }], "cursor": {} }');
                                                                        document                                                                         
---------------------------------------------------------------------------------------------------------------------------------------------------------
 { "int" : { "$numberInt" : "10" }, "a" : { "b" : [ "x", { "$numberInt" : "1" }, { "$numberDouble" : "2.0" }, true ] }, "newField2" : "someOtherField" }
 { "double" : { "$numberDouble" : "2.0" }, "a" : { "b" : { "c" : { "$numberInt" : "3" } } }, "newField2" : "someOtherField" }
 { "boolean" : false, "a" : "no", "b" : "yes", "c" : true, "newField2" : "someOtherField" }
(3 rows)

-- add skip
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$project": { "_id" : 1, "a.b": 1 } }, { "$skip": 1 }], "cursor": {} }');
                             document                              
-------------------------------------------------------------------
 { "_id" : "2", "a" : { "b" : { "c" : { "$numberInt" : "3" } } } }
 { "_id" : "3" }
(2 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$project": { "_id" : 1, "a.b": 1 } }, { "$skip": 1 }], "cursor": {} }');
                                                                                                        QUERY PLAN                                                                                                        
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (documentdb_api_internal.bson_dollar_project(document, '{ "_id" : { "$numberInt" : "1" }, "a.b" : { "$numberInt" : "1" } }'::bson, '{ "now" : NOW_SYS_VARIABLE }'::bson))
   ->  Bitmap Heap Scan on documentdb_data.documents_3500 collection
         Output: documentdb_api_internal.bson_dollar_project(document, '{ "_id" : { "$numberInt" : "1" }, "a.b" : { "$numberInt" : "1" } }'::bson, '{ "now" : NOW_SYS_VARIABLE }'::bson)
         Recheck Cond: (collection.shard_key_value = '3500'::bigint)
         ->  Bitmap Index Scan on _id_
               Index Cond: (collection.shard_key_value = '3500'::bigint)
(7 rows)

-- add limit
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$project": { "_id" : 1, "a.b": 1 } }, { "$limit": 1 }], "cursor": {} }');
                                              document                                               
-----------------------------------------------------------------------------------------------------
 { "_id" : "1", "a" : { "b" : [ "x", { "$numberInt" : "1" }, { "$numberDouble" : "2.0" }, true ] } }
(1 row)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$project": { "_id" : 1, "a.b": 1 } }, { "$limit": 1 }], "cursor": {} }');
                                                                                                        QUERY PLAN                                                                                                        
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (documentdb_api_internal.bson_dollar_project(document, '{ "_id" : { "$numberInt" : "1" }, "a.b" : { "$numberInt" : "1" } }'::bson, '{ "now" : NOW_SYS_VARIABLE }'::bson))
   ->  Seq Scan on documentdb_data.documents_3500 collection
         Output: documentdb_api_internal.bson_dollar_project(document, '{ "_id" : { "$numberInt" : "1" }, "a.b" : { "$numberInt" : "1" } }'::bson, '{ "now" : NOW_SYS_VARIABLE }'::bson)
(4 rows)

-- add skip + limit
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$project": { "_id" : 1, "a.b": 1 } }, { "$limit": 1 }, { "$skip": 1 }], "cursor": {} }');
 document 
----------
(0 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$project": { "_id" : 1, "a.b": 1 } }, { "$limit": 1 }, { "$skip": 1 }], "cursor": {} }');
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (documentdb_api_internal.bson_dollar_project(collection.document, '{ "_id" : { "$numberInt" : "1" }, "a.b" : { "$numberInt" : "1" } }'::bson, '{ "now" : NOW_SYS_VARIABLE }'::bson))
   ->  Limit
         Output: (documentdb_api_internal.bson_dollar_project(collection.document, '{ "_id" : { "$numberInt" : "1" }, "a.b" : { "$numberInt" : "1" } }'::bson, '{ "now" : NOW_SYS_VARIABLE }'::bson))
         ->  Seq Scan on documentdb_data.documents_3500 collection
               Output: documentdb_api_internal.bson_dollar_project(collection.document, '{ "_id" : { "$numberInt" : "1" }, "a.b" : { "$numberInt" : "1" } }'::bson, '{ "now" : NOW_SYS_VARIABLE }'::bson)
(6 rows)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$project": { "_id" : 1, "a.b": 1 } }, { "$skip": 1 }, { "$limit": 1 }], "cursor": {} }');
                             document                              
-------------------------------------------------------------------
 { "_id" : "2", "a" : { "b" : { "c" : { "$numberInt" : "3" } } } }
(1 row)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$project": { "_id" : 1, "a.b": 1 } }, { "$skip": 1 }, { "$limit": 1 }], "cursor": {} }');
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (documentdb_api_internal.bson_dollar_project(collection.document, '{ "_id" : { "$numberInt" : "1" }, "a.b" : { "$numberInt" : "1" } }'::bson, '{ "now" : NOW_SYS_VARIABLE }'::bson))
   ->  Limit
         Output: (documentdb_api_internal.bson_dollar_project(collection.document, '{ "_id" : { "$numberInt" : "1" }, "a.b" : { "$numberInt" : "1" } }'::bson, '{ "now" : NOW_SYS_VARIABLE }'::bson))
         ->  Bitmap Heap Scan on documentdb_data.documents_3500 collection
               Output: documentdb_api_internal.bson_dollar_project(collection.document, '{ "_id" : { "$numberInt" : "1" }, "a.b" : { "$numberInt" : "1" } }'::bson, '{ "now" : NOW_SYS_VARIABLE }'::bson)
               Recheck Cond: (collection.shard_key_value = '3500'::bigint)
               ->  Bitmap Index Scan on _id_
                     Index Cond: (collection.shard_key_value = '3500'::bigint)
(9 rows)

-- try match
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$match": { "_id": { "$gt": "1" } } }], "cursor": {} }');
                                                 document                                                  
-----------------------------------------------------------------------------------------------------------
 { "_id" : "2", "double" : { "$numberDouble" : "2.0" }, "a" : { "b" : { "c" : { "$numberInt" : "3" } } } }
 { "_id" : "3", "boolean" : false, "a" : "no", "b" : "yes", "c" : true }
(2 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$match": { "_id": { "$gt": "1" } } }], "cursor": {} }');
                                                   QUERY PLAN                                                    
-----------------------------------------------------------------------------------------------------------------
 Index Scan using _id_ on documentdb_data.documents_3500 collection
   Output: document
   Index Cond: ((collection.shard_key_value = '3500'::bigint) AND (collection.object_id > '{ "" : "1" }'::bson))
   Filter: (collection.document @> '{ "_id" : "1" }'::bson)
(4 rows)

-- match + project
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$match": { "_id": { "$gt": "1" } } }, { "$project": { "a.b": 1 } }], "cursor": {} }');
                             document                              
-------------------------------------------------------------------
 { "_id" : "2", "a" : { "b" : { "c" : { "$numberInt" : "3" } } } }
 { "_id" : "3" }
(2 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$match": { "_id": { "$gt": "1" } } }, { "$project": { "a.b": 1 } }], "cursor": {} }');
                                                                                     QUERY PLAN                                                                                     
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Index Scan using _id_ on documentdb_data.documents_3500 collection
   Output: documentdb_api_internal.bson_dollar_project(document, '{ "a.b" : { "$numberInt" : "1" } }'::bson, '{ "now" : NOW_SYS_VARIABLE }'::bson)
   Index Cond: ((collection.shard_key_value = '3500'::bigint) AND (collection.object_id > '{ "" : "1" }'::bson))
   Filter: (collection.document @> '{ "_id" : "1" }'::bson)
(4 rows)

-- match + project + match
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$match": { "_id": { "$gt": "1" } } }, { "$project": { "a.b": 1, "c": "$_id", "_id": 0 } }, { "$match": { "c": { "$gt": "2" } } }], "cursor": {} }');
   document    
---------------
 { "c" : "3" }
(1 row)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$match": { "_id": { "$gt": "1" } } }, { "$project": { "a.b": 1, "c": "$_id", "_id": 0 } }, { "$match": { "c": { "$gt": "2" } } }], "cursor": {} }');
                                                                                                                                                          QUERY PLAN                                                                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Index Scan using _id_ on documentdb_data.documents_3500 collection
   Output: documentdb_api_internal.bson_dollar_project(document, '{ "a.b" : { "$numberInt" : "1" }, "c" : "$_id", "_id" : { "$numberInt" : "0" } }'::bson, '{ "now" : NOW_SYS_VARIABLE }'::bson)
   Index Cond: ((collection.shard_key_value = '3500'::bigint) AND (collection.object_id > '{ "" : "1" }'::bson))
   Filter: ((collection.document @> '{ "_id" : "1" }'::bson) AND (documentdb_api_internal.bson_dollar_project(collection.document, '{ "a.b" : { "$numberInt" : "1" }, "c" : "$_id", "_id" : { "$numberInt" : "0" } }'::bson, '{ "now" : NOW_SYS_VARIABLE }'::bson) @> '{ "c" : "2" }'::bson))
(4 rows)

-- unwind
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$unwind": "$a.b" } ], "cursor": {} }');
                                                 document                                                  
-----------------------------------------------------------------------------------------------------------
 { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : "x" } }
 { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : { "$numberInt" : "1" } } }
 { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : { "$numberDouble" : "2.0" } } }
 { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : true } }
 { "_id" : "2", "double" : { "$numberDouble" : "2.0" }, "a" : { "b" : { "c" : { "$numberInt" : "3" } } } }
(5 rows)

-- match and then unwind
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$match": { "_id": { "$gt": "1" } } }, { "$unwind": "$a.b" } ], "cursor": {} }');
                                                 document                                                  
-----------------------------------------------------------------------------------------------------------
 { "_id" : "2", "double" : { "$numberDouble" : "2.0" }, "a" : { "b" : { "c" : { "$numberInt" : "3" } } } }
(1 row)

-- unwind and then match
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$unwind": "$a.b" }, { "$match": { "$expr": { "$not": { "$isArray": "$a.b" } } } } ], "cursor": {} }');
                                                 document                                                  
-----------------------------------------------------------------------------------------------------------
 { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : "x" } }
 { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : { "$numberInt" : "1" } } }
 { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : { "$numberDouble" : "2.0" } } }
 { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : true } }
 { "_id" : "2", "double" : { "$numberDouble" : "2.0" }, "a" : { "b" : { "c" : { "$numberInt" : "3" } } } }
(5 rows)

-- unwind and addfields
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$unwind": "$a.b" }, { "$addFields": { "xyz": "$_id" } } ], "cursor": {} }');
                                                        document                                                        
------------------------------------------------------------------------------------------------------------------------
 { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : "x" }, "xyz" : "1" }
 { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : { "$numberInt" : "1" } }, "xyz" : "1" }
 { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : { "$numberDouble" : "2.0" } }, "xyz" : "1" }
 { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : true }, "xyz" : "1" }
 { "_id" : "2", "double" : { "$numberDouble" : "2.0" }, "a" : { "b" : { "c" : { "$numberInt" : "3" } } }, "xyz" : "2" }
(5 rows)

-- $addFields then addFields is inlined.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$addFields": { "x": 1, "y": 2, "xyz": 3 } }, { "$addFields": { "xyz": "$_id" } } ], "cursor": {} }');
                                                                                                   document                                                                                                    
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : [ "x", { "$numberInt" : "1" }, { "$numberDouble" : "2.0" }, true ] }, "x" : { "$numberInt" : "1" }, "y" : { "$numberInt" : "2" }, "xyz" : "1" }
 { "_id" : "2", "double" : { "$numberDouble" : "2.0" }, "a" : { "b" : { "c" : { "$numberInt" : "3" } } }, "x" : { "$numberInt" : "1" }, "y" : { "$numberInt" : "2" }, "xyz" : "2" }
 { "_id" : "3", "boolean" : false, "a" : "no", "b" : "yes", "c" : true, "x" : { "$numberInt" : "1" }, "y" : { "$numberInt" : "2" }, "xyz" : "3" }
(3 rows)

EXPLAIN (COSTS OFF, VERBOSE ON ) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$addFields": { "x": 1, "y": 2, "xyz": 3 } }, { "$addFields": { "xyz": "$_id" } } ], "cursor": {} }');
                                                                                                                                                                                              QUERY PLAN                                                                                                                                                                                              
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on documentdb_data.documents_3500 collection
   Output: documentdb_api_internal.bson_dollar_add_fields(documentdb_api_internal.bson_dollar_add_fields(document, '{ "x" : { "$numberInt" : "1" }, "y" : { "$numberInt" : "2" }, "xyz" : { "$numberInt" : "3" } }'::bson, '{ "now" : NOW_SYS_VARIABLE }'::bson), '{ "xyz" : "$_id" }'::bson, '{ "now" : NOW_SYS_VARIABLE }'::bson)
   Recheck Cond: (collection.shard_key_value = '3500'::bigint)
   ->  Bitmap Index Scan on _id_
         Index Cond: (collection.shard_key_value = '3500'::bigint)
(5 rows)

-- $project then addFields can be inlined only on exclusion today
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$project": { "a": 0, "boolean": 0 } }, { "$addFields": { "a": 1, "xyz": "$_id" } } ], "cursor": {} }');
                                              document                                              
----------------------------------------------------------------------------------------------------
 { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "$numberInt" : "1" }, "xyz" : "1" }
 { "_id" : "2", "double" : { "$numberDouble" : "2.0" }, "a" : { "$numberInt" : "1" }, "xyz" : "2" }
 { "_id" : "3", "a" : { "$numberInt" : "1" }, "b" : "yes", "c" : true, "xyz" : "3" }
(3 rows)

EXPLAIN (COSTS OFF, VERBOSE ON ) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$project": { "a": 0, "boolean": 0 } }, { "$addFields": { "a": 1, "xyz": "$_id" } } ], "cursor": {} }');
                                                                                                         QUERY PLAN                                                                                                          
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Bitmap Heap Scan on documentdb_data.documents_3500 collection
   Output: documentdb_api_internal.bson_dollar_add_fields(document, '{ "a" : { "$numberInt" : "1" }, "xyz" : "$_id", "boolean" : "$$REMOVE" }'::bson, '{ "now" : NOW_SYS_VARIABLE }'::bson)
   Recheck Cond: (collection.shard_key_value = '3500'::bigint)
   ->  Bitmap Index Scan on _id_
         Index Cond: (collection.shard_key_value = '3500'::bigint)
(5 rows)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$project": { "a": 0, "boolean": 1 } }, { "$addFields": { "a": 1, "xyz": "$_id" } } ], "cursor": {} }');
ERROR:  exclusion cannot be applied to field boolean within the inclusion projection.
-- replaceRoot
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$addFields": { "e": {  "f": "$a.b" } } }, { "$replaceRoot": { "newRoot": "$e" } } ], "cursor": {} }');
                                   document                                   
------------------------------------------------------------------------------
 { "f" : [ "x", { "$numberInt" : "1" }, { "$numberDouble" : "2.0" }, true ] }
 { "f" : { "c" : { "$numberInt" : "3" } } }
 { }
(3 rows)

-- count
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$count": "d" }], "cursor": {} }');
             document             
----------------------------------
 { "d" : { "$numberInt" : "3" } }
(1 row)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$unwind": "$a.b" }, { "$count": "d" }, { "$addFields": { "e": "$d" } }], "cursor": {} }');
                            document                            
----------------------------------------------------------------
 { "d" : { "$numberInt" : "5" }, "e" : { "$numberInt" : "5" } }
(1 row)

-- replaceWith
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$addFields": { "e": {  "f": "$a.b" } } }, { "$replaceWith": "$e" } ], "cursor": {} }');
                                   document                                   
------------------------------------------------------------------------------
 { "f" : [ "x", { "$numberInt" : "1" }, { "$numberDouble" : "2.0" }, true ] }
 { "f" : { "c" : { "$numberInt" : "3" } } }
 { }
(3 rows)

-- sort
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$sort": { "_id": 1 } }], "cursor": {} }');
                                                               document                                                               
--------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : [ "x", { "$numberInt" : "1" }, { "$numberDouble" : "2.0" }, true ] } }
 { "_id" : "2", "double" : { "$numberDouble" : "2.0" }, "a" : { "b" : { "c" : { "$numberInt" : "3" } } } }
 { "_id" : "3", "boolean" : false, "a" : "no", "b" : "yes", "c" : true }
(3 rows)

-- sort + match
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$sort": { "_id": 1 } }, { "$match": { "_id": { "$gt": "1" } } } ], "cursor": {} }');
                                                 document                                                  
-----------------------------------------------------------------------------------------------------------
 { "_id" : "2", "double" : { "$numberDouble" : "2.0" }, "a" : { "b" : { "c" : { "$numberInt" : "3" } } } }
 { "_id" : "3", "boolean" : false, "a" : "no", "b" : "yes", "c" : true }
(2 rows)

-- match + sort
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$match": { "_id": { "$gt": "1" } } }, { "$sort": { "_id": 1 } } ], "cursor": {} }');
                                                 document                                                  
-----------------------------------------------------------------------------------------------------------
 { "_id" : "2", "double" : { "$numberDouble" : "2.0" }, "a" : { "b" : { "c" : { "$numberInt" : "3" } } } }
 { "_id" : "3", "boolean" : false, "a" : "no", "b" : "yes", "c" : true }
(2 rows)

-- sortByCount
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$sortByCount": { "$eq": [ { "$mod": [ { "$toInt": "$_id" }, 2 ] }, 0  ] } }, { "$sort": { "_id": 1 } }], "cursor": {} }');
                      document                       
-----------------------------------------------------
 { "_id" : false, "count" : { "$numberInt" : "2" } }
 { "_id" : true, "count" : { "$numberInt" : "1" } }
(2 rows)

-- $group
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$group": { "_id": { "$mod": [ { "$toInt": "$_id" }, 2 ] }, "d": { "$max": "$_id" }, "e": { "$count": 1 } } }], "cursor": {} }');
                                  document                                   
-----------------------------------------------------------------------------
 { "_id" : { "$numberInt" : "0" }, "d" : "2", "e" : { "$numberInt" : "1" } }
 { "_id" : { "$numberInt" : "1" }, "d" : "3", "e" : { "$numberInt" : "2" } }
(2 rows)

-- $group with first/last
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$group": { "_id": { "$mod": [ { "$toInt": "$_id" }, 2 ] }, "d": { "$first": "$_id" }, "e": { "$last":  "$_id" } } }], "cursor": {} }');
                         document                         
----------------------------------------------------------
 { "_id" : { "$numberInt" : "0" }, "d" : "2", "e" : "2" }
 { "_id" : { "$numberInt" : "1" }, "d" : "1", "e" : "3" }
(2 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$group": { "_id": { "$mod": [ { "$toInt": "$_id" }, 2 ] }, "d": { "$first": "$_id" }, "e": { "$last":  "$_id" } } }], "cursor": {} }');
                                                                                                                                                                                                                                                                                                                                QUERY PLAN                                                                                                                                                                                                                                                                                                                                

 Subquery Scan on agg_stage_0
   Output: bson_repath_and_build(agg_stage_0.c1, agg_stage_0.c2, agg_stage_0.c3, agg_stage_0.c4, agg_stage_0.c5, agg_stage_0.c6)
   ->  GroupAggregate
         Output: '_id'::text, (documentdb_api_internal.bson_expression_get(collection.document, '{ "" : { "$mod" : [ { "$toInt" : "$_id" }, { "$numberInt" : "2" } ] } }'::bson, true, '{ "now" : NOW_SYS_VARIABLE }'::bson)), 'd'::text, bsonfirstonsorted(documentdb_api_internal.bson_expression_get(collection.document, '{ "" : "$_id" }'::bson, true, '{ "now" : NOW_SYS_VARIABLE }'::bson)), 'e'::text, bsonlastonsorted(documentdb_api_internal.bson_expression_get(collection.document, '{ "" : "$_id" }'::bson, true, '{ "now" : NOW_SYS_VARIABLE }'::bson))
         Group Key: (documentdb_api_internal.bson_expression_get(collection.document, '{ "" : { "$mod" : [ { "$toInt" : "$_id" }, { "$numberInt" : "2" } ] } }'::bson, true, '{ "now" : NOW_SYS_VARIABLE }'::bson))
         ->  Sort
               Output: (documentdb_api_internal.bson_expression_get(collection.document, '{ "" : { "$mod" : [ { "$toInt" : "$_id" }, { "$numberInt" : "2" } ] } }'::bson, true, '{ "now" : NOW_SYS_VARIABLE }'::bson)), collection.document
               Sort Key: (documentdb_api_internal.bson_expression_get(collection.document, '{ "" : { "$mod" : [ { "$toInt" : "$_id" }, { "$numberInt" : "2" } ] } }'::bson, true, '{ "now" : NOW_SYS_VARIABLE }'::bson))
               ->  Bitmap Heap Scan on documentdb_data.documents_3500 collection
                     Output: documentdb_api_internal.bson_expression_get(collection.document, '{ "" : { "$mod" : [ { "$toInt" : "$_id" }, { "$numberInt" : "2" } ] } }'::bson, true, '{ "now" : NOW_SYS_VARIABLE }'::bson), collection.document
                     Recheck Cond: (collection.shard_key_value = '3500'::bigint)
                     ->  Bitmap Index Scan on _id_
                           Index Cond: (collection.shard_key_value = '3500'::bigint)
(13 rows)

-- $group with first/last sorted (TODO)
-- add $sample
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$sample": { "size": 2 } }, { "$project": { "_id": "1" } } ], "cursor": {} }');
    document     
-----------------
 { "_id" : "1" }
 { "_id" : "1" }
(2 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$sample": { "size": 2 } }, { "$project": { "_id": "1" } } ], "cursor": {} }');
                                                                                 QUERY PLAN                                                                                  
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Subquery Scan on agg_stage_1
   Output: documentdb_api_internal.bson_dollar_project(agg_stage_1.document, '{ "_id" : "1" }'::bson, '{ "now" : NOW_SYS_VARIABLE }'::bson)
   ->  Limit
         Output: collection.document, (random())
         ->  Sort
               Output: collection.document, (random())
               Sort Key: (random())
               ->  Sample Scan on documentdb_data.documents_3500 collection
                     Output: collection.document, random()
                     Sampling: system_rows ('2'::bigint)
(10 rows)

-- Sample after pass-through stages
EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$project": { "_id": "1" } }, { "$sample": { "size": 2 } }], "cursor": {} }');
                                                                                      QUERY PLAN                                                                                       
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (documentdb_api_internal.bson_dollar_project(document, '{ "_id" : "1" }'::bson, '{ "now" : NOW_SYS_VARIABLE }'::bson)), (random())
   ->  Sort
         Output: (documentdb_api_internal.bson_dollar_project(document, '{ "_id" : "1" }'::bson, '{ "now" : NOW_SYS_VARIABLE }'::bson)), (random())
         Sort Key: (random())
         ->  Sample Scan on documentdb_data.documents_3500 collection
               Output: documentdb_api_internal.bson_dollar_project(document, '{ "_id" : "1" }'::bson, '{ "now" : NOW_SYS_VARIABLE }'::bson), random()
               Sampling: system_rows ('2'::bigint)
(8 rows)

-- Sample after sample
EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$sample": { "size": 3 } }, { "$sample": { "size": 2 } }], "cursor": {} }');
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Limit
   Output: agg_stage_1.document, (random())
   ->  Sort
         Output: agg_stage_1.document, (random())
         Sort Key: (random())
         ->  Subquery Scan on agg_stage_1
               Output: agg_stage_1.document, random()
               ->  Limit
                     Output: collection.document, (random())
                     ->  Sort
                           Output: collection.document, (random())
                           Sort Key: (random())
                           ->  Sample Scan on documentdb_data.documents_3500 collection
                                 Output: collection.document, random()
                                 Sampling: system_rows ('3'::bigint)
(15 rows)

-- Sample after other stage
EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$unwind": "$a.b" }, { "$sample": { "size": 2 } }], "cursor": {} }');
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Limit
   Output: agg_stage_1.document, (random())
   ->  Sort
         Output: agg_stage_1.document, (random())
         Sort Key: (random())
         ->  Subquery Scan on agg_stage_1
               Output: agg_stage_1.document, random()
               ->  ProjectSet
                     Output: bson_dollar_unwind(collection.document, '$a.b'::text)
                     ->  Bitmap Heap Scan on documentdb_data.documents_3500 collection
                           Output: collection.shard_key_value, collection.object_id, collection.document
                           Recheck Cond: (collection.shard_key_value = '3500'::bigint)
                           ->  Bitmap Index Scan on _id_
                                 Index Cond: (collection.shard_key_value = '3500'::bigint)
(14 rows)

-- internalInhibitOptimization
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$addFields": { "newField" : "1", "a.y": ["p", "q"] } }, { "$_internalInhibitOptimization": 1 }, { "$addFields": { "newField2": "someOtherField" } } ], "cursor": {} }');
                                                                                                  document                                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : [ "x", { "$numberInt" : "1" }, { "$numberDouble" : "2.0" }, true ], "y" : [ "p", "q" ] }, "newField" : "1", "newField2" : "someOtherField" }
 { "_id" : "2", "double" : { "$numberDouble" : "2.0" }, "a" : { "b" : { "c" : { "$numberInt" : "3" } }, "y" : [ "p", "q" ] }, "newField" : "1", "newField2" : "someOtherField" }
 { "_id" : "3", "boolean" : false, "b" : "yes", "c" : true, "newField" : "1", "a" : { "y" : [ "p", "q" ] }, "newField2" : "someOtherField" }
(3 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$addFields": { "newField" : "1", "a.y": ["p", "q"] } }, { "$_internalInhibitOptimization": 1 }, { "$addFields": { "newField2": "someOtherField" } } ], "cursor": {} }');
                                                                                                    QUERY PLAN                                                                                                    
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 CTE Scan on internalinhibitoptimization inhibit_stage_1
   Output: documentdb_api_internal.bson_dollar_add_fields(inhibit_stage_1.document, '{ "newField2" : "someOtherField" }'::bson, '{ "now" : NOW_SYS_VARIABLE }'::bson)
   CTE internalinhibitoptimization
     ->  Bitmap Heap Scan on documentdb_data.documents_3500 collection
           Output: documentdb_api_internal.bson_dollar_add_fields(collection.document, '{ "newField" : "1", "a.y" : [ "p", "q" ] }'::bson, '{ "now" : NOW_SYS_VARIABLE }'::bson)
           Recheck Cond: (collection.shard_key_value = '3500'::bigint)
           ->  Bitmap Index Scan on _id_
                 Index Cond: (collection.shard_key_value = '3500'::bigint)
(8 rows)

-- facet
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$facet": { "a" : [ { "$addFields": { "newField" : "1", "a.y": ["p", "q"] } } ] } } ], "cursor": {} }');
                                                                                                                                                                                                                        document                                                                                                                                                                                                                        
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "a" : [ { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : [ "x", { "$numberInt" : "1" }, { "$numberDouble" : "2.0" }, true ], "y" : [ "p", "q" ] }, "newField" : "1" }, { "_id" : "2", "double" : { "$numberDouble" : "2.0" }, "a" : { "b" : { "c" : { "$numberInt" : "3" } }, "y" : [ "p", "q" ] }, "newField" : "1" }, { "_id" : "3", "boolean" : false, "b" : "yes", "c" : true, "newField" : "1", "a" : { "y" : [ "p", "q" ] } } ] }
(1 row)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$facet": { "a" : [ { "$addFields": { "newField" : "1", "a.y": ["p", "q"] } } ],  "b" : [ { "$count": "c" } ] } } ], "cursor": {} }');
                                                                                                                                                                                                                                              document                                                                                                                                                                                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "a" : [ { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : [ "x", { "$numberInt" : "1" }, { "$numberDouble" : "2.0" }, true ], "y" : [ "p", "q" ] }, "newField" : "1" }, { "_id" : "2", "double" : { "$numberDouble" : "2.0" }, "a" : { "b" : { "c" : { "$numberInt" : "3" } }, "y" : [ "p", "q" ] }, "newField" : "1" }, { "_id" : "3", "boolean" : false, "b" : "yes", "c" : true, "newField" : "1", "a" : { "y" : [ "p", "q" ] } } ], "b" : [ { "c" : { "$numberInt" : "3" } } ] }
(1 row)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$facet": { "a" : [ { "$addFields": { "newField" : "1", "a.y": ["p", "q"] } } ],  "b" : [ { "$count": "d" } ], "c": [ { "$unwind": "$a.b" } ] } } ], "cursor": {} }');
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            document                                                                                                                                                                                                                                                                                                                                                                                                                                                                             

 { "a" : [ { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : [ "x", { "$numberInt" : "1" }, { "$numberDouble" : "2.0" }, true ], "y" : [ "p", "q" ] }, "newField" : "1" }, { "_id" : "2", "double" : { "$numberDouble" : "2.0" }, "a" : { "b" : { "c" : { "$numberInt" : "3" } }, "y" : [ "p", "q" ] }, "newField" : "1" }, { "_id" : "3", "boolean" : false, "b" : "yes", "c" : true, "newField" : "1", "a" : { "y" : [ "p", "q" ] } } ], "b" : [ { "d" : { "$numberInt" : "3" } } ], "c" : [ { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : "x" } }, { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : { "$numberInt" : "1" } } }, { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : { "$numberDouble" : "2.0" } } }, { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : true } }, { "_id" : "2", "double" : { "$numberDouble" : "2.0" }, "a" : { "b" : { "c" : { "$numberInt" : "3" } } } } ] }
(1 row)

EXPlAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$facet": { "a" : [ { "$addFields": { "newField" : "1", "a.y": ["p", "q"] } } ],  "b" : [ { "$count": "d" } ], "c": [ { "$unwind": "$a.b" } ] } } ], "cursor": {} }');
                                                                                                                                           QUERY PLAN                                                                                                                                           
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: bson_object_agg((COALESCE(bson_array_agg(documentdb_api_internal.bson_dollar_add_fields(facetsub_stage_1.document, '{ "newField" : "1", "a.y" : [ "p", "q" ] }'::bson, '{ "now" : NOW_SYS_VARIABLE }'::bson), 'a'::text), '{ "a" : [  ] }'::bson)))
   CTE facet_base_0_0
     ->  Bitmap Heap Scan on documentdb_data.documents_3500 collection
           Output: collection.document
           Recheck Cond: (collection.shard_key_value = '3500'::bigint)
           ->  Bitmap Index Scan on _id_
                 Index Cond: (collection.shard_key_value = '3500'::bigint)
   ->  Append
         ->  Aggregate
               Output: COALESCE(bson_array_agg(documentdb_api_internal.bson_dollar_add_fields(facetsub_stage_1.document, '{ "newField" : "1", "a.y" : [ "p", "q" ] }'::bson, '{ "now" : NOW_SYS_VARIABLE }'::bson), 'a'::text), '{ "a" : [  ] }'::bson)
               ->  CTE Scan on facet_base_0_0 facetsub_stage_1
                     Output: facetsub_stage_1.document
         ->  Aggregate
               Output: COALESCE(bson_array_agg((bson_repath_and_build('d'::text, bsonsum('{ "" : { "$numberInt" : "1" } }'::bson))), 'b'::text), '{ "b" : [  ] }'::bson)
               ->  Aggregate
                     Output: bson_repath_and_build('d'::text, bsonsum('{ "" : { "$numberInt" : "1" } }'::bson))
                     ->  CTE Scan on facet_base_0_0 facetsub_stage_2
         ->  Aggregate
               Output: COALESCE(bson_array_agg((bson_dollar_unwind(facetsub_stage_3.document, '$a.b'::text)), 'c'::text), '{ "c" : [  ] }'::bson)
               ->  ProjectSet
                     Output: bson_dollar_unwind(facetsub_stage_3.document, '$a.b'::text)
                     ->  CTE Scan on facet_base_0_0 facetsub_stage_3
                           Output: facetsub_stage_3.document
(24 rows)

-- facet with parent transform:
SELECT document FROM bson_aggregation_pipeline('db', 
'{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$unwind": "$a.b" }, { "$facet": { "a" : [ { "$unset": "_id" } ],  "b" : [ { "$count": "d" } ], "c": [ { "$replaceWith": { "f": "$_id" } } ] } } ], "cursor": {} }');
                                                                                                                                                                                                                                                            document                                                                                                                                                                                                                                                             

 { "a" : [ { "int" : { "$numberInt" : "10" }, "a" : { "b" : "x" } }, { "int" : { "$numberInt" : "10" }, "a" : { "b" : { "$numberInt" : "1" } } }, { "int" : { "$numberInt" : "10" }, "a" : { "b" : { "$numberDouble" : "2.0" } } }, { "int" : { "$numberInt" : "10" }, "a" : { "b" : true } }, { "double" : { "$numberDouble" : "2.0" }, "a" : { "b" : { "c" : { "$numberInt" : "3" } } } } ], "b" : [ { "d" : { "$numberInt" : "5" } } ], "c" : [ { "f" : "1" }, { "f" : "1" }, { "f" : "1" }, { "f" : "1" }, { "f" : "2" } ] }
(1 row)

-- FIND
SELECT document FROM bson_aggregation_find('db', '{ "find": "aggregation_pipeline", "filter": { "_id": { "$gt": "1" } }, "projection": { "a.b": 1 }, "sort": { "_id": 1 }, "skip": 1, "limit": 2 }');
    document     
-----------------
 { "_id" : "3" }
(1 row)

BEGIN;
set local documentdb.enableIndexOrderbyPushdown to on;
EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_find('db', '{ "find": "aggregation_pipeline", "filter": { "_id": { "$gt": "1" } }, "projection": { "a.b": 1 }, "sort": { "_id": 1 }, "skip": 1, "limit": 2 }');
                                                                                                                                               QUERY PLAN                                                                                                                                               
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (documentdb_api_internal.bson_dollar_project_find(document, '{ "a.b" : { "$numberInt" : "1" } }'::bson, '{ "_id" : { "$gt" : "1" } }'::bson, '{ "now" : NOW_SYS_VARIABLE }'::bson)), (bson_orderby(document, '{ "_id" : { "$numberInt" : "1" } }'::bson))
   ->  Index Scan using _id_ on documentdb_data.documents_3500 collection
         Output: documentdb_api_internal.bson_dollar_project_find(document, '{ "a.b" : { "$numberInt" : "1" } }'::bson, '{ "_id" : { "$gt" : "1" } }'::bson, '{ "now" : NOW_SYS_VARIABLE }'::bson), bson_orderby(document, '{ "_id" : { "$numberInt" : "1" } }'::bson)
         Index Cond: ((collection.shard_key_value = '3500'::bigint) AND (collection.object_id > '{ "" : "1" }'::bson))
         Filter: (collection.document @> '{ "_id" : "1" }'::bson)
(6 rows)

ROLLBACK;
-- FIND with $natural
SELECT document FROM bson_aggregation_find('db', '{ "find": "aggregation_pipeline", "projection": {}, "sort": { "$natural": 1 }}');
                                                               document                                                               
--------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : [ "x", { "$numberInt" : "1" }, { "$numberDouble" : "2.0" }, true ] } }
 { "_id" : "2", "double" : { "$numberDouble" : "2.0" }, "a" : { "b" : { "c" : { "$numberInt" : "3" } } } }
 { "_id" : "3", "boolean" : false, "a" : "no", "b" : "yes", "c" : true }
(3 rows)

SELECT document FROM bson_aggregation_find('db', '{ "find": "aggregation_pipeline", "projection": {}, "sort": { "$natural": -1 }}');
                                                               document                                                               
--------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : "3", "boolean" : false, "a" : "no", "b" : "yes", "c" : true }
 { "_id" : "2", "double" : { "$numberDouble" : "2.0" }, "a" : { "b" : { "c" : { "$numberInt" : "3" } } } }
 { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : [ "x", { "$numberInt" : "1" }, { "$numberDouble" : "2.0" }, true ] } }
(3 rows)

SELECT document FROM bson_aggregation_find('db', '{ "find": "aggregation_pipeline", "projection": {}, "sort": { "$natural": 1, "$natural": -1 }}');
                                                               document                                                               
--------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : "3", "boolean" : false, "a" : "no", "b" : "yes", "c" : true }
 { "_id" : "2", "double" : { "$numberDouble" : "2.0" }, "a" : { "b" : { "c" : { "$numberInt" : "3" } } } }
 { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : [ "x", { "$numberInt" : "1" }, { "$numberDouble" : "2.0" }, true ] } }
(3 rows)

SELECT document FROM bson_aggregation_find('db', '{ "find": "aggregation_pipeline", "projection": { "a.b": 1 }, "sort": { "$natural": -1 }}');
                                              document                                               
-----------------------------------------------------------------------------------------------------
 { "_id" : "3" }
 { "_id" : "2", "a" : { "b" : { "c" : { "$numberInt" : "3" } } } }
 { "_id" : "1", "a" : { "b" : [ "x", { "$numberInt" : "1" }, { "$numberDouble" : "2.0" }, true ] } }
(3 rows)

-- FIND with $natural when target is view
SELECT documentdb_api.create_collection_view('db', '{ "create": "targetView", "viewOn": "aggregation_pipeline", "pipeline": [ { "$project": { "_id": 1, "a" : 1 } } ] }');
         create_collection_view         
----------------------------------------
 { "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT document FROM bson_aggregation_find('db', '{ "find": "targetView", "projection": {}, "sort": { "$natural": 1 }}');
                                              document                                               
-----------------------------------------------------------------------------------------------------
 { "_id" : "1", "a" : { "b" : [ "x", { "$numberInt" : "1" }, { "$numberDouble" : "2.0" }, true ] } }
 { "_id" : "2", "a" : { "b" : { "c" : { "$numberInt" : "3" } } } }
 { "_id" : "3", "a" : "no" }
(3 rows)

SELECT document FROM bson_aggregation_find('db', '{ "find": "targetView", "projection": {}, "sort": { "$natural": -1 }}');
                                              document                                               
-----------------------------------------------------------------------------------------------------
 { "_id" : "3", "a" : "no" }
 { "_id" : "2", "a" : { "b" : { "c" : { "$numberInt" : "3" } } } }
 { "_id" : "1", "a" : { "b" : [ "x", { "$numberInt" : "1" }, { "$numberDouble" : "2.0" }, true ] } }
(3 rows)

-- $natural negative 
SELECT document FROM bson_aggregation_find('db', '{ "find": "aggregation_pipeline", "projection": { "a.b": 1 }, "sort": { "$natural": "string" }}');
ERROR:  Sort direction value "string" is not valid
SELECT document FROM bson_aggregation_find('db', '{ "find": "aggregation_pipeline", "projection": { "a.b": 1 }, "sort": { "$natural": 2.12 }}');
ERROR:  $natural sort cannot be set to a value other than -1 or 1.
SELECT document FROM bson_aggregation_find('db', '{ "find": "aggregation_pipeline", "projection": { "a.b": 1 }, "sort": { "$natural": 3 }}');
ERROR:  $natural sort cannot be set to a value other than -1 or 1.
SELECT document FROM bson_aggregation_find('db', '{ "find": "aggregation_pipeline", "projection": { "a.b": 1 }, "sort": { "$natural": true }}');
ERROR:  Sort direction value true is not valid
SELECT document FROM bson_aggregation_find('db', '{ "find": "aggregation_pipeline", "projection": { "a.b": 1 }, "sort": { "$size":1, "$natural": 1 }}');
ERROR:  $natural sort cannot be set to a value other than -1 or 1.
-- $natural EXPLAIN
EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_find('db', '{ "find": "aggregation_pipeline", "projection": {}, "sort": { "$natural": 1 }}');
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Sort
   Output: document, ctid
   Sort Key: collection.ctid NULLS FIRST
   ->  Bitmap Heap Scan on documentdb_data.documents_3500 collection
         Output: document, ctid
         Recheck Cond: (collection.shard_key_value = '3500'::bigint)
         ->  Bitmap Index Scan on _id_
               Index Cond: (collection.shard_key_value = '3500'::bigint)
(8 rows)

-- count
SELECT document FROM bson_aggregation_count('db', '{ "count": "aggregation_pipeline" }');
                               document                               
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "3" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT document FROM bson_aggregation_count('db', '{ "count": "aggregation_pipeline", "query": { "_id": { "$gt": "1" } } }');
                               document                               
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "2" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

-- count with skip
SELECT document FROM bson_aggregation_count('db', '{ "count": "aggregation_pipeline", "query": {}, "skip": 0 }');
                               document                               
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "3" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT document FROM bson_aggregation_count('db', '{ "count": "aggregation_pipeline", "query": {}, "skip": 1 }');
                               document                               
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "2" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT document FROM bson_aggregation_count('db', '{ "count": "aggregation_pipeline", "query": {}, "skip": null }');
                               document                               
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "3" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT document FROM bson_aggregation_count('db', '{ "count": "aggregation_pipeline", "query": {}, "skip": -3.14159 }');
ERROR:  The BSON field 'skip' requires a value greater than or equal to 0, but the given value is '-3'.
SELECT document FROM bson_aggregation_count('db', '{ "count": "aggregation_pipeline", "query": {}, "skip": -9223372036854775808 }');
ERROR:  The BSON field 'skip' requires a value greater than or equal to 0, but the given value is '-9223372036854775808'.
SELECT document FROM bson_aggregation_count('db', '{ "count": "non_existent_coll" }');
                               document                               
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "0" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT document FROM documentdb_api.count_query('db', '{ "count": "aggregation_pipeline", "query": { "_id": { "$gt": "1" } } }');
                               document                               
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "2" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT document FROM documentdb_api.count_query('db', '{ "count": "aggregation_pipeline" }');
                               document                               
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "3" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT document FROM documentdb_api.count_query('db', '{ "count": "aggregation_pipeline", "query": {}, "skip": null }');
                               document                               
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "3" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT document FROM documentdb_api.count_query('db', '{ "count": "aggregation_pipeline", "query": {}, "skip": -3.14159 }');
ERROR:  The BSON field 'skip' requires a value greater than or equal to 0, but the given value is '-3'.
SELECT document FROM documentdb_api.count_query('db', '{ "count": "aggregation_pipeline", "query": {}, "skip": -9223372036854775808 }');
ERROR:  The BSON field 'skip' requires a value greater than or equal to 0, but the given value is '-9223372036854775808'.
-- handling of skip as an aggregation stage; this is different from skip in a count query
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [{ "$match": {}}, { "$skip": 0 }], "cursor": {}}');
                                                               document                                                               
--------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : [ "x", { "$numberInt" : "1" }, { "$numberDouble" : "2.0" }, true ] } }
 { "_id" : "2", "double" : { "$numberDouble" : "2.0" }, "a" : { "b" : { "c" : { "$numberInt" : "3" } } } }
 { "_id" : "3", "boolean" : false, "a" : "no", "b" : "yes", "c" : true }
(3 rows)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [{ "$match": {}}, { "$skip": 1 }], "cursor": {}}');
                                                 document                                                  
-----------------------------------------------------------------------------------------------------------
 { "_id" : "2", "double" : { "$numberDouble" : "2.0" }, "a" : { "b" : { "c" : { "$numberInt" : "3" } } } }
 { "_id" : "3", "boolean" : false, "a" : "no", "b" : "yes", "c" : true }
(2 rows)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [{ "$match": {}}, { "$skip": null }], "cursor": {}}');
ERROR:  $skip requires a numeric argument
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [{ "$match": {}}, { "$skip": -3.14159 }], "cursor": {}}');
ERROR:  Invalid parameter provided to $skip stage: value cannot be expressed as a 64-bit integer $skip: -3.141590
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [{ "$match": {}}, { "$skip": -9223372036854775808 }], "cursor": {}}');
ERROR:  Invalid argument provided to $skip stage: A non-negative numerical value was expected in $skip, but received -9223372036854775808.
-- EXPLAIN the counts
EXPLAIN (COSTS OFF) SELECT document FROM bson_aggregation_count('db', '{ "count": "aggregation_pipeline" }');
                     QUERY PLAN                     
----------------------------------------------------
 Function Scan on coll_stats_aggregation collection
(1 row)

EXPLAIN (COSTS OFF) SELECT document FROM bson_aggregation_count('db', '{ "count": "aggregation_pipeline", "query": { "_id": { "$gt": "1" } } }');
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Aggregate
   ->  Index Scan using _id_ on documents_3500 collection
         Index Cond: ((shard_key_value = '3500'::bigint) AND (object_id > '{ "" : "1" }'::bson))
         Filter: (document @> '{ "_id" : "1" }'::bson)
(4 rows)

EXPLAIN (COSTS OFF) SELECT document FROM bson_aggregation_count('db', '{ "count": "non_existent_coll" }');
                     QUERY PLAN                     
----------------------------------------------------
 Aggregate
   ->  Function Scan on empty_data_table collection
(2 rows)

-- distinct
SELECT document FROM bson_aggregation_distinct('db', '{ "distinct": "aggregation_pipeline", "key": "_id" }');
                               document                               
----------------------------------------------------------------------
 { "values" : [ "1", "2", "3" ], "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT document FROM bson_aggregation_distinct('db', '{ "distinct": "non_existent_coll", "key": "foo" }');
                        document                         
---------------------------------------------------------
 { "values" : [  ], "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT document FROM documentdb_api.distinct_query('db', '{ "distinct": "aggregation_pipeline", "key": "_id" }');
                               document                               
----------------------------------------------------------------------
 { "values" : [ "1", "2", "3" ], "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT document FROM documentdb_api.distinct_query('db', '{ "distinct": "non_existent_coll", "key": "foo" }');
                        document                         
---------------------------------------------------------
 { "values" : [  ], "ok" : { "$numberDouble" : "1.0" } }
(1 row)

-- Vector search with cosmosSearch
SELECT documentdb_api.insert_one('db', 'aggregation_pipeline', '{ "_id": 6, "a": "some sentence", "v": [3.0, 5.0, 1.1 ] }');
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db', 'aggregation_pipeline', '{ "_id": 7, "a": "some other sentence", "v": [8.0, 5.0, 0.1 ] }');
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api_internal.create_indexes_non_concurrently('db', '{ "createIndexes": "aggregation_pipeline", "indexes": [ { "key": { "v": "cosmosSearch" }, "name": "foo_1", "cosmosSearchOptions": { "kind": "vector-ivf", "numLists": 2, "similarity": "COS", "dimensions": 3 } } ] }', true);
                                                                                                   create_indexes_non_concurrently                                                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "1" }, "numIndexesAfter" : { "$numberInt" : "2" }, "createdCollectionAutomatically" : false, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } }
(1 row)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 1, "path": "v" }  } } ], "cursor": {} }');
                                                                                                                            document                                                                                                                            
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "a" : "some sentence", "v" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "5.0" }, { "$numberDouble" : "1.1000000000000000888" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "0.99986126308999445644" } } }
(1 row)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 1, "path": "v" }  } } ], "cursor": {} }');
                                                                                                                               QUERY PLAN                                                                                                                                
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Subquery Scan on agg_stage_0
   Output: documentdb_api_internal.bson_document_add_score_field(agg_stage_0.document, ('1'::double precision - (public.vector(documentdb_api_internal.bson_extract_vector(agg_stage_0.document, 'v'::text), 3, true) OPERATOR(public.<=>) '[3,4.9,1]'::public.vector)))
   ->  Limit
         Output: collection.document, ((public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<=>) '[3,4.9,1]'::public.vector))
         ->  Custom Scan (DocumentDBApiQueryScan)
               Output: collection.document, (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<=>) '[3,4.9,1]'::public.vector)
               CosmosSearch Custom Params: { "nProbes" : 2 }
               ->  Index Scan using foo_1 on documentdb_data.documents_3500 collection
                     Output: collection.document
                     Order By: (public.vector(documentdb_api_internal.bson_extract_vector(collection.document, 'v'::text), 3, true) OPERATOR(public.<=>) '[3,4.9,1]'::public.vector)
(10 rows)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 1, "path": "v", "filter": {"a": "some sentence"} }  } } ], "cursor": {} }');
ERROR:  The index for filter path 'a' was not found, please check whether the index is created.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 1, "path": "v", "filter": "some sentence" }  } } ], "cursor": {} }');
ERROR:  $filter must be a document value.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 1, "path": "v", "filter": {} }  } } ], "cursor": {} }');
                                                                                                                            document                                                                                                                            
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "a" : "some sentence", "v" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "5.0" }, { "$numberDouble" : "1.1000000000000000888" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "0.99986126308999445644" } } }
(1 row)

-- search with nProbes
-- numLists <= data size, using data as centroids, to avoid randomized centroids generated by pgvector
ANALYZE;
BEGIN;
SET LOCAL enable_seqscan = off;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "nProbes": 2 }  } } ], "cursor": {} }');
                                                                                                                               document                                                                                                                                
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "a" : "some sentence", "v" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "5.0" }, { "$numberDouble" : "1.1000000000000000888" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "0.99986126308999445644" } } }
 { "_id" : { "$numberInt" : "7" }, "a" : "some other sentence", "v" : [ { "$numberDouble" : "8.0" }, { "$numberDouble" : "5.0" }, { "$numberDouble" : "0.10000000000000000555" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "0.88331075895982669177" } } }
(2 rows)

COMMIT;
BEGIN;
SET LOCAL enable_seqscan = off;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "nProbes": 1 }  } } ], "cursor": {} }');
                                                                                                                            document                                                                                                                            
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "a" : "some sentence", "v" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "5.0" }, { "$numberDouble" : "1.1000000000000000888" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "0.99986126308999445644" } } }
(1 row)

COMMIT;
BEGIN;
SET LOCAL enable_seqscan = off;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v" }  } } ], "cursor": {} }');
                                                                                                                               document                                                                                                                                
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : { "$numberInt" : "6" }, "a" : "some sentence", "v" : [ { "$numberDouble" : "3.0" }, { "$numberDouble" : "5.0" }, { "$numberDouble" : "1.1000000000000000888" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "0.99986126308999445644" } } }
 { "_id" : { "$numberInt" : "7" }, "a" : "some other sentence", "v" : [ { "$numberDouble" : "8.0" }, { "$numberDouble" : "5.0" }, { "$numberDouble" : "0.10000000000000000555" } ], "__cosmos_meta__" : { "score" : { "$numberDouble" : "0.88331075895982669177" } } }
(2 rows)

COMMIT;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "nProbes": 10000000 }  } } ], "cursor": {} }');
ERROR:  The value of $nProbes must not exceed 32768.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "nProbes": -5 }  } } ], "cursor": {} }');
ERROR:  The value of $nProbes should be at least 1.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "nProbes": "5" }  } } ], "cursor": {} }');
ERROR:  $nProbes is required to be an integer value.
-- numLists > data size, pgvector will generate randomized centroids, using original vector data to query
CALL documentdb_api.drop_indexes('db', '{ "dropIndexes": "aggregation_pipeline", "index": "foo_1"}');
                          retval                          
----------------------------------------------------------
 { "ok" : true, "nIndexesWas" : { "$numberLong" : "2" } }
(1 row)

SELECT documentdb_api_internal.create_indexes_non_concurrently('db', '{ "createIndexes": "aggregation_pipeline", "indexes": [ { "key": { "v": "cosmosSearch" }, "name": "foo_1", "cosmosSearchOptions": { "kind": "vector-ivf", "numLists": 10000, "similarity": "COS", "dimensions": 3 } } ] }', true);
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
ERROR:  memory required is 394 MB, maintenance_work_mem is 64 MB
CONTEXT:  SQL statement "CREATE INDEX documents_rum_index_3502 ON documentdb_data.documents_3500 USING ivfflat(CAST(documentdb_api_internal.bson_extract_vector(document, 'v'::text) AS public.vector(3)) public.vector_cosine_ops) WITH (lists = 10000) WHERE documentdb_api_internal.bson_extract_vector(document, 'v'::text) IS NOT NULL"
ANALYZE;
BEGIN;
SET LOCAL enable_seqscan = off;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 2, "path": "v", "nProbes": 10000 }  } } ], "cursor": {} }');
ERROR:  Similarity index was not found for a vector similarity search query.
COMMIT;
BEGIN;
SET LOCAL enable_seqscan = off;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 5.0, 1.1 ], "k": 2, "path": "v", "nProbes": 1 }  } } ], "cursor": {} }');
ERROR:  Similarity index was not found for a vector similarity search query.
COMMIT;
SELECT documentdb_test_helpers.drop_primary_key('db','aggregation_pipeline');
 drop_primary_key 
------------------
 
(1 row)

BEGIN;
set local enable_seqscan to off;
EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 1, "path": "v", "nProbes": 1 }  } } ], "cursor": {} }');
ERROR:  Similarity index was not found for a vector similarity search query.
EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 1, "path": "v" }  } } ], "cursor": {} }');
ERROR:  current transaction is aborted, commands ignored until end of transaction block
ROLLBACK;
-- Vector search with knnBeta
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "knnBeta": { "vector": [ 3.0, 5.0, 1.1 ], "k": 1, "path": "v" }  } } ], "cursor": {} }');
ERROR:  Similarity index was not found for a vector similarity search query.
EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "knnBeta": { "vector": [ 3.0, 4.9, 1.0 ], "k": 1, "path": "v" }  } } ], "cursor": {} }');
ERROR:  Similarity index was not found for a vector similarity search query.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "knnBeta": { "vector": [ 3.0, 4.9, 1.0 ], "k": 1, "path": "v", "filter": {"a": "some sentence"} }  } } ], "cursor": {} }');
ERROR:  $filter is not supported for knnBeta queries.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "knnBeta": { "vector": [ 3.0, 4.9, 1.0 ], "k": 1, "path": "v", "filter": "some" }  } } ], "cursor": {} }');
ERROR:  $filter must be a document value.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "knnBeta": { "vector": [ 3.0, 5.0, 1.1 ], "k": 1, "path": "v", "filter": {} }  } } ], "cursor": {} }');
ERROR:  Similarity index was not found for a vector similarity search query.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "knnBeta": { "vector": [ 3.0, 4.9, 1.0 ], "k": 1, "path": "v", "score": {"a": "some sentence"} }  } } ], "cursor": {} }');
ERROR:  $score is not supported for knnBeta queries.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "knnBeta": { "vector": [ 3.0, 4.9, 1.0 ], "k": 1, "path": "v", "score": 100 }  } } ], "cursor": {} }');
ERROR:  $score must be a document value.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "knnBeta": { "vector": [ 3.0, 5.0, 1.1 ], "k": 1, "path": "v", "score": {} }  } } ], "cursor": {} }');
ERROR:  Similarity index was not found for a vector similarity search query.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$search": { "unknowType": { "vector": [ 3.0, 4.9, 1.0 ], "k": 1, "path": "v" }  } } ], "cursor": {} }');
ERROR:  Unrecognized $search option: unknowType, should be one of: cosmosSearch, knnBeta.
-- non supported vector index type
SELECT documentdb_api_internal.create_indexes_non_concurrently('db', '{ "createIndexes": "aggregation_pipeline_vector", "indexes": [ { "key": { "v": "cosmosSearch" }, "name": "idx_vector", "cosmosSearchOptions": { "kind": "vector-diskann", "similarity": "COS", "dimensions": 3 } } ] }');
ERROR:  Error in specification { "key" : { "v" : "cosmosSearch" }, "name" : "idx_vector", "cosmosSearchOptions" : { "kind" : "vector-diskann", "similarity" : "COS", "dimensions" : 3 } }:Invalid search index kind vector-diskann
SELECT documentdb_api_internal.create_indexes_non_concurrently('db', '{ "createIndexes": "aggregation_pipeline_vector", "indexes": [ { "key": { "v": "cosmosSearch" }, "name": "idx_vector", "cosmosSearchOptions": { "kind": "vector-scann", "similarity": "COS", "dimensions": 3 } } ] }');
ERROR:  Error in specification { "key" : { "v" : "cosmosSearch" }, "name" : "idx_vector", "cosmosSearchOptions" : { "kind" : "vector-scann", "similarity" : "COS", "dimensions" : 3 } }:Invalid search index kind vector-scann
-- $lookup
SELECT documentdb_api.insert_one('db','agg_pipeline_movie_screenings',' { "_id" : 1, "movie_title" : "Interstellar", "ticket_price" : 15, "tickets_sold" : 120 }', NULL);
NOTICE:  creating collection
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','agg_pipeline_movie_screenings','{ "_id" : 2, "movie_title" : "Inception", "ticket_price" : 13, "tickets_sold" : 100 }', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','agg_pipeline_movie_screenings',' { "_id" : 3, "movie_title" : "Dune", "ticket_price" : 18, "tickets_sold" : 95 }', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','agg_pipeline_movie_screenings',' { "_id" : 4, "movie_title" : ["Interstellar", "Dune", "Inception"], "ticket_price" : 14, "tickets_sold" : 250 }', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','agg_pipeline_movie_screenings',' { "_id" : 5 }', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','agg_pipeline_movie_screenings',' { "_id" : 6, "movie_title" : {"a": "v", "b" : 2, "c" : [5, 6, 7]} }', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','agg_pipeline_movie_screenings',' { "_id" : 7, "movie_title" : [{"a": { "b" : 2}}, [5, 6, 7], 9, "z"] }', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','agg_pipeline_movie_catalog',' { "_id" : 11, "title" : "Interstellar", "genre": "Sci-Fi", "available_seats" : 50 }', NULL);
NOTICE:  creating collection
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','agg_pipeline_movie_catalog',' { "_id" : 12, "title" : "Interstellar", "genre": "Sci-Fi", "available_seats" : 70 }', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','agg_pipeline_movie_catalog','{ "_id" : 13, "title" : "Dune", "genre": "Sci-Fi", "available_seats" : 30 }', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','agg_pipeline_movie_catalog','{ "_id" : 14, "title" : "Blade Runner", "genre": "Cyberpunk", "available_seats" : 40 }', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','agg_pipeline_movie_catalog','{ "_id" : 15, "title" : "Inception", "genre": "Thriller", "available_seats" : 60 }', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','agg_pipeline_movie_catalog','{ "_id" : 16, "title" : null, "genre": "Unknown", "available_seats" : 0 }', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','agg_pipeline_movie_catalog','{ "_id" : 17, "title" :  {"a": "x", "b" : 1, "c" : [1, 2, 3]}, "genre": "Experimental" }', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','agg_pipeline_movie_catalog','{ "_id" : 18, "title" : [{"a": { "b" : 1}}, [1, 2, 3], 1, "x"], "genre": "Experimental Array" }', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','agg_pipeline_movie_catalog','{ "_id" : 19, "title" : [{"a": { "b" : 1}}, [1, 2, 3], 1, "x"], "genre": "Experimental Array" }', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "agg_pipeline_movie_screenings", "pipeline": [ { "$lookup": { "from": "agg_pipeline_movie_catalog", "as": "matched_docs", "localField": "title", "foreignField": "title" } } ], "cursor": {} }');
                                                                                                                                                                        document                                                                                                                                                                        
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "movie_title" : "Interstellar", "ticket_price" : { "$numberInt" : "15" }, "tickets_sold" : { "$numberInt" : "120" }, "matched_docs" : [ { "_id" : { "$numberInt" : "16" }, "title" : null, "genre" : "Unknown", "available_seats" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "2" }, "movie_title" : "Inception", "ticket_price" : { "$numberInt" : "13" }, "tickets_sold" : { "$numberInt" : "100" }, "matched_docs" : [ { "_id" : { "$numberInt" : "16" }, "title" : null, "genre" : "Unknown", "available_seats" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "3" }, "movie_title" : "Dune", "ticket_price" : { "$numberInt" : "18" }, "tickets_sold" : { "$numberInt" : "95" }, "matched_docs" : [ { "_id" : { "$numberInt" : "16" }, "title" : null, "genre" : "Unknown", "available_seats" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "4" }, "movie_title" : [ "Interstellar", "Dune", "Inception" ], "ticket_price" : { "$numberInt" : "14" }, "tickets_sold" : { "$numberInt" : "250" }, "matched_docs" : [ { "_id" : { "$numberInt" : "16" }, "title" : null, "genre" : "Unknown", "available_seats" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "5" }, "matched_docs" : [ { "_id" : { "$numberInt" : "16" }, "title" : null, "genre" : "Unknown", "available_seats" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "6" }, "movie_title" : { "a" : "v", "b" : { "$numberInt" : "2" }, "c" : [ { "$numberInt" : "5" }, { "$numberInt" : "6" }, { "$numberInt" : "7" } ] }, "matched_docs" : [ { "_id" : { "$numberInt" : "16" }, "title" : null, "genre" : "Unknown", "available_seats" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "7" }, "movie_title" : [ { "a" : { "b" : { "$numberInt" : "2" } } }, [ { "$numberInt" : "5" }, { "$numberInt" : "6" }, { "$numberInt" : "7" } ], { "$numberInt" : "9" }, "z" ], "matched_docs" : [ { "_id" : { "$numberInt" : "16" }, "title" : null, "genre" : "Unknown", "available_seats" : { "$numberInt" : "0" } } ] }
(7 rows)

SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "agg_pipeline_movie_screenings", "pipeline": [ { "$lookup": { "from": "agg_pipeline_movie_catalog", "as": "matched_docs", "pipeline": [ { "$count": "efe" } ] } } ], "cursor": {} }');
                                                                                                                               document                                                                                                                               
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "movie_title" : "Interstellar", "ticket_price" : { "$numberInt" : "15" }, "tickets_sold" : { "$numberInt" : "120" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "2" }, "movie_title" : "Inception", "ticket_price" : { "$numberInt" : "13" }, "tickets_sold" : { "$numberInt" : "100" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "3" }, "movie_title" : "Dune", "ticket_price" : { "$numberInt" : "18" }, "tickets_sold" : { "$numberInt" : "95" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "4" }, "movie_title" : [ "Interstellar", "Dune", "Inception" ], "ticket_price" : { "$numberInt" : "14" }, "tickets_sold" : { "$numberInt" : "250" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "6" }, "movie_title" : { "a" : "v", "b" : { "$numberInt" : "2" }, "c" : [ { "$numberInt" : "5" }, { "$numberInt" : "6" }, { "$numberInt" : "7" } ] }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "7" }, "movie_title" : [ { "a" : { "b" : { "$numberInt" : "2" } } }, [ { "$numberInt" : "5" }, { "$numberInt" : "6" }, { "$numberInt" : "7" } ], { "$numberInt" : "9" }, "z" ], "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
(7 rows)

SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "agg_pipeline_movie_screenings", "pipeline": [ { "$lookup": { "from": "agg_pipeline_movie_catalog", "as": "matched_docs", "localField": "title", "foreignField": "title", "pipeline": [ { "$count": "efe" } ] } } ], "cursor": {} }');
                                                                                                                               document                                                                                                                               
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "movie_title" : "Interstellar", "ticket_price" : { "$numberInt" : "15" }, "tickets_sold" : { "$numberInt" : "120" }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "2" }, "movie_title" : "Inception", "ticket_price" : { "$numberInt" : "13" }, "tickets_sold" : { "$numberInt" : "100" }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "3" }, "movie_title" : "Dune", "ticket_price" : { "$numberInt" : "18" }, "tickets_sold" : { "$numberInt" : "95" }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "4" }, "movie_title" : [ "Interstellar", "Dune", "Inception" ], "ticket_price" : { "$numberInt" : "14" }, "tickets_sold" : { "$numberInt" : "250" }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "6" }, "movie_title" : { "a" : "v", "b" : { "$numberInt" : "2" }, "c" : [ { "$numberInt" : "5" }, { "$numberInt" : "6" }, { "$numberInt" : "7" } ] }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "7" }, "movie_title" : [ { "a" : { "b" : { "$numberInt" : "2" } } }, [ { "$numberInt" : "5" }, { "$numberInt" : "6" }, { "$numberInt" : "7" } ], { "$numberInt" : "9" }, "z" ], "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
(7 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "agg_pipeline_movie_screenings", "pipeline": [ { "$lookup": { "from": "agg_pipeline_movie_catalog", "as": "matched_docs", "pipeline": [ { "$count": "efe" } ] } }, { "$sample": { "size": 3 } } ], "cursor": {} }');
                                                                                                                                       QUERY PLAN                                                                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: agg_stage_1.document, (random())
   ->  Sort
         Output: agg_stage_1.document, (random())
         Sort Key: (random())
         ->  Subquery Scan on agg_stage_1
               Output: agg_stage_1.document, random()
               ->  Nested Loop
                     Output: documentdb_api_internal.bson_dollar_merge_documents(collection.document, (COALESCE(bson_array_agg((bson_repath_and_build('efe'::text, bsonsum('{ "" : { "$numberInt" : "1" } }'::bson))), 'matched_docs'::text), '{ "matched_docs" : [  ] }'::bson)), true)
                     ->  Aggregate
                           Output: COALESCE(bson_array_agg((bson_repath_and_build('efe'::text, bsonsum('{ "" : { "$numberInt" : "1" } }'::bson))), 'matched_docs'::text), '{ "matched_docs" : [  ] }'::bson)
                           ->  Aggregate
                                 Output: bson_repath_and_build('efe'::text, bsonsum('{ "" : { "$numberInt" : "1" } }'::bson))
                                 ->  Bitmap Heap Scan on documentdb_data.documents_3503 collection_0_1
                                       Recheck Cond: (collection_0_1.shard_key_value = '3503'::bigint)
                                       ->  Bitmap Index Scan on _id_
                                             Index Cond: (collection_0_1.shard_key_value = '3503'::bigint)
                     ->  Bitmap Heap Scan on documentdb_data.documents_3502 collection
                           Output: collection.shard_key_value, collection.object_id, collection.document
                           Recheck Cond: (collection.shard_key_value = '3502'::bigint)
                           ->  Bitmap Index Scan on _id_
                                 Index Cond: (collection.shard_key_value = '3502'::bigint)
(22 rows)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "agg_pipeline_movie_screenings", "pipeline": [ { "$lookup": { "from": "agg_pipeline_movie_catalog", "as": "matched_docs", "localField": "title", "foreignField": "title", "pipeline": [ { "$count": "efe" } ] } } ], "cursor": {} }');
                                                                                                                      QUERY PLAN                                                                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Subquery Scan on lookup_non_inlined_stage_1
   Output: documentdb_api_internal.bson_dollar_merge_documents(lookup_non_inlined_stage_1."left", (SubPlan 1), true)
   ->  Nested Loop
         Output: collection.document, (COALESCE(bson_array_agg(collection_0_1.document, 'matched_docs'::text), '{ "matched_docs" : [  ] }'::bson))
         ->  Bitmap Heap Scan on documentdb_data.documents_3502 collection
               Output: collection.shard_key_value, collection.object_id, collection.document
               Recheck Cond: (collection.shard_key_value = '3502'::bigint)
               ->  Bitmap Index Scan on _id_
                     Index Cond: (collection.shard_key_value = '3502'::bigint)
         ->  Aggregate
               Output: COALESCE(bson_array_agg(collection_0_1.document, 'matched_docs'::text), '{ "matched_docs" : [  ] }'::bson)
               ->  Bitmap Heap Scan on documentdb_data.documents_3503 collection_0_1
                     Output: collection_0_1.shard_key_value, collection_0_1.object_id, collection_0_1.document
                     Recheck Cond: (collection_0_1.shard_key_value = '3503'::bigint)
                     Filter: documentdb_api_internal.bson_dollar_lookup_join_filter(collection_0_1.document, documentdb_api_internal.bson_dollar_lookup_extract_filter_expression(collection.document, '{ "title" : "title" }'::bson), 'title'::text)
                     ->  Bitmap Index Scan on _id_
                           Index Cond: (collection_0_1.shard_key_value = '3503'::bigint)
   SubPlan 1
     ->  Aggregate
           Output: COALESCE(bson_array_agg((bson_repath_and_build('efe'::text, bsonsum('{ "" : { "$numberInt" : "1" } }'::bson))), 'matched_docs'::text), '{ "matched_docs" : [  ] }'::bson)
           ->  Aggregate
                 Output: bson_repath_and_build('efe'::text, bsonsum('{ "" : { "$numberInt" : "1" } }'::bson))
                 ->  Function Scan on documentdb_api_catalog.bson_lookup_unwind lookup_subpipeline_substage_0
                       Output: lookup_subpipeline_substage_0.lookup_unwind
                       Function Call: bson_lookup_unwind(lookup_non_inlined_stage_1."right", 'matched_docs'::text)
(25 rows)

SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "agg_pipeline_movie_screenings", "pipeline": [ { "$lookup": { "from": "coll_dne", "as": "matched_docs", "localField": "title", "foreignField": "title", "pipeline": [ { "$count": "efe" } ] } } ], "cursor": {} }');
                                                                                                                               document                                                                                                                               
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "movie_title" : "Interstellar", "ticket_price" : { "$numberInt" : "15" }, "tickets_sold" : { "$numberInt" : "120" }, "matched_docs" : [ { "efe" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "2" }, "movie_title" : "Inception", "ticket_price" : { "$numberInt" : "13" }, "tickets_sold" : { "$numberInt" : "100" }, "matched_docs" : [ { "efe" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "3" }, "movie_title" : "Dune", "ticket_price" : { "$numberInt" : "18" }, "tickets_sold" : { "$numberInt" : "95" }, "matched_docs" : [ { "efe" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "4" }, "movie_title" : [ "Interstellar", "Dune", "Inception" ], "ticket_price" : { "$numberInt" : "14" }, "tickets_sold" : { "$numberInt" : "250" }, "matched_docs" : [ { "efe" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "6" }, "movie_title" : { "a" : "v", "b" : { "$numberInt" : "2" }, "c" : [ { "$numberInt" : "5" }, { "$numberInt" : "6" }, { "$numberInt" : "7" } ] }, "matched_docs" : [ { "efe" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "7" }, "movie_title" : [ { "a" : { "b" : { "$numberInt" : "2" } } }, [ { "$numberInt" : "5" }, { "$numberInt" : "6" }, { "$numberInt" : "7" } ], { "$numberInt" : "9" }, "z" ], "matched_docs" : [ { "efe" : { "$numberInt" : "0" } } ] }
(7 rows)

SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "agg_pipeline_movie_screenings", "pipeline": [ { "$lookup": { "from": "colldne", "pipeline": [], "as": "c" } } ], "cursor": {} }');
                                                                                                        document                                                                                                         
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "movie_title" : "Interstellar", "ticket_price" : { "$numberInt" : "15" }, "tickets_sold" : { "$numberInt" : "120" }, "c" : [  ] }
 { "_id" : { "$numberInt" : "2" }, "movie_title" : "Inception", "ticket_price" : { "$numberInt" : "13" }, "tickets_sold" : { "$numberInt" : "100" }, "c" : [  ] }
 { "_id" : { "$numberInt" : "3" }, "movie_title" : "Dune", "ticket_price" : { "$numberInt" : "18" }, "tickets_sold" : { "$numberInt" : "95" }, "c" : [  ] }
 { "_id" : { "$numberInt" : "4" }, "movie_title" : [ "Interstellar", "Dune", "Inception" ], "ticket_price" : { "$numberInt" : "14" }, "tickets_sold" : { "$numberInt" : "250" }, "c" : [  ] }
 { "_id" : { "$numberInt" : "5" }, "c" : [  ] }
 { "_id" : { "$numberInt" : "6" }, "movie_title" : { "a" : "v", "b" : { "$numberInt" : "2" }, "c" : [ { "$numberInt" : "5" }, { "$numberInt" : "6" }, { "$numberInt" : "7" } ] }, "c" : [  ] }
 { "_id" : { "$numberInt" : "7" }, "movie_title" : [ { "a" : { "b" : { "$numberInt" : "2" } } }, [ { "$numberInt" : "5" }, { "$numberInt" : "6" }, { "$numberInt" : "7" } ], { "$numberInt" : "9" }, "z" ], "c" : [  ] }
(7 rows)

BEGIN;
SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "agg_pipeline_movie_screenings", "pipeline": [ { "$lookup": { "from": "agg_pipeline_movie_catalog", "as": "matched_docs", "localField": "title", "foreignField": "title" } } ], "cursor": {} }');
                                                                                                                                                                        document                                                                                                                                                                        
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "movie_title" : "Interstellar", "ticket_price" : { "$numberInt" : "15" }, "tickets_sold" : { "$numberInt" : "120" }, "matched_docs" : [ { "_id" : { "$numberInt" : "16" }, "title" : null, "genre" : "Unknown", "available_seats" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "2" }, "movie_title" : "Inception", "ticket_price" : { "$numberInt" : "13" }, "tickets_sold" : { "$numberInt" : "100" }, "matched_docs" : [ { "_id" : { "$numberInt" : "16" }, "title" : null, "genre" : "Unknown", "available_seats" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "3" }, "movie_title" : "Dune", "ticket_price" : { "$numberInt" : "18" }, "tickets_sold" : { "$numberInt" : "95" }, "matched_docs" : [ { "_id" : { "$numberInt" : "16" }, "title" : null, "genre" : "Unknown", "available_seats" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "4" }, "movie_title" : [ "Interstellar", "Dune", "Inception" ], "ticket_price" : { "$numberInt" : "14" }, "tickets_sold" : { "$numberInt" : "250" }, "matched_docs" : [ { "_id" : { "$numberInt" : "16" }, "title" : null, "genre" : "Unknown", "available_seats" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "5" }, "matched_docs" : [ { "_id" : { "$numberInt" : "16" }, "title" : null, "genre" : "Unknown", "available_seats" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "6" }, "movie_title" : { "a" : "v", "b" : { "$numberInt" : "2" }, "c" : [ { "$numberInt" : "5" }, { "$numberInt" : "6" }, { "$numberInt" : "7" } ] }, "matched_docs" : [ { "_id" : { "$numberInt" : "16" }, "title" : null, "genre" : "Unknown", "available_seats" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "7" }, "movie_title" : [ { "a" : { "b" : { "$numberInt" : "2" } } }, [ { "$numberInt" : "5" }, { "$numberInt" : "6" }, { "$numberInt" : "7" } ], { "$numberInt" : "9" }, "z" ], "matched_docs" : [ { "_id" : { "$numberInt" : "16" }, "title" : null, "genre" : "Unknown", "available_seats" : { "$numberInt" : "0" } } ] }
(7 rows)

SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "agg_pipeline_movie_screenings", "pipeline": [ { "$lookup": { "from": "agg_pipeline_movie_catalog", "as": "matched_docs", "pipeline": [ { "$count": "efe" } ] } } ], "cursor": {} }');
                                                                                                                               document                                                                                                                               
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "movie_title" : "Interstellar", "ticket_price" : { "$numberInt" : "15" }, "tickets_sold" : { "$numberInt" : "120" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "2" }, "movie_title" : "Inception", "ticket_price" : { "$numberInt" : "13" }, "tickets_sold" : { "$numberInt" : "100" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "3" }, "movie_title" : "Dune", "ticket_price" : { "$numberInt" : "18" }, "tickets_sold" : { "$numberInt" : "95" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "4" }, "movie_title" : [ "Interstellar", "Dune", "Inception" ], "ticket_price" : { "$numberInt" : "14" }, "tickets_sold" : { "$numberInt" : "250" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "6" }, "movie_title" : { "a" : "v", "b" : { "$numberInt" : "2" }, "c" : [ { "$numberInt" : "5" }, { "$numberInt" : "6" }, { "$numberInt" : "7" } ] }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "7" }, "movie_title" : [ { "a" : { "b" : { "$numberInt" : "2" } } }, [ { "$numberInt" : "5" }, { "$numberInt" : "6" }, { "$numberInt" : "7" } ], { "$numberInt" : "9" }, "z" ], "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
(7 rows)

SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "agg_pipeline_movie_screenings", "pipeline": [ { "$lookup": { "from": "agg_pipeline_movie_catalog", "as": "matched_docs", "localField": "title", "foreignField": "title", "pipeline": [ { "$count": "efe" } ] } } ], "cursor": {} }');
                                                                                                                               document                                                                                                                               
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "movie_title" : "Interstellar", "ticket_price" : { "$numberInt" : "15" }, "tickets_sold" : { "$numberInt" : "120" }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "2" }, "movie_title" : "Inception", "ticket_price" : { "$numberInt" : "13" }, "tickets_sold" : { "$numberInt" : "100" }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "3" }, "movie_title" : "Dune", "ticket_price" : { "$numberInt" : "18" }, "tickets_sold" : { "$numberInt" : "95" }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "4" }, "movie_title" : [ "Interstellar", "Dune", "Inception" ], "ticket_price" : { "$numberInt" : "14" }, "tickets_sold" : { "$numberInt" : "250" }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "6" }, "movie_title" : { "a" : "v", "b" : { "$numberInt" : "2" }, "c" : [ { "$numberInt" : "5" }, { "$numberInt" : "6" }, { "$numberInt" : "7" } ] }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "7" }, "movie_title" : [ { "a" : { "b" : { "$numberInt" : "2" } } }, [ { "$numberInt" : "5" }, { "$numberInt" : "6" }, { "$numberInt" : "7" } ], { "$numberInt" : "9" }, "z" ], "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
(7 rows)

ROLLBACK;
SELECT documentdb_api.shard_collection('db', 'agg_pipeline_movie_screenings', '{ "_id": "hashed" }', false);
 shard_collection 
------------------
 
(1 row)

SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "agg_pipeline_movie_screenings", "pipeline": [ { "$lookup": { "from": "agg_pipeline_movie_catalog", "as": "matched_docs", "localField": "title", "foreignField": "title" } } ], "cursor": {} }');
                                                                                                                                                                        document                                                                                                                                                                        
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "movie_title" : "Interstellar", "ticket_price" : { "$numberInt" : "15" }, "tickets_sold" : { "$numberInt" : "120" }, "matched_docs" : [ { "_id" : { "$numberInt" : "16" }, "title" : null, "genre" : "Unknown", "available_seats" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "2" }, "movie_title" : "Inception", "ticket_price" : { "$numberInt" : "13" }, "tickets_sold" : { "$numberInt" : "100" }, "matched_docs" : [ { "_id" : { "$numberInt" : "16" }, "title" : null, "genre" : "Unknown", "available_seats" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "3" }, "movie_title" : "Dune", "ticket_price" : { "$numberInt" : "18" }, "tickets_sold" : { "$numberInt" : "95" }, "matched_docs" : [ { "_id" : { "$numberInt" : "16" }, "title" : null, "genre" : "Unknown", "available_seats" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "4" }, "movie_title" : [ "Interstellar", "Dune", "Inception" ], "ticket_price" : { "$numberInt" : "14" }, "tickets_sold" : { "$numberInt" : "250" }, "matched_docs" : [ { "_id" : { "$numberInt" : "16" }, "title" : null, "genre" : "Unknown", "available_seats" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "5" }, "matched_docs" : [ { "_id" : { "$numberInt" : "16" }, "title" : null, "genre" : "Unknown", "available_seats" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "6" }, "movie_title" : { "a" : "v", "b" : { "$numberInt" : "2" }, "c" : [ { "$numberInt" : "5" }, { "$numberInt" : "6" }, { "$numberInt" : "7" } ] }, "matched_docs" : [ { "_id" : { "$numberInt" : "16" }, "title" : null, "genre" : "Unknown", "available_seats" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "7" }, "movie_title" : [ { "a" : { "b" : { "$numberInt" : "2" } } }, [ { "$numberInt" : "5" }, { "$numberInt" : "6" }, { "$numberInt" : "7" } ], { "$numberInt" : "9" }, "z" ], "matched_docs" : [ { "_id" : { "$numberInt" : "16" }, "title" : null, "genre" : "Unknown", "available_seats" : { "$numberInt" : "0" } } ] }
(7 rows)

SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "agg_pipeline_movie_screenings", "pipeline": [ { "$lookup": { "from": "agg_pipeline_movie_catalog", "as": "matched_docs", "pipeline": [ { "$count": "efe" } ] } } ], "cursor": {} }');
                                                                                                                               document                                                                                                                               
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "movie_title" : "Interstellar", "ticket_price" : { "$numberInt" : "15" }, "tickets_sold" : { "$numberInt" : "120" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "2" }, "movie_title" : "Inception", "ticket_price" : { "$numberInt" : "13" }, "tickets_sold" : { "$numberInt" : "100" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "3" }, "movie_title" : "Dune", "ticket_price" : { "$numberInt" : "18" }, "tickets_sold" : { "$numberInt" : "95" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "4" }, "movie_title" : [ "Interstellar", "Dune", "Inception" ], "ticket_price" : { "$numberInt" : "14" }, "tickets_sold" : { "$numberInt" : "250" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "6" }, "movie_title" : { "a" : "v", "b" : { "$numberInt" : "2" }, "c" : [ { "$numberInt" : "5" }, { "$numberInt" : "6" }, { "$numberInt" : "7" } ] }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "7" }, "movie_title" : [ { "a" : { "b" : { "$numberInt" : "2" } } }, [ { "$numberInt" : "5" }, { "$numberInt" : "6" }, { "$numberInt" : "7" } ], { "$numberInt" : "9" }, "z" ], "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
(7 rows)

SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "agg_pipeline_movie_screenings", "pipeline": [ { "$lookup": { "from": "agg_pipeline_movie_catalog", "as": "matched_docs", "localField": "title", "foreignField": "title", "pipeline": [ { "$count": "efe" } ] } } ], "cursor": {} }');
                                                                                                                               document                                                                                                                               
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "movie_title" : "Interstellar", "ticket_price" : { "$numberInt" : "15" }, "tickets_sold" : { "$numberInt" : "120" }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "2" }, "movie_title" : "Inception", "ticket_price" : { "$numberInt" : "13" }, "tickets_sold" : { "$numberInt" : "100" }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "3" }, "movie_title" : "Dune", "ticket_price" : { "$numberInt" : "18" }, "tickets_sold" : { "$numberInt" : "95" }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "4" }, "movie_title" : [ "Interstellar", "Dune", "Inception" ], "ticket_price" : { "$numberInt" : "14" }, "tickets_sold" : { "$numberInt" : "250" }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "6" }, "movie_title" : { "a" : "v", "b" : { "$numberInt" : "2" }, "c" : [ { "$numberInt" : "5" }, { "$numberInt" : "6" }, { "$numberInt" : "7" } ] }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "7" }, "movie_title" : [ { "a" : { "b" : { "$numberInt" : "2" } } }, [ { "$numberInt" : "5" }, { "$numberInt" : "6" }, { "$numberInt" : "7" } ], { "$numberInt" : "9" }, "z" ], "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
(7 rows)

-- $natural with sharded collection
SELECT document FROM bson_aggregation_find('db', '{ "find": "agg_pipeline_movie_catalog", "projection": {}, "sort": { "$natural": 1 }}');
                                                                                                                document                                                                                                                
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : { "$numberInt" : "11" }, "title" : "Interstellar", "genre" : "Sci-Fi", "available_seats" : { "$numberInt" : "50" } }
 { "_id" : { "$numberInt" : "12" }, "title" : "Interstellar", "genre" : "Sci-Fi", "available_seats" : { "$numberInt" : "70" } }
 { "_id" : { "$numberInt" : "13" }, "title" : "Dune", "genre" : "Sci-Fi", "available_seats" : { "$numberInt" : "30" } }
 { "_id" : { "$numberInt" : "14" }, "title" : "Blade Runner", "genre" : "Cyberpunk", "available_seats" : { "$numberInt" : "40" } }
 { "_id" : { "$numberInt" : "15" }, "title" : "Inception", "genre" : "Thriller", "available_seats" : { "$numberInt" : "60" } }
 { "_id" : { "$numberInt" : "16" }, "title" : null, "genre" : "Unknown", "available_seats" : { "$numberInt" : "0" } }
 { "_id" : { "$numberInt" : "17" }, "title" : { "a" : "x", "b" : { "$numberInt" : "1" }, "c" : [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ] }, "genre" : "Experimental" }
 { "_id" : { "$numberInt" : "18" }, "title" : [ { "a" : { "b" : { "$numberInt" : "1" } } }, [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], { "$numberInt" : "1" }, "x" ], "genre" : "Experimental Array" }
 { "_id" : { "$numberInt" : "19" }, "title" : [ { "a" : { "b" : { "$numberInt" : "1" } } }, [ { "$numberInt" : "1" }, { "$numberInt" : "2" }, { "$numberInt" : "3" } ], { "$numberInt" : "1" }, "x" ], "genre" : "Experimental Array" }
(9 rows)

-- $natural with sharded collection EXPLAIN
EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_find('db', '{ "find": "aggregation_pipeline", "projection": {}, "sort": { "$natural": 1 }}');
                         QUERY PLAN                          
-------------------------------------------------------------
 Sort
   Output: document, ctid
   Sort Key: collection.ctid NULLS FIRST
   ->  Seq Scan on documentdb_data.documents_3500 collection
         Output: document, ctid
(5 rows)

BEGIN;
SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "agg_pipeline_movie_screenings", "pipeline": [ { "$lookup": { "from": "agg_pipeline_movie_catalog", "as": "matched_docs", "localField": "title", "foreignField": "title" } } ], "cursor": {} }');
                                                                                                                                                                        document                                                                                                                                                                        
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "movie_title" : "Interstellar", "ticket_price" : { "$numberInt" : "15" }, "tickets_sold" : { "$numberInt" : "120" }, "matched_docs" : [ { "_id" : { "$numberInt" : "16" }, "title" : null, "genre" : "Unknown", "available_seats" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "2" }, "movie_title" : "Inception", "ticket_price" : { "$numberInt" : "13" }, "tickets_sold" : { "$numberInt" : "100" }, "matched_docs" : [ { "_id" : { "$numberInt" : "16" }, "title" : null, "genre" : "Unknown", "available_seats" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "3" }, "movie_title" : "Dune", "ticket_price" : { "$numberInt" : "18" }, "tickets_sold" : { "$numberInt" : "95" }, "matched_docs" : [ { "_id" : { "$numberInt" : "16" }, "title" : null, "genre" : "Unknown", "available_seats" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "4" }, "movie_title" : [ "Interstellar", "Dune", "Inception" ], "ticket_price" : { "$numberInt" : "14" }, "tickets_sold" : { "$numberInt" : "250" }, "matched_docs" : [ { "_id" : { "$numberInt" : "16" }, "title" : null, "genre" : "Unknown", "available_seats" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "5" }, "matched_docs" : [ { "_id" : { "$numberInt" : "16" }, "title" : null, "genre" : "Unknown", "available_seats" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "6" }, "movie_title" : { "a" : "v", "b" : { "$numberInt" : "2" }, "c" : [ { "$numberInt" : "5" }, { "$numberInt" : "6" }, { "$numberInt" : "7" } ] }, "matched_docs" : [ { "_id" : { "$numberInt" : "16" }, "title" : null, "genre" : "Unknown", "available_seats" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "7" }, "movie_title" : [ { "a" : { "b" : { "$numberInt" : "2" } } }, [ { "$numberInt" : "5" }, { "$numberInt" : "6" }, { "$numberInt" : "7" } ], { "$numberInt" : "9" }, "z" ], "matched_docs" : [ { "_id" : { "$numberInt" : "16" }, "title" : null, "genre" : "Unknown", "available_seats" : { "$numberInt" : "0" } } ] }
(7 rows)

SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "agg_pipeline_movie_screenings", "pipeline": [ { "$lookup": { "from": "agg_pipeline_movie_catalog", "as": "matched_docs", "pipeline": [ { "$count": "efe" } ] } } ], "cursor": {} }');
                                                                                                                               document                                                                                                                               
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "movie_title" : "Interstellar", "ticket_price" : { "$numberInt" : "15" }, "tickets_sold" : { "$numberInt" : "120" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "2" }, "movie_title" : "Inception", "ticket_price" : { "$numberInt" : "13" }, "tickets_sold" : { "$numberInt" : "100" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "3" }, "movie_title" : "Dune", "ticket_price" : { "$numberInt" : "18" }, "tickets_sold" : { "$numberInt" : "95" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "4" }, "movie_title" : [ "Interstellar", "Dune", "Inception" ], "ticket_price" : { "$numberInt" : "14" }, "tickets_sold" : { "$numberInt" : "250" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "6" }, "movie_title" : { "a" : "v", "b" : { "$numberInt" : "2" }, "c" : [ { "$numberInt" : "5" }, { "$numberInt" : "6" }, { "$numberInt" : "7" } ] }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "7" }, "movie_title" : [ { "a" : { "b" : { "$numberInt" : "2" } } }, [ { "$numberInt" : "5" }, { "$numberInt" : "6" }, { "$numberInt" : "7" } ], { "$numberInt" : "9" }, "z" ], "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
(7 rows)

SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "agg_pipeline_movie_screenings", "pipeline": [ { "$lookup": { "from": "agg_pipeline_movie_catalog", "as": "matched_docs", "localField": "title", "foreignField": "title", "pipeline": [ { "$count": "efe" } ] } } ], "cursor": {} }');
                                                                                                                               document                                                                                                                               
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "movie_title" : "Interstellar", "ticket_price" : { "$numberInt" : "15" }, "tickets_sold" : { "$numberInt" : "120" }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "2" }, "movie_title" : "Inception", "ticket_price" : { "$numberInt" : "13" }, "tickets_sold" : { "$numberInt" : "100" }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "3" }, "movie_title" : "Dune", "ticket_price" : { "$numberInt" : "18" }, "tickets_sold" : { "$numberInt" : "95" }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "4" }, "movie_title" : [ "Interstellar", "Dune", "Inception" ], "ticket_price" : { "$numberInt" : "14" }, "tickets_sold" : { "$numberInt" : "250" }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "6" }, "movie_title" : { "a" : "v", "b" : { "$numberInt" : "2" }, "c" : [ { "$numberInt" : "5" }, { "$numberInt" : "6" }, { "$numberInt" : "7" } ] }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "7" }, "movie_title" : [ { "a" : { "b" : { "$numberInt" : "2" } } }, [ { "$numberInt" : "5" }, { "$numberInt" : "6" }, { "$numberInt" : "7" } ], { "$numberInt" : "9" }, "z" ], "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
(7 rows)

ROLLBACK;
SELECT documentdb_api.shard_collection('db', 'agg_pipeline_movie_catalog', '{ "_id": "hashed" }', false);
 shard_collection 
------------------
 
(1 row)

SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "agg_pipeline_movie_screenings", "pipeline": [ { "$lookup": { "from": "agg_pipeline_movie_catalog", "as": "matched_docs", "localField": "title", "foreignField": "title" } } ], "cursor": {} }');
                                                                                                                                                                        document                                                                                                                                                                        
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "movie_title" : "Interstellar", "ticket_price" : { "$numberInt" : "15" }, "tickets_sold" : { "$numberInt" : "120" }, "matched_docs" : [ { "_id" : { "$numberInt" : "16" }, "title" : null, "genre" : "Unknown", "available_seats" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "2" }, "movie_title" : "Inception", "ticket_price" : { "$numberInt" : "13" }, "tickets_sold" : { "$numberInt" : "100" }, "matched_docs" : [ { "_id" : { "$numberInt" : "16" }, "title" : null, "genre" : "Unknown", "available_seats" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "3" }, "movie_title" : "Dune", "ticket_price" : { "$numberInt" : "18" }, "tickets_sold" : { "$numberInt" : "95" }, "matched_docs" : [ { "_id" : { "$numberInt" : "16" }, "title" : null, "genre" : "Unknown", "available_seats" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "4" }, "movie_title" : [ "Interstellar", "Dune", "Inception" ], "ticket_price" : { "$numberInt" : "14" }, "tickets_sold" : { "$numberInt" : "250" }, "matched_docs" : [ { "_id" : { "$numberInt" : "16" }, "title" : null, "genre" : "Unknown", "available_seats" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "5" }, "matched_docs" : [ { "_id" : { "$numberInt" : "16" }, "title" : null, "genre" : "Unknown", "available_seats" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "6" }, "movie_title" : { "a" : "v", "b" : { "$numberInt" : "2" }, "c" : [ { "$numberInt" : "5" }, { "$numberInt" : "6" }, { "$numberInt" : "7" } ] }, "matched_docs" : [ { "_id" : { "$numberInt" : "16" }, "title" : null, "genre" : "Unknown", "available_seats" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "7" }, "movie_title" : [ { "a" : { "b" : { "$numberInt" : "2" } } }, [ { "$numberInt" : "5" }, { "$numberInt" : "6" }, { "$numberInt" : "7" } ], { "$numberInt" : "9" }, "z" ], "matched_docs" : [ { "_id" : { "$numberInt" : "16" }, "title" : null, "genre" : "Unknown", "available_seats" : { "$numberInt" : "0" } } ] }
(7 rows)

SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "agg_pipeline_movie_screenings", "pipeline": [ { "$lookup": { "from": "agg_pipeline_movie_catalog", "as": "matched_docs", "pipeline": [ { "$count": "efe" } ] } } ], "cursor": {} }');
                                                                                                                               document                                                                                                                               
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "movie_title" : "Interstellar", "ticket_price" : { "$numberInt" : "15" }, "tickets_sold" : { "$numberInt" : "120" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "2" }, "movie_title" : "Inception", "ticket_price" : { "$numberInt" : "13" }, "tickets_sold" : { "$numberInt" : "100" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "3" }, "movie_title" : "Dune", "ticket_price" : { "$numberInt" : "18" }, "tickets_sold" : { "$numberInt" : "95" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "4" }, "movie_title" : [ "Interstellar", "Dune", "Inception" ], "ticket_price" : { "$numberInt" : "14" }, "tickets_sold" : { "$numberInt" : "250" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "6" }, "movie_title" : { "a" : "v", "b" : { "$numberInt" : "2" }, "c" : [ { "$numberInt" : "5" }, { "$numberInt" : "6" }, { "$numberInt" : "7" } ] }, "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
 { "_id" : { "$numberInt" : "7" }, "movie_title" : [ { "a" : { "b" : { "$numberInt" : "2" } } }, [ { "$numberInt" : "5" }, { "$numberInt" : "6" }, { "$numberInt" : "7" } ], { "$numberInt" : "9" }, "z" ], "matched_docs" : [ { "efe" : { "$numberInt" : "9" } } ] }
(7 rows)

SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "agg_pipeline_movie_screenings", "pipeline": [ { "$lookup": { "from": "agg_pipeline_movie_catalog", "as": "matched_docs", "localField": "title", "foreignField": "title", "pipeline": [ { "$count": "efe" } ] } } ], "cursor": {} }');
                                                                                                                               document                                                                                                                               
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "movie_title" : "Interstellar", "ticket_price" : { "$numberInt" : "15" }, "tickets_sold" : { "$numberInt" : "120" }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "2" }, "movie_title" : "Inception", "ticket_price" : { "$numberInt" : "13" }, "tickets_sold" : { "$numberInt" : "100" }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "3" }, "movie_title" : "Dune", "ticket_price" : { "$numberInt" : "18" }, "tickets_sold" : { "$numberInt" : "95" }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "4" }, "movie_title" : [ "Interstellar", "Dune", "Inception" ], "ticket_price" : { "$numberInt" : "14" }, "tickets_sold" : { "$numberInt" : "250" }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "6" }, "movie_title" : { "a" : "v", "b" : { "$numberInt" : "2" }, "c" : [ { "$numberInt" : "5" }, { "$numberInt" : "6" }, { "$numberInt" : "7" } ] }, "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
 { "_id" : { "$numberInt" : "7" }, "movie_title" : [ { "a" : { "b" : { "$numberInt" : "2" } } }, [ { "$numberInt" : "5" }, { "$numberInt" : "6" }, { "$numberInt" : "7" } ], { "$numberInt" : "9" }, "z" ], "matched_docs" : [ { "efe" : { "$numberInt" : "1" } } ] }
(7 rows)

SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "agg_pipeline_movie_screenings", "pipeline": [ { "$lookup": { "from": "coll_dne", "as": "matched_docs", "localField": "title", "foreignField": "title", "pipeline": [ { "$count": "efe" } ] } } ], "cursor": {} }');
                                                                                                                               document                                                                                                                               
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "movie_title" : "Interstellar", "ticket_price" : { "$numberInt" : "15" }, "tickets_sold" : { "$numberInt" : "120" }, "matched_docs" : [ { "efe" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "2" }, "movie_title" : "Inception", "ticket_price" : { "$numberInt" : "13" }, "tickets_sold" : { "$numberInt" : "100" }, "matched_docs" : [ { "efe" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "3" }, "movie_title" : "Dune", "ticket_price" : { "$numberInt" : "18" }, "tickets_sold" : { "$numberInt" : "95" }, "matched_docs" : [ { "efe" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "4" }, "movie_title" : [ "Interstellar", "Dune", "Inception" ], "ticket_price" : { "$numberInt" : "14" }, "tickets_sold" : { "$numberInt" : "250" }, "matched_docs" : [ { "efe" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "5" }, "matched_docs" : [ { "efe" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "6" }, "movie_title" : { "a" : "v", "b" : { "$numberInt" : "2" }, "c" : [ { "$numberInt" : "5" }, { "$numberInt" : "6" }, { "$numberInt" : "7" } ] }, "matched_docs" : [ { "efe" : { "$numberInt" : "0" } } ] }
 { "_id" : { "$numberInt" : "7" }, "movie_title" : [ { "a" : { "b" : { "$numberInt" : "2" } } }, [ { "$numberInt" : "5" }, { "$numberInt" : "6" }, { "$numberInt" : "7" } ], { "$numberInt" : "9" }, "z" ], "matched_docs" : [ { "efe" : { "$numberInt" : "0" } } ] }
(7 rows)

SELECT document FROM bson_aggregation_pipeline('db', 
    '{ "aggregate": "agg_pipeline_movie_screenings", "pipeline": [ { "$lookup": { "from": "colldne", "pipeline": [], "as": "c" } } ], "cursor": {} }');
                                                                                                        document                                                                                                         
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : { "$numberInt" : "1" }, "movie_title" : "Interstellar", "ticket_price" : { "$numberInt" : "15" }, "tickets_sold" : { "$numberInt" : "120" }, "c" : [  ] }
 { "_id" : { "$numberInt" : "2" }, "movie_title" : "Inception", "ticket_price" : { "$numberInt" : "13" }, "tickets_sold" : { "$numberInt" : "100" }, "c" : [  ] }
 { "_id" : { "$numberInt" : "3" }, "movie_title" : "Dune", "ticket_price" : { "$numberInt" : "18" }, "tickets_sold" : { "$numberInt" : "95" }, "c" : [  ] }
 { "_id" : { "$numberInt" : "4" }, "movie_title" : [ "Interstellar", "Dune", "Inception" ], "ticket_price" : { "$numberInt" : "14" }, "tickets_sold" : { "$numberInt" : "250" }, "c" : [  ] }
 { "_id" : { "$numberInt" : "5" }, "c" : [  ] }
 { "_id" : { "$numberInt" : "6" }, "movie_title" : { "a" : "v", "b" : { "$numberInt" : "2" }, "c" : [ { "$numberInt" : "5" }, { "$numberInt" : "6" }, { "$numberInt" : "7" } ] }, "c" : [  ] }
 { "_id" : { "$numberInt" : "7" }, "movie_title" : [ { "a" : { "b" : { "$numberInt" : "2" } } }, [ { "$numberInt" : "5" }, { "$numberInt" : "6" }, { "$numberInt" : "7" } ], { "$numberInt" : "9" }, "z" ], "c" : [  ] }
(7 rows)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": 1, "pipeline": [ { "$addFields": { "newField" : "1", "a.y": ["p", "q"] } } ], "cursor": {} }');
ERROR:  The value '{aggregate: 1}' is invalid for the '$addFields'; a collection input is necessary.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": 1, "pipeline": [ { "$match": { "newField" : "1", "a.y": ["p", "q"] } } ], "cursor": {} }');
ERROR:  The value '{aggregate: 1}' is invalid for the '$match'; a collection input is necessary.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": 1, "pipeline": [ { "$project": { "newField" : "1", "a.y": ["p", "q"] } } ], "cursor": {} }');
ERROR:  The value '{aggregate: 1}' is invalid for the '$project'; a collection input is necessary.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": 1, "pipeline": [ { "$skip": 1 } ], "cursor": {} }');
ERROR:  The value '{aggregate: 1}' is invalid for the '$skip'; a collection input is necessary.
-- test sort behavior on sharded/unsharded
EXPLAIN (COSTS OFF) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate" : "agg_pipeline_movie_catalog", "pipeline" : [ { "$match" : { "$or" : [ { "_id" : { "$lt" : 9999.0 }, "some_other_field" : { "$ne" : 3.0 } }, { "this_predicate_matches_nothing" : true } ] } }, { "$sort" : { "_id" : -1.0 } }, { "$limit" : 1.0 }, { "$project" : { "_id" : 1.0, "b" : { "$round" : "$a" } } } ], "cursor" : {  }, "lsid" : { "id" : { "$binary" : { "base64": "VJmzOaS5R46C4aFkQzrFaQ==", "subType" : "04" } } }, "$db" : "test" }');
                                                                                                                      QUERY PLAN                                                                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Subquery Scan on agg_stage_3
   ->  Limit
         ->  Sort
               Sort Key: (bson_orderby(collection.document, '{ "_id" : { "$numberDouble" : "-1.0" } }'::bson)) DESC NULLS LAST
               ->  Seq Scan on documents_3503 collection
                     Filter: (((document @< '{ "_id" : { "$numberDouble" : "9999.0" } }'::bson) AND (document @!= '{ "some_other_field" : { "$numberDouble" : "3.0" } }'::bson)) OR (document @= '{ "this_predicate_matches_nothing" : true }'::bson))
(6 rows)

EXPLAIN (COSTS OFF) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate" : "aggregation_pipeline", "pipeline" : [ { "$match" : { "$or" : [ { "_id" : { "$lt" : 9999.0 }, "some_other_field" : { "$ne" : 3.0 } }, { "this_predicate_matches_nothing" : true } ] } }, { "$sort" : { "_id" : -1.0 } }, { "$limit" : 1.0 }, { "$project" : { "_id" : 1.0, "b" : { "$round" : "$a" } } } ], "cursor" : {  }, "lsid" : { "id" : { "$binary" : { "base64": "VJmzOaS5R46C4aFkQzrFaQ==", "subType" : "04" } } }, "$db" : "test" }');
                                                                                                                      QUERY PLAN                                                                                                                       
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Subquery Scan on agg_stage_3
   ->  Limit
         ->  Sort
               Sort Key: (bson_orderby(collection.document, '{ "_id" : { "$numberDouble" : "-1.0" } }'::bson)) DESC NULLS LAST
               ->  Seq Scan on documents_3500 collection
                     Filter: (((document @< '{ "_id" : { "$numberDouble" : "9999.0" } }'::bson) AND (document @!= '{ "some_other_field" : { "$numberDouble" : "3.0" } }'::bson)) OR (document @= '{ "this_predicate_matches_nothing" : true }'::bson))
(6 rows)

-- Vector search with empty vector field
SELECT documentdb_api_internal.create_indexes_non_concurrently('db', '{ "createIndexes": "aggregation_pipeline_empty_vector", "indexes": [ { "key": { "v": "cosmosSearch" }, "name": "vectorIndex", "cosmosSearchOptions": { "kind": "vector-ivf", "numLists": 5, "similarity": "COS", "dimensions": 3 } } ] }', true);
NOTICE:  creating collection
NOTICE:  ivfflat index created with little data
DETAIL:  This will cause low recall.
HINT:  Drop the index until the table has more data.
                                                                                                   create_indexes_non_concurrently                                                                                                   
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "raw" : { "defaultShard" : { "numIndexesBefore" : { "$numberInt" : "1" }, "numIndexesAfter" : { "$numberInt" : "2" }, "createdCollectionAutomatically" : true, "ok" : { "$numberInt" : "1" } } }, "ok" : { "$numberInt" : "1" } }
(1 row)

SELECT documentdb_api.insert_one('db', 'aggregation_pipeline_empty_vector', '{ "_id": 1, "a": "some sentence", "v": [1, 2, 3 ] }');
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db', 'aggregation_pipeline_empty_vector', '{ "_id": 2, "a": "some other sentence", "v": [1, 2.0, 3 ] }');
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db', 'aggregation_pipeline_empty_vector', '{ "_id": 3, "a": "some sentence" }');
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db', 'aggregation_pipeline_empty_vector', '{ "_id": 4, "a": "some other sentence", "v": [3, 2, 1 ] }');
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

BEGIN;
SET LOCAL enable_seqscan = off;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_empty_vector", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "nProbes": 5 }  } }, { "$project": { "rank": {"$round":[{"$multiply": [{"$meta": "searchScore" }, 100000]}]} } } ], "cursor": {} }');
                                   document                                   
------------------------------------------------------------------------------
 { "_id" : { "$numberInt" : "4" }, "rank" : { "$numberDouble" : "90740.0" } }
 { "_id" : { "$numberInt" : "1" }, "rank" : { "$numberDouble" : "72409.0" } }
 { "_id" : { "$numberInt" : "2" }, "rank" : { "$numberDouble" : "72409.0" } }
(3 rows)

EXPLAIN (COSTS OFF)SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_empty_vector", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "nProbes": 5 }  } }, { "$project": { "rank": {"$round":[{"$multiply": [{"$meta": "searchScore" }, 100000]}]} } } ], "cursor": {} }');
                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Subquery Scan on agg_stage_0
   ->  Limit
         ->  Custom Scan (DocumentDBApiQueryScan)
               CosmosSearch Custom Params: { "nProbes" : 5 }
               ->  Index Scan using "vectorIndex" on documents_3504 collection
                     Order By: (public.vector(documentdb_api_internal.bson_extract_vector(document, 'v'::text), 3, true) OPERATOR(public.<=>) '[3,4.9,1]'::public.vector)
                     Filter: documentdb_api_internal.bson_search_param(document, '{ "nProbes" : { "$numberInt" : "5" } }'::bson)
(7 rows)

COMMIT;
ANALYZE;
BEGIN;
SET LOCAL enable_seqscan = off;
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_empty_vector", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "nProbes": 5 }  } }, { "$project": { "rank": {"$round":[{"$multiply": [{"$meta": "searchScore" }, 100000]}]} } } ], "cursor": {} }');
                                   document                                   
------------------------------------------------------------------------------
 { "_id" : { "$numberInt" : "4" }, "rank" : { "$numberDouble" : "90740.0" } }
 { "_id" : { "$numberInt" : "1" }, "rank" : { "$numberDouble" : "72409.0" } }
 { "_id" : { "$numberInt" : "2" }, "rank" : { "$numberDouble" : "72409.0" } }
(3 rows)

EXPLAIN (COSTS OFF)SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline_empty_vector", "pipeline": [ { "$search": { "cosmosSearch": { "vector": [ 3.0, 4.9, 1.0 ], "k": 4, "path": "v", "nProbes": 5 }  } }, { "$project": { "rank": {"$round":[{"$multiply": [{"$meta": "searchScore" }, 100000]}]} } } ], "cursor": {} }');
                                                                                QUERY PLAN                                                                                
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Subquery Scan on agg_stage_0
   ->  Limit
         ->  Custom Scan (DocumentDBApiQueryScan)
               CosmosSearch Custom Params: { "nProbes" : 5 }
               ->  Index Scan using "vectorIndex" on documents_3504 collection
                     Order By: (public.vector(documentdb_api_internal.bson_extract_vector(document, 'v'::text), 3, true) OPERATOR(public.<=>) '[3,4.9,1]'::public.vector)
                     Filter: documentdb_api_internal.bson_search_param(document, '{ "nProbes" : { "$numberInt" : "5" } }'::bson)
(7 rows)

COMMIT;
SELECT drop_collection('db','aggregation_pipeline_empty_vector');
 drop_collection 
-----------------
 t
(1 row)

-- $addFields nested usage
SELECT documentdb_api.insert_one('db','aggregation_pipeline','{ "_id": 100, "movie": "Nebula Drift", "critics": [7, 8, 9], "audience": [8, 7], "bonusPoints": 2 }', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','aggregation_pipeline','{ "_id": 200, "movie": "Quantum Heist", "critics": [6, 6, 7], "audience": [7, 6], "bonusPoints": 3 }', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline": [ { "$match": { "bonusPoints": { "$gte": 0 } } }, { "$addFields": { "totalCritics": { "$sum": "$critics" }, "totalAudience": { "$sum": "$audience" } } }, { "$addFields": { "totalScore": { "$add": [ "$totalCritics", "$totalAudience", "$bonusPoints" ] } } } ], "cursor": {} }');
                                                                                                                                                                                           document                                                                                                                                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : { "$numberInt" : "100" }, "movie" : "Nebula Drift", "critics" : [ { "$numberInt" : "7" }, { "$numberInt" : "8" }, { "$numberInt" : "9" } ], "audience" : [ { "$numberInt" : "8" }, { "$numberInt" : "7" } ], "bonusPoints" : { "$numberInt" : "2" }, "totalCritics" : { "$numberInt" : "24" }, "totalAudience" : { "$numberInt" : "15" }, "totalScore" : { "$numberInt" : "41" } }
 { "_id" : { "$numberInt" : "200" }, "movie" : "Quantum Heist", "critics" : [ { "$numberInt" : "6" }, { "$numberInt" : "6" }, { "$numberInt" : "7" } ], "audience" : [ { "$numberInt" : "7" }, { "$numberInt" : "6" } ], "bonusPoints" : { "$numberInt" : "3" }, "totalCritics" : { "$numberInt" : "19" }, "totalAudience" : { "$numberInt" : "13" }, "totalScore" : { "$numberInt" : "35" } }
(2 rows)

-- match + samplerate
/* insert 100 documents */
/* test unshard case */
DO $$
DECLARE i int;
BEGIN
FOR i IN 1..100 LOOP
PERFORM documentdb_api.insert_one('db', 'agg_pipeline_samplerate', FORMAT('{ "_id": %s }',i)::documentdb_core.bson);
END LOOP;
END;
$$;
NOTICE:  creating collection
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "agg_pipeline_samplerate", "pipeline": [ { "$match": { "$sampleRate": 1 } }, {"$count": "count"} ], "cursor": {} }');
                document                
----------------------------------------
 { "count" : { "$numberInt" : "100" } }
(1 row)

EXPLAIN (COSTS OFF) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "agg_pipeline_samplerate", "pipeline": [ { "$match": { "$sampleRate": 1 } }, {"$count": "count"} ], "cursor": {} }');
                          QUERY PLAN                          
--------------------------------------------------------------
 Aggregate
   ->  Bitmap Heap Scan on documents_3505 collection
         Recheck Cond: (shard_key_value = '3505'::bigint)
         Filter: (random() < '1'::double precision)
         ->  Bitmap Index Scan on _id_
               Index Cond: (shard_key_value = '3505'::bigint)
(6 rows)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "agg_pipeline_samplerate", "pipeline": [ { "$match": { "$sampleRate": 0 } }, {"$count": "count"} ], "cursor": {} }');
               document               
--------------------------------------
 { "count" : { "$numberInt" : "0" } }
(1 row)

EXPLAIN (COSTS OFF) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "agg_pipeline_samplerate", "pipeline": [ { "$match": { "$sampleRate": 0 } }, {"$count": "count"} ], "cursor": {} }');
                          QUERY PLAN                          
--------------------------------------------------------------
 Aggregate
   ->  Bitmap Heap Scan on documents_3505 collection
         Recheck Cond: (shard_key_value = '3505'::bigint)
         Filter: (random() < '0'::double precision)
         ->  Bitmap Index Scan on _id_
               Index Cond: (shard_key_value = '3505'::bigint)
(6 rows)

/* sampleRate will random select document, use greater than 0 to make sure slice of documents is selected */
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "agg_pipeline_samplerate", "pipeline": [ { "$match": { "$sampleRate": 0.5 } }, { "$count": "numMatches" }, { "$addFields": { "gtZero": { "$gt": ["$numMatches", 0] } } }, {"$project": { "_id": 0, "gtZero": 1 } }], "cursor": {} }');
      document       
---------------------
 { "gtZero" : true }
(1 row)

EXPLAIN (COSTS OFF) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "agg_pipeline_samplerate", "pipeline": [ { "$match": { "$sampleRate": 0.5 } }, { "$count": "numMatches" }, { "$addFields": { "gtZero": { "$gt": ["$numMatches", 0] } } }, {"$project": { "_id": 0, "gtZero": 1 } }], "cursor": {} }');
                             QUERY PLAN                             
--------------------------------------------------------------------
 Subquery Scan on agg_stage_2
   ->  Aggregate
         ->  Bitmap Heap Scan on documents_3505 collection
               Recheck Cond: (shard_key_value = '3505'::bigint)
               Filter: (random() < '0.5'::double precision)
               ->  Bitmap Index Scan on _id_
                     Index Cond: (shard_key_value = '3505'::bigint)
(7 rows)

/* test shard case */
SELECT documentdb_api.shard_collection('db', 'agg_pipeline_samplerate', '{ "_id": "hashed" }', false);
 shard_collection 
------------------
 
(1 row)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "agg_pipeline_samplerate", "pipeline": [ { "$match": { "$sampleRate": 1 } }, {"$count": "count"} ], "cursor": {} }');
                document                
----------------------------------------
 { "count" : { "$numberInt" : "100" } }
(1 row)

EXPLAIN (COSTS OFF) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "agg_pipeline_samplerate", "pipeline": [ { "$match": { "$sampleRate": 1 } }, {"$count": "count"} ], "cursor": {} }');
                     QUERY PLAN                     
----------------------------------------------------
 Aggregate
   ->  Seq Scan on documents_3505 collection
         Filter: (random() < '1'::double precision)
(3 rows)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "agg_pipeline_samplerate", "pipeline": [ { "$match": { "$sampleRate": 0 } }, {"$count": "count"} ], "cursor": {} }');
               document               
--------------------------------------
 { "count" : { "$numberInt" : "0" } }
(1 row)

EXPLAIN (COSTS OFF) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "agg_pipeline_samplerate", "pipeline": [ { "$match": { "$sampleRate": 0 } }, {"$count": "count"} ], "cursor": {} }');
                     QUERY PLAN                     
----------------------------------------------------
 Aggregate
   ->  Seq Scan on documents_3505 collection
         Filter: (random() < '0'::double precision)
(3 rows)

/* sampleRate will random select document, use greater than 0 to make sure slice of documents is selected */
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "agg_pipeline_samplerate", "pipeline": [ { "$match": { "$sampleRate": 0.5 } }, { "$count": "numMatches" }, { "$addFields": { "gtZero": { "$gt": ["$numMatches", 0] } } }, {"$project": { "_id": 0, "gtZero": 1 } }], "cursor": {} }');
      document       
---------------------
 { "gtZero" : true }
(1 row)

-- negative samplerate
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "agg_pipeline_samplerate", "pipeline": [ { "$match": { "$sampleRate": -1.23 } }, { "$limit": 1 }, {"$count": "count"} ], "cursor": {} }');
ERROR:  numeric argument to $sampleRate must be in [0, 1]
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "agg_pipeline_samplerate", "pipeline": [ { "$match": { "$sampleRate": null } }, { "$limit": 1 }, {"$count": "count"} ], "cursor": {} }');
ERROR:  The operator $sampleRate requires an argument of numeric data type.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "agg_pipeline_samplerate", "pipeline": [ { "$match": { "$sampleRate": NaN } }, { "$limit": 1 }, {"$count": "count"} ], "cursor": {} }');
ERROR:  numeric argument to $sampleRate must be in [0, 1]
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "agg_pipeline_samplerate", "pipeline": [ { "$match": { "$sampleRate": Infinity } }, { "$limit": 1 }, {"$count": "count"} ], "cursor": {} }');
ERROR:  numeric argument to $sampleRate must be in [0, 1]
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "agg_pipeline_samplerate", "pipeline": [ { "$match": { "$sampleRate": -Infinity } }, { "$limit": 1 }, {"$count": "count"} ], "cursor": {} }');
ERROR:  numeric argument to $sampleRate must be in [0, 1]
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "agg_pipeline_samplerate", "pipeline": [ { "$match": { "$sampleRate": "0.65" } }, { "$limit": 1 }, {"$count": "count"} ], "cursor": {} }');
ERROR:  The operator $sampleRate requires an argument of numeric data type.
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "agg_pipeline_samplerate", "pipeline": [ { "$match": { "$sampleRate": 10 } }, { "$limit": 1 }, {"$count": "count"} ], "cursor": {} }');
ERROR:  numeric argument to $sampleRate must be in [0, 1]
SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "agg_pipeline_samplerate", "pipeline": [ { "$match": { "$sampleRate": false } }, { "$limit": 1 }, {"$count": "count"} ], "cursor": {} }');
ERROR:  The operator $sampleRate requires an argument of numeric data type.
-- match/find with $comment
SELECT document FROM bson_aggregation_find('db', '{ "find": "aggregation_pipeline", "filter": { "_id": "1", "$comment": "finding id 1" }}');
                                                               document                                                               
--------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : [ "x", { "$numberInt" : "1" }, { "$numberDouble" : "2.0" }, true ] } }
(1 row)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "aggregation_pipeline", "pipeline":[ { "$match": { "_id": "1", "$comment": "finding id 1" } } ] }');
                                                               document                                                               
--------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : "1", "int" : { "$numberInt" : "10" }, "a" : { "b" : [ "x", { "$numberInt" : "1" }, { "$numberDouble" : "2.0" }, true ] } }
(1 row)

-- $lookup and $unwind stage combined when null results need to be preserved
SELECT documentdb_api.insert_one('db','lookup_directors','{ "_id": 1, "name": "Alex Veridian" }', NULL);
NOTICE:  creating collection
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','lookup_directors','{ "_id": 2, "name": "Morgan Slate" }', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','lookup_movies','{ "_id": 1, "title": "Shadow Horizon", "director": "Alex Veridian" }', NULL);
NOTICE:  creating collection
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','lookup_movies','{ "_id": 2, "title": "Neon Abyss", "director": "Morgan Slate" }', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT documentdb_api.insert_one('db','lookup_movies','{ "_id": 3, "title": "Celestial Rift", "director": "Alex Veridian" }', NULL);
                              insert_one                              
----------------------------------------------------------------------
 { "n" : { "$numberInt" : "1" }, "ok" : { "$numberDouble" : "1.0" } }
(1 row)

SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "lookup_movies", "pipeline": [ { "$lookup": { "from": "lookup_directors", "localField": "director", "foreignField": "name", "as": "director_info" } }, { "$unwind": { "path": "$director_info", "preserveNullAndEmptyArrays": true } }, { "$match": { "title": "Celestial Rift" } } ], "cursor": {} }');
                                                                                   document                                                                                   
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 { "_id" : { "$numberInt" : "3" }, "title" : "Celestial Rift", "director" : "Alex Veridian", "director_info" : { "_id" : { "$numberInt" : "1" }, "name" : "Alex Veridian" } }
(1 row)

EXPLAIN (COSTS OFF, VERBOSE ON) SELECT document FROM bson_aggregation_pipeline('db', '{ "aggregate": "lookup_movies", "pipeline": [ { "$lookup": { "from": "lookup_directors", "localField": "director", "foreignField": "name", "as": "director_info" } }, { "$unwind": { "path": "$director_info", "preserveNullAndEmptyArrays": true } }, { "$match": { "title": "Celestial Rift" } } ], "cursor": {} }');
                                                                                                                QUERY PLAN                                                                                                                 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop Left Join
   Output: documentdb_api_internal.bson_dollar_merge_documents_at_path(collection.document, COALESCE(collection_0_1.document, '{ }'::bson), 'director_info'::text)
   Filter: (documentdb_api_internal.bson_dollar_merge_documents_at_path(collection.document, COALESCE(collection_0_1.document, '{ }'::bson), 'director_info'::text) #= '{ "title" : "Celestial Rift" }'::bsonquery)
   ->  Bitmap Heap Scan on documentdb_data.documents_3507 collection
         Output: collection.shard_key_value, collection.object_id, collection.document
         Recheck Cond: (collection.shard_key_value = '3507'::bigint)
         ->  Bitmap Index Scan on _id_
               Index Cond: (collection.shard_key_value = '3507'::bigint)
   ->  Bitmap Heap Scan on documentdb_data.documents_3506 collection_0_1
         Output: collection_0_1.document
         Recheck Cond: (collection_0_1.shard_key_value = '3506'::bigint)
         Filter: documentdb_api_internal.bson_dollar_lookup_join_filter(collection_0_1.document, documentdb_api_internal.bson_dollar_lookup_extract_filter_expression(collection.document, '{ "name" : "director" }'::bson), 'name'::text)
         ->  Bitmap Index Scan on _id_
               Index Cond: (collection_0_1.shard_key_value = '3506'::bigint)
(14 rows)

